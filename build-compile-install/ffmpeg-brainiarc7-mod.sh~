#!/bin/bash

#This script will compile and install a static ffmpeg build with support for nvenc un ubuntu.
#See the prefix path and compile options if edits are needed to suit your needs.

#add one of the following ppas for latest libva dev headers
# sudo add-apt-repository ppa:savoury1/ffmpeg4
# OR
# sudo add-apt-repository ppa:oibaf/graphics-drivers
# sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade

# check versions = libva, libva-utils, cuda sdk, 

TOPDIR=/mnt/Data/Build/ffmpeg
BINDIR=/mnt/Data/Build/ffmpeg/bin
LIBDIR=/mnt/Data/Build/ffmpeg/lib
INCLUDEDIR=/mnt/Data/Build/ffmpeg/include
SOURCEDIR=/mnt/Data/Build/ffmpeg/ffmpeg_sources
BUILDDIR=/mnt/Data/Build/ffmpeg/ffmpeg_build

#install required things from apt
installLibs(){
echo -e "\nINSTALLING CORE DEPENDENCIES"
sudo apt install autoconf automake build-essential checkinstall cmake git libdrm-dev libfreetype6-dev libgnutls28-dev libsdl1.2-dev libsdl2-dev libtool libva-dev libxcb-dri3-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev meson nasm ninja-build pkg-config texinfo wget yasm
}

#install optional ffmpeg flags/features
installOptionalLibs(){
echo -e "\n\nINSTALLING OPTIONAL DEPENDENCIES"
sudo apt install libaom-dev libass-dev libbluray-dev libdav1d-dev libfdk-aac-dev libgpac-dev libmp3lame-dev libogg-dev libopus-dev libtheora-dev libvorbis-dev libvpx-dev libx264-dev libx265-dev libxml2-dev zlib1g-dev \
p11-kit libchromaprint-dev frei0r-plugins-dev gnutls-dev ladspa-sdk libcaca-dev libcdio-paranoia-dev libcodec2-dev libfontconfig1-dev libfribidi-dev libgme-dev libgsm1-dev libjack-dev libmodplug-dev libopencore-amrnb-dev libopencore-amrwb-dev libvo-amrwbenc-dev libopenjp2-7-dev libopenmpt-dev libpulse-dev librsvg2-dev librubberband-dev librtmp-dev libshine-dev libsmbclient-dev libsnappy-dev libsoxr-dev libspeex-dev libssh-dev libssl-dev libtesseract-dev libtwolame-dev libv4l-dev libwavpack-dev libwebp-dev libxvidcore-dev libzmq3-dev libzvbi-dev liblilv-dev libopenal-dev opencl-dev cargo libvidstab-dev libzimg-dev libmysofa-dev
#libvdpau-dev
}

#install libs needed for vaapi build
installVaapiLibs(){
echo -e "\n\nINSTALLING VAAPI DEPENDENCIES"
sudo apt install libx11-dev libpciaccess-dev libpciaccess0 libperl-dev mercurial texi2html xorg-dev
}

#build & install libva
InstallLibva(){
echo -e "\nBuilding & installing libva from repositories"
cd $SOURCEDIR
git clone https://github.com/intel/libva.git
cd libva
./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib/x86_64-linux-gnu --enable-x11=yes --enable-glx=yes
time make -j$(nproc) VERBOSE=1
sudo checkinstall -y --deldoc=yes --pkgname=libva2git --pkgversion=1:2.19.0.pre1
hash -r
}

#build & install va-utils
InstallLibvaUtils(){
echo -e "\nBuilding & installing libva-utils from repositories"
cd $SOURCEDIR
git clone https://github.com/intel/libva-utils
cd libva-utils
./autogen.sh --prefix=/usr/local
./configure
time make -j$(nproc) VERBOSE=1
sudo checkinstall -y --deldoc=yes --pkgname=libva-utils --pkgversion=1:2.19.0.pre1
}

#install CUDA SDK
InstallCUDASDK(){
echo -e "\nInstalling CUDA and the latest driver repositories from repositories"
cd $SOURCEDIR
wget -c -v -nc https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.2.88-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu1604_9.2.88-1_amd64.deb
sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
sudo apt-get -y update
sudo apt-get -y install cuda
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt-get update && sudo apt-get -y upgrade
}

#Install nvidia SDK
installSDK(){
echo -e "\nInstalling the nVidia NVENC SDK."
cd $SOURCEDIR
git clone https://git.videolan.org/git/ffmpeg/nv-codec-headers.git
cd nv-codec-headers
make
sudo make install
}

#Compile nasm
compileNasm(){
echo -e "\n\nCompiling nasm"
cd $SOURCEDIR
wget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2
tar xjvf nasm-2.15.05.tar.bz2
cd nasm-2.15.05
./configure --prefix="$BUILDDIR" --bindir="$BINDIR"
make -j$(nproc)
make -j$(nproc) install
make -j$(nproc) distclean
}

#Compile libaom
compileLibAom(){
echo -e "\n\nCOMPILING LIBAOM"
cd $SOURCEDIR
git -C aom pull 2> /dev/null || git clone --depth 1 https://aomedia.googlesource.com/aom
mkdir -p aom_build
cd aom_build
PATH="$BINDIR:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$BUILDDIR" -DENABLE_TESTS=OFF -DENABLE_NASM=on ../aom
PATH="$BINDIR:$PATH" make
make install
}

#Compile libdav1d
compileLibDav1d(){
echo -e "\n\nCOMPILING LIBDAV1D"
cd $SOURCEDIR
git -C dav1d pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
mkdir -p dav1d/build
cd dav1d/build
meson setup -Denable_tools=false -Denable_tests=false --default-library=static .. --prefix "$BUILDDIR" --libdir="$BUILDDIR/lib"
ninja
ninja install
}

#Compile libfdk-aac
compileLibFdkAac(){
echo -e "\n\nCOMPILING LIBFDK-AAC"
cd $SOURCEDIR
git -C fdk-aac pull 2> /dev/null || git clone --depth 1 https://github.com/mstorsjo/fdk-aac
cd fdk-aac
autoreconf -fiv
./configure --prefix="$BUILDDIR" --disable-shared --enable-static
make
make install
}

#Compile libmp3lame
compileLibMP3Lame(){
echo -e "\n\nCOMPILING LIBMP3LAME"
cd $SOURCEDIR
wget http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
tar xzvf lame-3.99.5.tar.gz
cd lame-3.99.5
./configure --prefix="$BUILDDIR" --enable-nasm --disable-shared --enable-static
make -j$(nproc)
make -j$(nproc) install
make -j$(nproc) distclean
}

#Compile libopus
compileLibOpus(){
echo -e "\n\nCOMPILING LIBOPUS"
cd $SOURCEDIR
wget http://downloads.xiph.org/releases/opus/opus-1.2.1.tar.gz
tar xzvf opus-1.2.1.tar.gz
cd opus-1.2.1
./configure --prefix="$BUILDDIR" --disable-shared --enable-static
make -j$(nproc)
make -j$(nproc) install
make -j$(nproc) distclean
}

#compile libsvtav1
compileSvtAv1(){
echo -e "\n\nCOMPILING LibSvtAv1"
cd $SOURCEDIR
git -C SVT-AV1 pull 2> /dev/null || git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git
cd SVT-AV1/Build
PATH="$BINDIR:$PATH" cmake -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$BUILDDIR" -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF ..
PATH="$BINDIR:$PATH" make -j$(nproc)
make -j$(nproc) install
}

#Compile libvmaf
compileLibVmaf(){
echo -e "\n\nCOMPILING LIBVMAF"
cd $SOURCEDIR
wget https://github.com/Netflix/vmaf/archive/v2.1.1.tar.gz
tar xvf v2.1.1.tar.gz
mkdir -p vmaf-2.1.1/libvmaf/build
cd vmaf-2.1.1/libvmaf/build
meson setup -Denable_tests=false -Denable_docs=false --buildtype=release .. --prefix "$BUILDDIR"
ninja
ninja install
}

#Compile libvpx
compileLibPvx(){
echo -e "\n\nCOMPILING LIBVPX"
cd $SOURCEDIR
git clone https://chromium.googlesource.com/webm/libvpx
cd libvpx
PATH="$BINDIR:$PATH" ./configure --prefix="$BUILDDIR" --disable-examples --enable-runtime-cpu-detect --enable-vp9 --enable-vp8 \
--enable-postproc --enable-vp9-postproc --enable-multi-res-encoding --enable-webm-io --enable-better-hw-compatibility --enable-vp9-highbitdepth --enable-onthefly-bitpacking --enable-realtime-only \
--cpu=native --as=nasm
PATH="$BINDIR:$PATH" make -j$(nproc)
make -j$(nproc) install
make -j$(nproc) clean
}

#Compile libx264
compileLibX264(){
echo -e "\n\nCompiling libx264"
cd $SOURCEDIR
git -C x264 pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/x264.git
cd x264
PATH="$BINDIR:$PATH" ./configure --prefix="$BUILDDIR" --bindir="$BINDIR" --enable-static --enable-pic
PATH="$BINDIR:$PATH" make -j$(nproc)
make -j$(nproc) install
make -j$(nproc) distclean
}

#Compile libx265
compileLibX265(){
echo -e "\n\nCOMPILING LIBX265"
cd $SOURCEDIR
sudo apt-get install libnuma-dev
wget -O x265.tar.bz2 https://bitbucket.org/multicoreware/x265_git/get/master.tar.bz2
tar xjvf x265.tar.bz2
cd multicoreware*/build/linux
PATH="$BINDIR:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$BUILDDIR" -DENABLE_SHARED=off ../../source
PATH="$BINDIR:$PATH" make
make install
}

#AMF
getAmfHeaders(){
echo -e "\n\nGETTING AMF"
cd $SOURCEDIR
wget https://github.com/GPUOpen-LibrariesAndSDKs/AMF/archive/refs/tags/v1.4.29.tar.gz
tar xvf v1.4.29.tar.gz
mkdir -p $BUILDDIR/include/AMF
mv AMF-1.4.29/amf/public/include/* "$BUILDDIR/include/AMF/"
}

#Compile ffmpeg (DEFAULT INSTALL PATH IS /USR?LOCAL
compileFfmpeg(){
echo -e "\n\nCOMPILING FFMPEG"
cd $SOURCEDIR
git clone https://github.com/FFmpeg/FFmpeg -b master
cd FFmpeg
PATH="$BINDIR:$PATH" PKG_CONFIG_PATH="$BUILDDIR/lib/pkgconfig:$BUILDDIR/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" ./configure \
  --prefix="/usr/local" \
  --extra-cflags="-I$BUILDDIR/include" \
  --extra-ldflags="-L$BUILDDIR/lib" \
  --enable-gpl \
  --enable-version3 \
  --enable-nonfree \
  --enable-gpl \
  --enable-gnutls \
  --enable-libdav1d \
  --enable-libaom \
  --enable-libass \
  --enable-libfdk-aac \
  --enable-vaapi \
  --enable-libfreetype \
  --enable-libmp3lame \
  --enable-libopus \
  --enable-libsvtav1 \
  --enable-libtheora \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libx264 \
  --enable-libx265 \
  --enable-chromaprint \
  --enable-frei0r \
  --enable-gmp \
  --enable-ladspa \
  --enable-libcaca \
  --enable-libcdio \
  --enable-libcodec2 \
  --enable-libfontconfig \
  --enable-libfribidi \
  --enable-libgme \
  --enable-libgsm \
  --enable-libjack \
  --enable-libmodplug \
  --enable-libopencore-amrnb \
  --enable-libopencore-amrwb \
  --enable-libvo-amrwbenc \
  --enable-libopenjpeg \
  --enable-libopenmpt \
  --enable-libpulse \
  --enable-librsvg \
  --enable-librubberband \
  --enable-librtmp \
  --enable-libshine \
  --enable-libsnappy \
  --enable-libsoxr \
  --enable-libspeex \
  --enable-libssh \
  --enable-libtesseract \
  --enable-libtwolame \
  --enable-libv4l2 \
  --enable-libwebp \
  --enable-libxvid \
  --enable-libxml2 \
  --enable-libzmq \
  --enable-libzvbi \
  --enable-lv2 \
  --enable-libmysofa \
  --enable-openal \
  --enable-opencl \
  --enable-opengl \
  --enable-libdrm \
  --enable-libbluray \
  --enable-librav1e \
  --enable-libvidstab \
  --enable-libzimg \
  --enable-libsrt \
  --enable-pthreads \
  --disable-debug \
  --disable-doc \
  --disable-ffnvcodec \
  --enable-libvmaf \
  --enable-amf \
  --disable-static \
  --enable-shared
#  --disable-shared
#  --enable-libnpp \
#  --enable-avisynth \
#  --disable-ffnvcodec
#  --enable-small \
#  --bindir="$BINDIR" \

#  --enable-nvenc \
#  --enable-cuda-sdk \
#  --enable-cuvid \
#  --extra-cflags="-I/usr/local/cuda/include/" \
#  --extra-ldflags=-L/usr/local/cuda/lib64/ 
#  --enable-openssl \

PATH="$BINDIR:$PATH" make -j$(nproc)
sudo checkinstall -y --deldoc=yes --pkgname=ffmpeg-custom-build --pkgversion=6.0~ubuntu22.04
# sudo make -j$(nproc) install
make -j$(nproc) distclean
}

#The process
echo -e "\nUPDATING APT PACKAGES"
sudo apt update
mkdir $TOPDIR
cd $TOPDIR
mkdir $SOURCEDIR
mkdir $BINDIR
mkdir $LIBDIR
mkdir $BUILDDIR
mkdir $INCLUDEDIR
installLibs
installOptionalLibs
#installVaapiLibs
#InstallLibva
#InstallLibvaUtils
#InstallCUDASDK
#installSDK
#compileNasm
#compileLibAom
#compileLibDav1d
#compileLibFdkAac
#compileLibMP3Lame
#compileLibOpus
#compileLibVpx
compileSvtAv1
compileLibVmaf
#compileLibX264
#compileLibX265
getAmfHeaders
compileFfmpeg
sudo ldconfig
hash -r
echo "Complete!"
