<html><head><title>Improved Editing Facilities (Learning the vi Editor, Sixth Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Linda Lamb and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-426-6" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the vi Editor, Sixth Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning the vi Editor" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch11_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">11.8. Improved Editing Facilities</h2>

<p>
<a name="ch11.facil1" />
<a name="ch11.facil2" />
<a name="ch11.facil3" />
This section describes the features of <em class="emphasis">vim</em>
that make simple text editing easier and more powerful.</p>

<a name="vi6-ch-11-sect-8.1" /><div class="sect2">
<h3 class="sect2">11.8.1. Command-Line History and Completion</h3>

<p>
<a name="IXT-11-281768" />
<a name="IXT-11-281769" />
<a name="IXT-11-281770" />
<a name="IXT-11-281771" />
<a name="IXT-11-281772" />
<a name="IXT-11-281773" />
<em class="emphasis">vim</em> keeps a history of your <em class="emphasis">ex</em> commands,
search strings, and expressions in its extended command language.
These are three separate histories. The size of each is controlled
<a name="IXT-11-281774" />
by the <tt class="literal">history</tt> option; the default is 20.
You may wish to increase it in your <em class="filename">.vimrc</em> file,
although <em class="emphasis">vim</em> does take steps to maintain only unique
commands.</p>


<p>To access the history, use the <img src="figs/U2191.gif" alt="Figure " /> cursor key on the colon command
line. This will move backwards through the saved commands (most recent
first). The <img src="figs/U2193.gif" alt="Figure " /> key will move forwards.
You can move around on the command line using the <img src="figs/U2190.gif" alt="Figure " /> and <img src="figs/U2192.gif" alt="Figure " />
keys. By default, text that you type is inserted into the
command line. You can use the <span class="keycap">INS</span> (Insert) key
on your keyboard to toggle this mode, in which case what you
type will replace what's on the command line. The
<span class="keycap">BACKSPACE</span> key will erase characters.</p>

<p>You can use the <span class="keycap">SHIFT</span> or <span class="keycap">CTRL</span>
key in combination with the <img src="figs/U2190.gif" alt="Figure " /> and <img src="figs/U2192.gif" alt="Figure " /> keys to move the
cursor left or right one word at time.
This may or may not work on all keyboards, though.
You can use <tt class="literal">^B</tt> or <span class="keycap">HOME</span> to
move the cursor to the beginning of the command line, and
<tt class="literal">^E</tt> or <span class="keycap">END</span> to move to the
end of the command line. The control key versions should always
work.</p>

<p>The behavior of the <span class="keycap">ESC</span> character can vary.
If <em class="emphasis">vim</em> is in
<em class="emphasis">vi</em> compatibility mode, <span class="keycap">ESC</span>
acts likes <span class="keycap">RETURN</span> and executes the command.
When <em class="emphasis">vi</em>-compatibility is turned off,
<span class="keycap">ESC</span> will exit the command line without executing
anything.</p>

<p><em class="emphasis">vim</em> also provides completion facilities on the
<em class="emphasis">ex</em> command line.
<a name="IXT-11-281775" />
The <tt class="literal">wildchar</tt> option contains the character that
you type when you want <em class="emphasis">vim</em> to do a completion.
The default value is the tab character.
You can use completion for
all of the following:</p>

<dl>
<dt><i>Command names</i></dt><dd>Available at the start of the command line.</p></dd>


<dt><i>Tag values</i></dt><dd>After you've typed <tt class="literal">:tag</tt>.</p></dd>


<dt><i>Filenames</i></dt><dd>When typing a command that takes a filename argument.
When multiple files match a pattern during filename completion,
<a name="IXT-11-281776" />
the value of the <tt class="literal">suffixes</tt>
option sets a priority among them, in order
to pick the one <em class="emphasis">vim</em></tt> will actually use.
(See <tt class="literal">:help suffixes</tt> for the details.)</p></dd>


<dt><i>Option values</i></dt><dd>When entering a <tt class="literal">:set</tt> command.
This has two features: when typing the name of the
option itself, hitting <span class="keycap">TAB</span> will complete the
option name.
You can then type the <tt class="literal">=</tt> sign and hit
<span class="keycap">TAB</span> again, and <em class="emphasis">vim</em> will fill
in the current value of the variable.</p></dd>

</dl>

<p>Besides just the <span class="keycap">TAB</span> key to do an expansion,
a number of other control keys provide additional functionality.
<a href="ch11_08.htm#vi6-ch-11-tab-3">Table 11.3</a>
describes the commands and what they do.</p>

<a name="vi6-ch-11-tab-3" /><h4 class="objtitle">Table 11.3. vim Command-Line Completion Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">^D</tt></td>
<td><p>Lists the names that match the pattern.
For filenames, directories will be highlighted.
<a name="IXT-11-281777" /></p></td>
</tr>

<tr>
<td><p>Value of <tt class="literal">wildchar</tt></p></td>
<td><p>(Default: tab)
Performs a match, inserting the generated text.
For multiple matches, the first match is inserted.
Hitting <span class="keycap">TAB</span> successively cycles among all the
matches.</p></td>
</tr>

<tr>
<td><tt class="literal">^N</tt></td>
<td><p>Go to next of multiple <tt class="literal">wildchar</tt> matches, if any;
<a name="IXT-11-281778" />
otherwise, recall more recent history line.</p></td>
</tr>

<tr>
<td><tt class="literal">^P</tt></td>
<td><p>Go to previous of multiple <tt class="literal">wildchar</tt> matches, if any;
otherwise, recall older history line.
<a name="IXT-11-281779" /></p></td>
</tr>

<tr>
<td><tt class="literal">^A</tt></td>
<td><p>Insert all names that match the pattern.
<a name="IXT-11-281780" /></p></td>
</tr>

<tr>
<td><tt class="literal">^L</tt></td>
<td><p>If there is exactly one match, insert it; otherwise,
expand to the longest common prefix of the multiple matches.
<a name="IXT-11-281781" /></p></td>
</tr>


</table><p><p>

<p>The completion facilities are extensive; see <tt class="literal">:help cmdline</tt>
for the full details. Besides command-line completion, <em class="emphasis">vim</em>
also provides insert mode completion.</p>

<p>
<a name="IXT-11-281782" />
When typing text, especially in programs, the same words appear quite often.


<em class="emphasis">vim</em> has
commands that search backwards or forwards for a match with a half-finished
word. For example, if you were typing this text and had
entered <em class="emphasis">ex</em>, giving
the <tt class="literal">^P</tt> command would have completed
it to <em class="emphasis">example</em>.  This is a 

nice
way to reduce the number of typed characters and to avoid spelling mistakes.</p>

<p>Completion works not only with words in the text where you are typing,
you can also fetch words from much further away. 
<a href="ch11_08.htm#vi6-ch-11-tab-4">Table 11.4</a> shows an overview of the relevant
commands.</p>

<a name="vi6-ch-11-tab-4" /><h4 class="objtitle">Table 11.4. vim Insert Mode Completion Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">^N</tt></td>
<td><p>Complete a word from the current buffer, searching
<a name="IXT-11-281783" />
forward (mnemonic: next).</p></td>
</tr>

<tr>
<td><tt class="literal">^P</tt></td>
<td><p>Complete a word from the current buffer, searching
<a name="IXT-11-281784" />
backward (mnemonic: previous).</p></td>
</tr>

<tr>
<td><tt class="literal">^X ^K</tt></td>
<td><p>Complete words from a dictionary.
<a name="IXT-11-281785" /></p></td>
</tr>

<tr>
<td><tt class="literal">^X ^I</tt></td>
<td><p>Complete words from included files.</p></td>
</tr>

<tr>
<td><tt class="literal">^X ^D</tt></td>
<td><p>Complete a macro (defined word) from included files.</p></td>
</tr>

<tr>
<td><tt class="literal">^X ^]</tt></td>
<td><p>Complete words from a tags file.</p></td>
</tr>

<tr>
<td><tt class="literal">^X ^F</tt></td>
<td><p>Complete a filename.</p></td>
</tr>

<tr>
<td><tt class="literal">^X ^L</tt></td>
<td><p>Complete a whole line from the current buffer.</p></td>
</tr>


</table><p><p>

<p>See <tt class="literal">:help ins-completion</tt> for more details.</p>
</div>




<a name="vi6-ch-11-sect-8.2" /><div class="sect2">
<h3 class="sect2">11.8.2. Tag Stacks</h3>

<p>
<a name="IXT-11-281786" />
<a name="IXT-11-281787" />
<a name="IXT-11-281788" />
<a name="IXT-11-281789" />
Tag stacking is described in <a href="ch08_05.htm#vi6-ch-8-sect-5.2">Section 8.5.3</a>.
<em class="emphasis">vim</em> provides the richest set of facilities for
working with tags. Besides just the ability to stack tags,
if there are multiple matching tags, you can choose among them.
You can also do a tag selection and window splitting operation
in one command. See <a href="ch11_08.htm#vi6-ch-11-tab-5">Table 11.5</a> for a list of
<em class="emphasis">vim</em> tag commands.</p>

<a name="vi6-ch-11-tab-5" /><h4 class="objtitle">Table 11.5. vim Tag Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">ta</tt>[<tt class="literal">g</tt>][<tt class="literal">!</tt>] [<em class="replaceable"><tt>tagstring</tt></em>]</td>
<td><p>Edit the file containing
<em class="emphasis">tagstring</em> as defined in the <em class="filename">tags</em>
<a name="IXT-11-281790" />
file. The <tt class="literal">!</tt> forces <em class="emphasis">vim</em> to
switch to the new file if the current buffer has been modified
but not saved. The file may or may not be written out depending
upon the setting of the <tt class="literal">autowrite</tt> option.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>count</tt></em>]<tt class="literal">ta</tt>[<tt class="literal">g</tt>][<tt class="literal">!</tt>]</td>
<td><p>Jump to the
<em class="emphasis">count</em>th
newer entry in the tag stack.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>count</tt></em>]<tt class="literal">po</tt>[<tt class="literal">p</tt>][<tt class="literal">!</tt>]</td>
<td><p>Pops a cursor position off the stack,
restoring the cursor to its previous position.
<a name="IXT-11-281791" />
If supplied, go to the <em class="emphasis">count</em>th
older entry.</p></td>
</tr>

<tr>
<td><tt class="literal">tags</tt></td>
<td><p>Display the contents
<a name="IXT-11-281792" />
of the tag stack.</p></td>
</tr>

<tr>
<td><tt class="literal">ts</tt>[<tt class="literal">elect</tt>][<tt class="literal">!</tt>] [<em class="replaceable"><tt>tagstring</tt></em>]</td>
<td><p>List the tags
that match <em class="emphasis">tagstring</em>, using the
<a name="IXT-11-281793" />
information in the tags file(s).
If no <em class="emphasis">tagstring</em> is given,
the last tag name from the tag stack is used.</p></td>
</tr>

<tr>
<td><tt class="literal">sts</tt>[<tt class="literal">elect</tt>][<tt class="literal">!</tt>] [<em class="replaceable"><tt>tagstring</tt></em>]</td>
<td><p>Like <tt class="literal">:tselect</tt>,
<a name="IXT-11-281794" />
but splits the window for the selected tag.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>count</tt></em>]<tt class="literal">tn</tt>[<tt class="literal">ext</tt>][<tt class="literal">!</tt>]</td>
<td><p>Jump to the
<a name="IXT-11-281795" />
<em class="emphasis">count</em>th next matching
tag (default 1).</p></td>
</tr>


<tr>
<td>[<em class="replaceable"><tt>count</tt></em>]<tt class="literal">tp</tt>[<tt class="literal">revious</tt>][<tt class="literal">!</tt>]</td>
<td rowspan="1"><p>Jump to the
<em class="emphasis">count</em>th previous matching
<a name="IXT-11-281796" />
tag (default 1).</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>count</tt></em>]<tt class="literal">tN</tt>[<tt class="literal">ext</tt>][<tt class="literal">!</tt>]
<a name="IXT-11-281797" /></td>
</tr>


<tr>
<td>[<em class="replaceable"><tt>count</tt></em>]<tt class="literal">tr</tt>[<tt class="literal">ewind</tt>][<tt class="literal">!</tt>]</td>
<td><p>Jump to the first
<a name="IXT-11-281798" />
<a name="IXT-11-281799" />
matching tag. With <em class="emphasis">count</em>, jump to the
<em class="emphasis">count</em>th matching
tag.</p></td>
</tr>

<tr>
<td><tt class="literal">tl</tt>[<tt class="literal">ast</tt>][<tt class="literal">!</tt>]</td>
<td><p>Jump to the last
matching tag.</p></td>
</tr>


</table><p><p>

<p>Normally, <em class="emphasis">vim</em> shows you which matching tag, out
of how many, has been jumped to:</p>

<blockquote><pre class="code">tag 1 of &gt;3</pre></blockquote>

<p>It uses a greater-than sign (<tt class="literal">&gt;</tt>) to indicate that it has
not yet tried all the matches. You can use <tt class="literal">:tnext</tt>
or <tt class="literal">:tlast</tt> to try more matches. If this message is
not displayed because of some other message,
use <tt class="literal">:0tn</tt> to see it.</p>

<p>
<a name="IXT-11-281800" />
The output of the <tt class="literal">:tags</tt> command is shown below.
The current location is marked with a greater than sign
(<tt class="literal">&gt;</tt>):</p>

<blockquote><pre class="code"># TO tag      FROM line in file
   1  1 main	         1  harddisk2:text/vim/test
 &gt; 2  2 FuncA	        58  -current-
   3  1 FuncC	       357  harddisk2:text/vim/src/amiga.c</pre></blockquote>

<p>
<a name="IXT-11-281801" />
The <tt class="literal">:tselect</tt> command lets you pick from
more than one matching tag. The "priority"
(<tt class="literal">pri</tt> field) indicates the quality of the
match (global versus static, exact case versus case-independent, etc.);
this is described more fully in the <em class="emphasis">vim</em> documentation.</p>

<blockquote><pre class="code">nr pri kind tag	        file ~
   1 F   f    mch_delay          os_amiga.c
		mch_delay(msec, ignoreinput)
 &gt; 2 F   f    mch_delay          os_msdos.c
		mch_delay(msec, ignoreinput)
   3 F   f    mch_delay          os_unix.c
		mch_delay(msec, ignoreinput)
Enter nr of choice (&lt;CR&gt; to abort):</pre></blockquote>

<p>The <tt class="literal">:tag</tt> and <tt class="literal">:tselect</tt>
commands can be given an argument that starts with <tt class="literal">/</tt>.
In that case, this argument is treated as a regular expression.
<em class="emphasis">vim</em> will find all the tags that match
the given regular expression.<a href="#FOOTNOTE-57">[57]</a>
For example, <tt class="literal">:tag /normal</tt> will find the
macro <tt class="literal">NORMAL</tt>, the function <tt class="literal">normal_cmd</tt>,
and so on. Use <tt class="literal">:tselect /normal</tt> and enter the number
of the tag you want.</p><blockquote class="footnote">

<a name="FOOTNOTE-57" /><p> [57]Prior to
Version 5.1, <em class="emphasis">vim</em> keyed its treatment
of the <tt class="literal">:tag</tt> or <tt class="literal">:tselect</tt> argument
as a regular expression based on the presence or absence of
special characters. The use of <tt class="literal">/</tt> disambiguates
the process.</p>

</blockquote>

<p>The <em class="emphasis">vi</em> command mode commands are described in
<a href="ch11_08.htm#vi6-ch-11-tab-6">Table 11.6</a>.
Besides using the keyboard, as in the other editors, you
can also use the mouse, if mouse support is enabled in your
version of <em class="emphasis">vim</em>.</p>

<a name="vi6-ch-11-tab-6" /><h4 class="objtitle">Table 11.6. vim Command Mode Tag Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">^]</tt></td>
<td rowspan="2"><p>Look up the location of the identifier
<a name="IXT-11-281802" />
under the cursor in the <em class="filename">tags</em> file, and move to that
location. The current location is automatically pushed onto the
tag stack.</p></td>
</tr>

<tr>
<td>&#160;<tt class="literal">g &lt;LeftMouse&gt;</tt></td>
</tr>

<tr>
<td>&#160;<tt class="literal">CTRL-&lt;LeftMouse&gt;</tt></td>
</tr>


<tr>
<td><tt class="literal">^T</tt></td>
<td><p>Return to the previous location
in the tag stack, i.e., pop off one element.
<a name="IXT-11-281803" />
A preceding count specifies how many elements to pop off
the stack.</p></td>
</tr>


</table><p><p>

<p>The <em class="emphasis">vim</em> options that affect tag searching
are described in
<a href="ch11_08.htm#vi6-ch-11-tab-7">Table 11.7</a>.</p>

<a name="vi6-ch-11-tab-7" /><h4 class="objtitle">Table 11.7. vim Options for Tag Management</h4><table border="1" cellpadding="3">

<tr>
<th>Option</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">taglength</tt>, <tt class="literal">tl</tt></td>
<td><p>Controls the number of significant
characters in a tag
<a name="IXT-11-281804" />
<a name="IXT-11-281805" />
that is to be looked up. The default value of zero indicates that all
characters are significant.</p></td>
</tr>

<tr>
<td><tt class="literal">tags</tt></td>
<td><p>The value is a list of
filenames in which to look for tags.
<a name="IXT-11-281806" />
As a special case, if a filename starts with <tt class="literal">./</tt>,
the dot is replaced with the directory part of the current file's
pathname, making it possible to use <em class="filename">tags</em> files
in a different directory.
The default value is <tt class="literal">"./tags,tags"</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">tagrelative</tt></td>
<td><p>When set to true (the default), and using
<a name="IXT-11-281807" />
a <em class="filename">tags</em> file in another directory, filenames in
that <em class="filename">tags</em> file are considered to be relative to
the directory where the <em class="filename">tags</em> file is.</p></td>
</tr>


</table><p><p>

<p>The <em class="emphasis">vim</em> 5.1 distribution comes with
Version 2.0.3 of the Exuberant <em class="emphasis">ctags</em> program.
As of this writing, this is the current version of
Exuberant <em class="emphasis">ctags</em>.</p>

<p><em class="emphasis">vim</em> can use <em class="emphasis">emacs</em> style
<em class="filename">etags</em> files, but this is only for
backwards compatibility; the format is not documented in the
<em class="emphasis">vim</em> documentation, nor is the use of
<em class="filename">etags</em> files encouraged.</p>

<p>Finally, like <em class="emphasis">elvis</em>, <em class="emphasis">vim</em> also
looks up the entire word
containing the cursor, not just the part of the word from the
cursor location forward.</p>
</div>




<a name="vi6-ch-11-sect-8.3" /><div class="sect2">
<h3 class="sect2">11.8.3. Infinite Undo</h3>

<p>
<a name="IXT-11-281808" />
<a name="IXT-11-281809" />
In <em class="emphasis">vim</em>, being able to undo and redo multiple levels of changes
is controlled by the <tt class="literal">undolevels</tt> option. This option is a number
indicating how many levels of
<a name="IXT-11-281810" />
"undo" that <em class="emphasis">vim</em> should allow.
A negative value disallows <em class="emphasis">any</em> undoing (which is not
terribly useful).</p>

<p>When <tt class="literal">undolevels</tt> is set to a non-zero
value, you enter text as normal. Then each successive <tt class="literal">u</tt>
command undoes one change.
To redo (undo the undo), you use the
(rather mnemonic) <span class="keycap">CTRL-R</span> command.</p>

<p><em class="emphasis">vim</em> is different from <em class="emphasis">elvis</em>; it
starts out with a default value for <tt class="literal">undolevels</tt> of 1,000,
which should be close enough to infinite for any given editing session.
Also, the option is global, and not per buffer.</p>

<p>Once <tt class="literal">undolevels</tt> has been set, a count to either
the <tt class="literal">u</tt> or <tt class="literal">^R</tt> commands undoes or
redoes the given number of changes.</p>

<p>
<a name="IXT-11-281811" />
<em class="emphasis">vim</em> actually implements undoing and redoing in two
different ways. When the <tt class="literal">cpoptions</tt>
(compatibility options)
option
contains the letter <tt class="literal">u</tt>, the <tt class="literal">u</tt>
command works like in <em class="emphasis">vi</em>, and <tt class="literal">^R</tt>
repeats the previous action (like <tt class="literal">.</tt> in
<em class="emphasis">nvi</em>).
When <tt class="literal">u</tt> is absent from <tt class="literal">cpoptions</tt>,
<tt class="literal">u</tt> undoes one step and <tt class="literal">^R</tt>
redoes one step. This is easier to use, but not
<em class="emphasis">vi</em>-compatible.</p>
</div>




<a name="vi6-ch-11-sect-8.4" /><div class="sect2">
<h3 class="sect2">11.8.4. Arbitrary Length Lines and Binary Data</h3>

<p>
<a name="IXT-11-281812" />
<a name="IXT-11-281813" />
<a name="IXT-11-281814" />
<a name="IXT-11-281815" />
<a name="IXT-11-281816" />
<em class="emphasis">vim</em>
does not have a limit on the number or lengths of lines.
When editing a binary file, you should either use the
<tt class="literal">-b</tt> command-line option
or <tt class="literal">:set binary</tt>.
These set several other <em class="emphasis">vim</em> options that make it
easier to edit binary files.
To enter 8-bit text, use <tt class="literal">^V</tt> followed by
three decimal digits.</p>


</div>




<a name="vi6-ch-11-sect-8.5" /><div class="sect2">
<h3 class="sect2">11.8.5. Incremental Searching</h3>

<p>
<a name="IXT-11-281817" />
<a name="IXT-11-281818" />
<a name="IXT-11-281819" />
<a name="IXT-11-281820" />
As mentioned in <a href="ch08_06.htm#vi6-ch-8-sect-6.4">Section 8.6.4</a>,
you enable
incremental searching in <em class="emphasis">vim</em> using
<tt class="literal">:set incsearch</tt>.</p>

<p>The cursor moves through the
file as you type.
<em class="emphasis">vim</em> highlights the text that matches what you've
typed so far.</p>

<p>You may wish to use this with the
<tt class="literal">hlsearch</tt> option, which highlights all
matches of the most recent search pattern.
This option is particularly useful when looking for all uses
of a particular variable or function in program source code.</p>
</div>




<a name="vi6-ch-11-sect-8.6" /><div class="sect2">
<h3 class="sect2">11.8.6. Left-Right Scrolling</h3>

<p>
<a name="IXT-11-281821" />
<a name="IXT-11-281822" />
<a name="IXT-11-281823" />
<a name="IXT-11-281824" />
<a name="IXT-11-281825" />
<a name="IXT-11-281826" />
As mentioned in
<a href="ch08_06.htm#vi6-ch-8-sect-6.5">Section 8.6.5</a>,
you enable
left-right scrolling in <em class="emphasis">vim</em> using
<a name="IXT-11-281827" />
<a name="IXT-11-281828" />
<tt class="literal">:set nowrap</tt>. The value of
<tt class="literal">sidescroll</tt> controls the number of characters
by which <em class="emphasis">vim</em> shifts the screen when scrolling
left to right.
With <tt class="literal">sidescroll</tt> set to zero, each scroll puts the
cursor in the middle of the screen. Otherwise, the screen scrolls by
the desired number of characters.</p>

<p><em class="emphasis">vim</em> also has several commands that
scroll the window sideways, shown in <a href="ch11_08.htm#vi6-ch-11-tab-8">Table 11.8</a>.</p>

<a name="vi6-ch-11-tab-8" /><h4 class="objtitle">Table 11.8. vim Sideways Scrolling Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">zl</tt></td>
<td><p>Scroll the window left.
<a name="IXT-11-281829" /></p></td>
</tr>

<tr>
<td><tt class="literal">zh</tt></td>
<td><p>Scroll the window right.</p></td>
</tr>

<tr>
<td><tt class="literal">zs</tt></td>
<td><p>Scroll the window to put the cursor at the
left (start) of the screen.</p></td>
</tr>

<tr>
<td><tt class="literal">ze</tt></td>
<td><p>Scroll the window to put the cursor at the
right (end) of the screen.</p></td>
</tr>


</table><p><p>
</div>




<a name="vi6-ch-11-sect-8.7" /><div class="sect2">
<h3 class="sect2">11.8.7. Visual Mode</h3>

<p>
<a name="IXT-11-281830" />
<a name="IXT-11-281831" />
<em class="emphasis">vim</em> allows you
to select regions one character at a time, one line at a time,
or rectangularly, using the commands shown in <a href="ch11_08.htm#vi6-ch-11-tab-9">Table 11.9</a>.</p>

<a name="vi6-ch-11-tab-9" /><h4 class="objtitle">Table 11.9. vim Block Mode Command Characters</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">v</tt></td>
<td><p>Start region selection,
<a name="IXT-11-281832" />
character at a time mode.</p></td>
</tr>

<tr>
<td><tt class="literal">V</tt></td>
<td><p>Start region selection,
line at a time mode.</p></td>
</tr>

<tr>
<td><tt class="literal">^V</tt></td>
<td><p>Start region selection,
<a name="IXT-11-281833" />
rectangular mode.</p></td>
</tr>


</table><p><p>

<p><em class="emphasis">vim</em>
highlights (using reverse video) the text as you are selecting.
To make your selection, simply use the normal motion keys. If
<a name="IXT-11-281834" />
<tt class="literal">showmode</tt> is set, <em class="emphasis">vim</em> will
indicate the mode as one of <em class="emphasis">visual</em>,
<em class="emphasis">visual line</em>, or <em class="emphasis">visual block</em>.
If <em class="emphasis">vim</em> is running inside an <em class="emphasis">xterm</em>,
you can also use the mouse to select text (see
<tt class="literal">:help mouse-using</tt>
for the details).
This also works in the GUI versions.
The screen below shows a rectangular region:</p>

<blockquote><pre class="code">The 6th edition of &lt;citetitle&gt;Learning the vi Editor&lt;/citetitle&gt;
brings the <em class="emphasis">book into the late 19</em>90&amp;rsquo;s.
In particul<em class="emphasis">ar, besides the &amp;ldqu</em>o;original&amp;rdquo; version of
&lt;command&gt;vi<em class="emphasis">&lt;/command&gt; that comes</em> as a standard part of every UNIX
system, the<em class="emphasis">re are now a number o</em>f freely available &amp;ldquo;clones&amp;rdquo;
or work-alike editors.</pre></blockquote>

<p>After applying the <tt class="literal">~</tt> operator,
the screen looks like this:</p>

<?troff-ps-indent 0?><blockquote><pre class="code">The 6th edition of &lt;citetitle&gt;Learning the vi Editor&lt;/citetitle&gt;
brings the BOOK INTO THE LATE 1990&amp;rsquo;s.
In particulAR, BESIDES THE &amp;LDQUo;original&amp;rdquo; version of
&lt;command&gt;vi&lt;/COMMAND&gt; THAT COMES as a standard part of every UNIX system,
there are nOW A NUMBER OF FREELY available &amp;ldquo;clones&amp;rdquo;
or work-alike editors.</pre></blockquote>

<?troff-ps-indent .25i?><p><em class="emphasis">vim</em> permits many operations on the selected text.
Some operations work only on whole lines,
even if you've selected a region that does not contain whole
lines.</p>

<p><em class="emphasis">vim</em> has special commands for
increasing the "swept out" area, and it
allows you to apply almost
any <em class="emphasis">vi</em> mode command to the highlighted text, as
well as some commands that are unique to visual mode.</p>

<p>When defining the area to be operated on, a number of commands
make it easy to treat words, sentences, or blocks of C/C++ code
as single objects.
These are described in
<a href="ch11_08.htm#vi6-ch-11-tab-10">Table 11.10</a>.
These commands can be used by themselves to extend the region,
or they can be used in conjunction with an operator.
For example, <tt class="literal">daB</tt> deletes a brace-enclosed
block of text, including the braces.</p>

<a name="vi6-ch-11-tab-10" /><h4 class="objtitle">Table 11.10. vim Block Mode Object Selectors</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Selects</th>
</tr>




<tr>
<td><tt class="literal">aw</tt></td>
<td><p>A word (with whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">iw</tt></td>
<td><p>An inner word
(without whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">aW</tt></td>
<td><p>A WORD (with whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">iW</tt></td>
<td><p>An inner WORD
(without whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">as</tt></td>
<td><p>A sentence (with whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">is</tt></td>
<td><p>An inner sentence
(without whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">ap</tt></td>
<td><p>A paragraph (with whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">ip</tt></td>
<td><p>An inner paragraph
(without whitespace)</p></td>
</tr>

<tr>
<td><tt class="literal">ab</tt></td>
<td><p>A <tt class="literal">(...)</tt>
block (includes parentheses)</p></td>
</tr>

<tr>
<td><tt class="literal">ib</tt></td>
<td><p>An inner <tt class="literal">(...)</tt>
block (not including the parentheses)</p></td>
</tr>

<tr>
<td><tt class="literal">aB</tt></td>
<td><p>A <tt class="literal">{...}</tt> block
(includes braces)</p></td>
</tr>

<tr>
<td><tt class="literal">iB</tt></td>
<td><p>An inner <tt class="literal">{...}</tt> block
(not including the braces)</p></td>
</tr>


</table><p><p>

<p>The terms "word" and "WORD" have the
same meaning as for the <tt class="literal">w</tt> and <tt class="literal">W</tt>
motion commands.</p>

<p><em class="emphasis">vim</em> allows you to use many operators on
highlighted text. The available operators are summarized in
<a href="ch11_08.htm#vi6-ch-11-tab-11">Table 11.11</a>.</p>

<a name="vi6-ch-11-tab-11" /><h4 class="objtitle">Table 11.11. vim Block Mode Operations</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Operation</th>
</tr>




<tr>
<td><tt class="literal">~</tt></td>
<td><p>Flip the case of the
selected text.</p></td>
</tr>

<tr>
<td><tt class="literal">o</tt>, <tt class="literal">O</tt></td>
<td><p>Move to the other end of the
highlighted text. <tt class="literal">o</tt> moves from
the start of the highlighted area to end, and vice versa.
<tt class="literal">O</tt> in block mode moves to the other end of the
text on the current line. You can continue sweeping out the
area from the new position.</p></td>
</tr>

<tr>
<td><tt class="literal">&lt;</tt>, <tt class="literal">&gt;</tt>, <tt class="literal">!</tt></td>
<td><p>Shift text left or right, filter
text.
These operate on the whole lines
containing the marked region.
In the future, for a block, only the block
will be shifted.</p></td>
</tr>

<tr>
<td><tt class="literal">=</tt></td>
<td><p>Filters text through the program
named by the <tt class="literal">equalprg</tt> option. (Typically a simple text
formatter such as <em class="emphasis">fmt</em>.)
This operates on the whole lines
containing the marked region.</p></td>
</tr>

<tr>
<td><tt class="literal">gq</tt></td>
<td><p>Formats the lines containing the
marked region to be no longer that what's set in
<tt class="literal">textwidth</tt>.
This operates on the whole lines
containing the marked region.</p></td>
</tr>

<tr>
<td><tt class="literal">:</tt></td>
<td><p>Start an <em class="emphasis">ex</em> command
for the highlighted lines. This operates on the whole lines
containing the marked region.</p></td>
</tr>

<tr>
<td><tt class="literal">c</tt>, <tt class="literal">d</tt>, <tt class="literal">y</tt></td>
<td><p>Change, delete, or yank text.
These work even on rectangular text, although the <tt class="literal">c</tt>
command only enters text on the first line in the block.</p></td>
</tr>

<tr>
<td><tt class="literal">c</tt>, <tt class="literal">r</tt>, <tt class="literal">s</tt></td>
<td><p>Change the highlighted text.</p></td>
</tr>

<tr>
<td><tt class="literal">C</tt>, <tt class="literal">S</tt>, <tt class="literal">R</tt></td>
<td><p>If using <span class="keycap">CTRL-V</span>,
the rectangle is deleted and insert mode is entered in the first line.
Otherwise, whole lines are replaced.</p></td>
</tr>

<tr>
<td><tt class="literal">x</tt></td>
<td><p>Delete the highlighted text.</p></td>
</tr>

<tr>
<td><tt class="literal">X</tt>, <tt class="literal">Y</tt></td>
<td><p>Delete or yank the whole
lines containing the highlighted area.</p></td>
</tr>

<tr>
<td><tt class="literal">D</tt></td>
<td><p>Delete to the end of the line.
When using <span class="keycap">CTRL-V</span>, the highlighted block
and the rest of the text to end of each line is deleted.
If not using <span class="keycap">CTRL-V</span>,
the whole line is deleted.</p></td>
</tr>

<tr>
<td><tt class="literal">J</tt></td>
<td><p>Join the highlighted lines.
This operates on the whole lines
containing the marked region.</p></td>
</tr>

<tr>
<td><tt class="literal">U</tt></td>
<td><p>Make uppercase.
This command is unique to visual mode.</p></td>
</tr>

<tr>
<td><tt class="literal">u</tt></td>
<td><p>Make lowercase.
This command is unique to visual mode.</p></td>
</tr>

<tr>
<td><tt class="literal">^]</tt></td>
<td><p>Use the highlighted text as
the tag to find in a tag search.</p></td>
</tr>


</table><p><p>
</div>




<a name="IXT-11-281835" />
<a name="IXT-11-281836" />
<a name="IXT-11-281837" />


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_07.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch11_09.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.7. Extended Regular Expressions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">11.9. Programming Assistance</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>
