<html><head><title>Enhanced Tags (Learning the vi Editor, Sixth Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Linda Lamb and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-426-6" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the vi Editor, Sixth Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning the vi Editor" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">8.5. Enhanced Tags</h2>

<p>
<a name="ch08.ctags1" />
<a name="ch08.ctags2" />
<a name="ch08.ctags3" />
<a name="ch08.ctags4" />
<a name="ch08.ctags5" />
<a name="ch08.ctags6" />
<a name="ch08.ctags7" />
The "Exuberant <em class="emphasis">ctags</em>" program
is a <em class="emphasis">ctags</em> clone that is considerably more capable
than UNIX <em class="emphasis">ctags</em>.
It produces an
extended <em class="filename">tags</em> file format that makes tag
searching and matching a more flexible and capable process.
We describe it first, since it is
supported by several of the <em class="emphasis">vi</em> clones.</p>

<p>This section also describes tag stacks:
the ability to save multiple
locations visited with the <tt class="literal">:tag</tt> or
<tt class="literal">^]</tt> commands.
All of the clones provide tag stacking.</p>

<a name="vi6-ch-8-sect-5.1" /><div class="sect2">
<h3 class="sect2">8.5.1. Exuberant ctags</h3>

<p>
<?troff .lphyph?>The "Exuberant <em class="emphasis">ctags</em>"
program was written
<a name="IXT-8-281164" />
by Darren Hiebert. Its home page is
http://home.hiwaay.net/~darren/ctags/.
As of this writing, the current version is 2.0.3.
The following list of the program's features is
adapted from the <em class="filename">README</em>
file in the <em class="emphasis">ctags</em> distribution:</p>

<ul><li><p>It is capable of generating tags for <em class="emphasis">all</em> types
of C and C++ language tags, including class names,
macro definitions,
enum names,
enumerators (values inside an enumeration),
function (method) definitions,
function (method) prototypes/declarations,
structure members and class data members,
struct names,
typedefs,
union names and
variables.</p></li><li><p>It supports both C and C++ code.</p></li><li><p>It is very robust in parsing code and is far less easily fooled by code
containing <tt class="literal">#if</tt> preprocessor conditional constructs.</p></li><li><p>It can be used to print out a human-readable list of selected objects
found in source files.</p></li><li><p>It supports generation of GNU <em class="emphasis">emacs</em>-style
tag files (<em class="filename">etags</em>).</p></li><li><p>It works on
UNIX, QNX, MS-DOS, Windows 95/NT, OS/2, and the Amiga.
Some precompiled binaries are available on the web site.</p></li></ul><p>Exuberant <em class="emphasis">ctags</em> produces <em class="filename">tags</em>
files in the form described in the next subsection.</p>
</div>




<a name="vi6-ch-8-sect-5.1.2" /><div class="sect2">
<h3 class="sect2">8.5.2. The New tags Format</h3>

<p>
<a name="ch08.tags" />
Traditionally, a <em class="filename">tags</em> file has three tab-separated
fields: the tag name (typically an identifier), the source file
containing the tag, and an indication of where to find the identifier.
This indication is either a simple line number, or
a <tt class="literal">nomagic</tt> search
pattern enclosed either in slashes or question marks.
Furthermore, the <em class="filename">tags</em> file is always sorted.</p>

<p>This is the format generated by the UNIX <em class="emphasis">ctags</em> program.
In fact, many versions of <em class="emphasis">vi</em> allowed <em class="emphasis">any</em>
command in the search pattern field (a rather gaping security hole).
Furthermore, due to an undocumented implementation quirk,
if the line ended with a semicolon and then a double-quote
(<tt class="literal">;"</tt>), anything following those two
characters would be ignored.
(The double-quote starts a comment, as it does in <em class="filename">.exrc</em>
files.)</p>

<p>The new format is backwards-compatible with the traditional one.
The first three fields are the same: tag, filename, and search pattern.
Exuberant <em class="emphasis">ctags</em> only generates search patterns, not
arbitrary commands. Extended attributes are placed after a
separating <tt class="literal">;"</tt>.
Each attribute is separated from the next by a tab character,
and consists of two colon-separated subfields.
The first subfield is a keyword describing the attribute, the
second is the actual value.
<a href="ch08_05.htm#vi6-ch-8-tab-2">Table 8.2</a>
lists the supported keywords.</p>

<a name="vi6-ch-8-tab-2" /><h4 class="objtitle">Table 8.2. Extended ctags Keywords</h4><table border="1" cellpadding="3">

<tr>
<th>Keyword</th>
<th>Meaning</th>
</tr>




<tr>
<td>kind</td>
<td><p>The value is a single
letter that indicates the lexical type of
the tag.
<a name="IXT-8-281165" />
It can be <tt class="literal">f</tt> for a function,
<tt class="literal">v</tt> for a variable, and so on.
Since the default attribute name is <tt class="literal">kind</tt>, a solitary
letter can denote the tag's type
(e.g., <tt class="literal">f</tt> for a function).</p></td>
</tr>

<tr>
<td>file</td>
<td><p>For tags that
<a name="IXT-8-281166" />
are "static", i.e., local to the file.
The value should be the name of the file.</p>

<p>If the value is
given as an empty string (just <tt class="literal">file:</tt>),
it is understood to be the same as the filename field; this special
case was added partly for the sake of compactness, and partly to
provide an easy way to handle tags files that aren't in the current
directory. The value of the filename field is always relative to the
directory in which the <em class="filename">tags</em> file
itself resides.</p></td>
</tr>

<tr>
<td>function</td>
<td><p>For local tags.
<a name="IXT-8-281167" />
The value is the name of function in
which they're defined.</p></td>
</tr>

<tr>
<td>struct</td>
<td><p>For fields in a <tt class="literal">struct</tt>.
The value is the name of the structure.
<a name="IXT-8-281168" /></p></td>
</tr>

<tr>
<td>enum</td>
<td><p>For values in an <tt class="literal">enum</tt>
data type.
<a name="IXT-8-281169" />
The value is the name of
the <tt class="literal">enum</tt> type.</p></td>
</tr>

<tr>
<td>class</td>
<td><p>For C++ member functions and variables.
<a name="IXT-8-281170" />
The value is the name of the class.</p></td>
</tr>

<tr>
<td>scope</td>
<td><p>Intended mostly for
<a name="IXT-8-281171" />
C++ class member functions. It will usually be
<tt class="literal">private</tt> for private members
or omitted for public members, so
users can restrict tag searches to only public members.</p></td>
</tr>

<tr>
<td>arity</td>
<td><p>For functions.
<a name="IXT-8-281172" />
The number of arguments.</p></td>
</tr>


</table><p><p>

<p>If the field does not contain a colon, it is assumed to be of
type <tt class="literal">kind</tt>.
Here are some examples:</p>

<blockquote><pre class="code">ARRAYMAXED      awk.h    427;"   d
AVG_CHAIN_MAX   array.c   38;"   d     file:
array.c         array.c    1;"   F</pre></blockquote>

<p><tt class="literal">ARRAYMAXED</tt> is a C <tt class="literal">#define</tt> macro
defined in <em class="filename">awk.h</em>. <tt class="literal">AVG_CHAIN_MAX</tt>
is also a C macro but it is used only in <em class="filename">array.c</em>.
The third line is a bit different: it is a tag for the actual source file!
This is generated with the <tt class="literal">-i F</tt> option to Exuberant
<em class="emphasis">ctags</em>, and allows you to give the command
<tt class="literal">:tag array.c</tt>.  More usefully, you can put the
cursor over a filename and use the <tt class="literal">^]</tt>
command to go to that file.</p>

<p>Within the value part of each attribute, the characters
backslash, tab, carriage return and newline should be
encoded as <tt class="literal">\\</tt>, <tt class="literal">\t</tt>,
<tt class="literal">\r</tt>, and <tt class="literal">\n</tt>, respectively.</p>

<p>Extended <em class="filename">tags</em> files may have some number of initial
tags that begin with <tt class="literal">!_TAG_</tt>.
These tags usually sort to the
front of the file, and are useful for identifying which program
created the file.
Here is what Exuberant <em class="emphasis">ctags</em> generates:</p>


<blockquote><pre class="code">!_TAG_FILE_FORMAT      2                /extended format; ..../
!_TAG_FILE_SORTED      1                /0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR   Darren Hiebert   /darren@hiebert.com/
!_TAG_PROGRAM_NAME     Exuberant Ctags  //
!_TAG_PROGRAM_URL      http://home.hiwaay.net/~darren/ctags   /.../
!_TAG_PROGRAM_VERSION  2.0.3            /with C++ support/</pre></blockquote>

<?troff .wcon_off?><p>Editors may take advantage of these special tags to implement
special features. For example, <em class="emphasis">vim</em> pays attention
to the <tt class="literal">!_TAG_FILE_SORTED</tt> tag and will use a
binary search to search the <em class="filename">tags</em> file
instead of a linear search if the file is indeed sorted.</p>

<p>If you use <em class="filename">tags</em> files,
we recommend that you get and install Exuberant <em class="emphasis">ctags</em>.</p>

<a name="IXT-8-281173" />
</div>




<a name="vi6-ch-8-sect-5.2" /><div class="sect2">
<h3 class="sect2">8.5.3. Tag Stacks</h3>

<p>
<a name="ch08.stack1" />
<a name="ch08.stack2" />
<a name="ch08.stack3" />
<a name="ch08.stack4" />
<a name="ch08.stack5" />
The <tt class="literal">:tag</tt> <em class="emphasis">ex</em> command and the <tt class="literal">^]</tt>
<em class="emphasis">vi</em> mode command provide a limited means of
finding identifiers, based on the information provided in a
<em class="filename">tags</em> file.
Each of the clones extends this ability by maintaining a
<em class="emphasis">stack</em> of tag locations.
Each time you issue the <tt class="literal">:tag</tt> <em class="emphasis">ex</em>
command, or use the <tt class="literal">^]</tt> <em class="emphasis">vi</em> mode
command, the editor saves the current location before searching
for the specified tag. You may then return to a saved location
using (usually) the <tt class="literal">^T</tt> command or an
<em class="emphasis">ex</em> command.</p>

<p>Solaris <em class="emphasis">vi</em> tag stacking and an example
are presented below.
The way each clone handles tag stacking is described in
each editor's respective chapter.</p>

<a name="vi6-ch-8-sect-5.2.1" /><div class="sect3">
<h3 class="sect3">8.5.3.1. Solaris vi</h3>

<p>
<a name="ch08.stack6a" />
<a name="ch08.stack6b" />
<a name="ch08.stack6c" />
<a name="ch08.stack6d" />
Surprisingly enough, the Solaris 2.6 version of <em class="emphasis">vi</em>
supports tag stacking. Perhaps not so surprisingly, this
feature is completely undocumented


in the Solaris
<em class="emphasis">ex</em>(1) and <em class="emphasis">vi</em>(1)
manual pages.
For completeness, we summarize Solaris <em class="emphasis">vi</em> tag
stacking in <a href="ch08_05.htm#vi6-ch-8-tab-3">Table 8.3</a>, <a href="ch08_05.htm#vi6-ch-8-tab-4">Table 8.4</a>, 
and <a href="ch08_05.htm#vi6-ch-8-tab-5">Table 8.5</a>. Tag stacking in Solaris
<em class="emphasis">vi</em> is quite simple.<a href="#FOOTNOTE-43">[43]</a></p><blockquote class="footnote">

<a name="FOOTNOTE-43" /><p> [43]This information
was discovered based on experimentation. YMMV (your mileage may vary).</p>

</blockquote>

<?troff .sp -.25?><a name="vi6-ch-8-tab-3" /><h4 class="objtitle">Table 8.3. Solaris vi Tag Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">ta</tt>[<tt class="literal">g</tt>][<tt class="literal">!</tt>] <em class="replaceable"><tt>tagstring</tt></em></td>
<td><p>Edit the file containing
<a name="IXT-8-281174" />
<em class="emphasis">tagstring</em> as defined in the <em class="filename">tags</em>
file. The <tt class="literal">!</tt> forces <em class="emphasis">vi</em> to
switch to the new file if the current buffer has been modified
but not saved.</p></td>
</tr>

<tr>
<td><tt class="literal">po</tt>[<tt class="literal">p</tt>][<tt class="literal">!</tt>]</td>
<td><p>Pop the tag stack
<a name="IXT-8-281175" />
by one element.</p></td>
</tr>


</table><p><p><p>

<?troff .sp -.25?><a name="vi6-ch-8-tab-4" /><h4 class="objtitle">Table 8.4. Solaris vi Command Mode Tag Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">^]</tt></td>
<td><p>Look up the location of the identifier
under the cursor in the <em class="filename">tags</em> file, and move to that
location. If tag stacking is enabled,
the current location is automatically pushed onto the
tag stack.</p></td>
</tr>

<tr>
<td><tt class="literal">^T</tt></td>
<td><p>Return to the previous location
<a name="IXT-8-281176" />
in the tag stack, i.e., pop off one element.</p></td>
</tr>


</table><p><p><p>

<?troff .sp -.25?><a name="vi6-ch-8-tab-5" /><h4 class="objtitle">Table 8.5. Solaris vi Options for Tag Management</h4><table border="1" cellpadding="3">

<tr>
<th>Option</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">taglength</tt>, <tt class="literal">tl</tt></td>
<td><p>Controls the number of
<a name="IXT-8-281177" />
<a name="IXT-8-281178" />
significant characters in a tag
that is to be looked up. The default value of zero indicates that all
characters are significant.</p></td>
</tr>

<tr>
<td><tt class="literal">tags</tt>, <tt class="literal">tagpath</tt></td>
<td><p>The value is a list of
<a name="IXT-8-281179" />
<a name="IXT-8-281180" />
filenames in which to look for tags.
The default value is <tt class="literal">"tags /usr/lib/tags"</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">tagstack</tt></td>
<td><p>When set to true,
<a name="IXT-8-281181" />
<em class="emphasis">vi</em> stacks each location on the tag stack.
Use <tt class="literal">:set notagstack</tt> to disable tag stacking.</p></td>
</tr>


</table><p><p><p>

<p>To give you a feel for using tag stacks, we present a short
example, using Exuberant <em class="emphasis">ctags</em> and <em class="emphasis">vim</em>.</p>

<p>Suppose you are working with a program that uses the GNU
<em class="emphasis">getopt_long</em> function, and that you need
to understand more about it.</p>

<p>GNU <em class="emphasis">getopt</em> consists of three files,
<em class="filename">getopt.h</em>, <em class="filename">getopt.c</em>,
and <em class="filename">getopt1.c</em>.</p>

<p>First, you create the <em class="filename">tags</em> file, then
you start by editing the main program, found in <em class="filename">main.c</em>:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>ctags *.[ch]</b></tt>
$ <tt class="userinput"><b>ls</b></tt>
Makefile   getopt.c   getopt.h   getopt1.c   main.c   tags
$ <tt class="userinput"><b>vim main.c</b></tt></pre></blockquote>

<table border="1" cellpadding="3">

<tr>
<th>Keystrokes</th>
<th>Results</th>
</tr>




<tr>
<td><tt class="literal">/getopt</tt></td>
<?graphic_args "" "" 1.19 -.35?><td><img src="figs/vi.0801.gif" alt="Figure " width="334" /><p>
<?troff .sp -1v?>Edit <em class="filename">main.c</em> and move to the call to
<em class="emphasis">getopt_long</em>.</p></td>
</tr>

<?troff .sp .5v?><tr>
<td><tt class="literal">^]</tt></td>
<?graphic_args "" "" 1.19 -.35?><td><img src="figs/vi.0802.gif" alt="Figure " width="334" /><p>
<?troff .sp -1v?>Do a tag lookup on <em class="emphasis">getopt_long</em>.
<em class="emphasis">vim</em> moves to <em class="filename">getopt1.c</em>,
placing the cursor on the definition of <em class="filename">getopt_long</em>.
<?troff .sp .5v?></p></td>
</tr>


</table><p><p><p>It turns out that <em class="emphasis">getopt_long</em>
is a "wrapper" function for
<em class="emphasis">_getopt_internal</em>.  You place the
cursor on <em class="emphasis">_getopt_internal</em> and do another tag search.</p>

<table border="1" cellpadding="3">

<tr>
<th>Keystrokes</th>
<th>Results</th>
</tr>




<tr>
<td><tt class="literal">8jf_ ^]</tt></td>
<?graphic_args "" "" 1.19 -.35?><td><img src="figs/vi.0803.gif" alt="Figure " width="334" /><p>
<?troff .sp -1v?>You have now moved to <em class="filename">getopt.c</em>. To find out
more about <tt class="literal">struct option</tt>, move the cursor
to <em class="emphasis">option</em> and do another tag search.</p></td>
</tr>

<?troff .sp .5v?><tr>
<td><tt class="literal">5jfo; ^]</tt></td>
<?graphic_args "" "" 1.19 -.35?><td><img src="figs/vi.0804.gif" alt="Figure " width="384" /><p>
<?troff .sp -1v?>The editor moves to the definition of <tt class="literal">struct
<a name="IXT-8-281182" />
option</tt> in <em class="emphasis">getopt.h</em>. You may now look
over the comments explaining how it's used.</p></td>
</tr>

<?troff .sp .5v?><tr>
<td><tt class="literal">:tags</tt></td>
<?graphic_args "" "" 1.19 -.35?><td><img src="figs/vi.0805.gif" alt="Figure " width="334" /><p>
<?troff .sp -1v?>The <tt class="literal">:tags</tt> command in <em class="emphasis">vim</em>
displays the tag stack.</p></td>
</tr>


</table><p><p><p>Typing <tt class="literal">^T</tt> three times would move you back to
<em class="filename">main.c</em>, where you started. The tag facilities
make it easy to move around as you edit source code.</p>

<a name="IXT-8-281183" />
<a name="IXT-8-281184" />
<a name="IXT-8-281185" />
<a name="IXT-8-281186" />
</div>


<a name="IXT-8-281187" />
<a name="IXT-8-281188" />
<a name="IXT-8-281189" />
<a name="IXT-8-281190" />
<a name="IXT-8-281191" />
</div>




<a name="IXT-8-281192" />
<a name="IXT-8-281193" />
<a name="IXT-8-281194" />
<a name="IXT-8-281195" />
<a name="IXT-8-281196" />
<a name="IXT-8-281197" />
<a name="IXT-8-281198" />


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch08_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">8.4. Extended Regular Expressions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.6. Improved Facilities</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>
