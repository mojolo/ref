<html><head><title>Interesting Features (Learning the vi Editor, Sixth Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Linda Lamb and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-426-6" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the vi Editor, Sixth Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning the vi Editor" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch11_11.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">11.10. Interesting Features</h2>

<p>
<a name="ch11.interesting" />
<em class="emphasis">vim</em> is a <em class="emphasis">very</em> featureful
editor. We cannot describe everything in full detail here.
Instead, we've chosen to discuss several of the most
important and unique features that it has.</p>

<dl>
<dt><i>Automatic file type detection</i></dt><dd>
<a name="IXT-11-281864" />
<a name="IXT-11-281865" />
<a name="IXT-11-281866" />
<em class="emphasis">vim</em></tt> will notice how the lines of a text file end.
It sets the <tt class="literal">fileformat</tt> variable to
one of <tt class="literal">dos</tt> (CR-LF),
<tt class="literal">unix</tt> (LF), or
<tt class="literal">mac</tt> (CR) to indicate the file's current mode.
By default, <em class="emphasis">vim</em></tt> will write the file back out in
the same format, but if you change the value of <tt class="literal">fileformat</tt>,
<em class="emphasis">vim</em></tt> will use that convention.
This is an easy way to convert between Linux (or UNIX) and MS-DOS files,
and makes editing DOS files under UNIX or Linux very easy.
(In contrast, the other clones all display a <tt class="literal">^M</tt>
at the end of each line.)</p></dd>


<dt><i>vim is "charityware"</i></dt><dd>The licensing terms are described later in this chapter; they
are fairly liberal.
However, the author encourages users who like <em class="emphasis">vim</em> to
send a donation to a children's center in Uganda.</p></dd>


<dt><i>Significant C programming extensions</i></dt><dd><em class="emphasis">vim</em></tt> has a large set of features for working
with C and C++ programs.</p></dd>


<dt><i>The "auto command" facility</i></dt><dd><em class="emphasis">vim</em></tt> defines a large number of events, such
as before or after reading a file, entering or leaving a window,
and so on. For each event, you can set up an "auto command,"
i.e., a command to be executed when that event occurs.</p></dd>

</dl>

<a name="vi6-ch-11-sect-10.1" /><div class="sect2">
<h3 class="sect2">11.10.1. vim Is Charityware</h3>

<p>
<a name="IXT-11-281867" />
<a name="IXT-11-281868" />
With <em class="emphasis">vim</em>, Bram Moolenaar has taken a different
approach from the usual shareware or freeware author.
If you use <em class="emphasis">vim</em> and you like it, Mr. Moolenaar
requests that you send a donation to help orphans in Uganda.
We applaud his efforts.</p>

<p>
<a name="IXT-11-281869" />
Mr. Moolenaar spent a year as a volunteer at
Kibaale Children's Centre (KCC), located in Kibaale, a small town in the
south of Uganda, near Tanzania.
The KCC works to provide food, medical care, and education for children
in this area, which is suffering from AIDS more than in any other part
of the world.
Because of the high incidence of AIDS, many of the children are orphans.</p>

<p>In order to continue supporting KCC, Mr. Moolenaar is trying to
raise funds and organize sponsorship.
You can find a much longer explanation in the file
<em class="filename">uganda.txt</em> in the <em class="emphasis">vim</em> distribution.
This includes directions for sending donations.
You can also look at
<a href="http://www.vim.org/iccf/">http://www.vim.org/iccf/</a>
.</p>
</div>




<a name="vi6-ch-11-sect-10.2" /><div class="sect2">
<h3 class="sect2">11.10.2. C and C++ Programming Features</h3>

<p>
<a name="ch11.cfeature1" />
<a name="ch11.cfeature2" />
<em class="emphasis">vim</em>, in the grand tradition of <em class="emphasis">vi</em>,
is first and foremost a programmer's editor. In particular,
it is a C programmer's editor, and happily, C++ programmers
can take advantage of it too. There are <em class="emphasis">lots</em>
of features that make the C programmer's life easier.
We describe the most significant ones here.</p>

<a name="vi6-ch-11-sect-10.2.1" /><div class="sect3">
<h3 class="sect3">11.10.2.1. Smart indenting</h3>

<p>
<a name="IXT-11-281870" />
<a name="IXT-11-281871" />
All versions of <em class="emphasis">vi</em> have the <tt class="literal">autoindent</tt>
option, which, when set, automatically indents the current line by the
same amount as the one next to it. This is handy for C programmers
who indent their code, and for anyone else who may need to indicate
some kind of structure in their text via indentation.</p>

<p>
<a name="IXT-11-281872" />
<a name="IXT-11-281873" />
<em class="emphasis">vim</em> carries this feature further, with two
options, <tt class="literal">smartindent</tt> and <tt class="literal">cindent</tt>.
The <tt class="literal">cindent</tt> option is the more interesting of the
two, and is the topic of this subsection. See <a href="ch11_10.htm#vi6-ch-11-tab-14">Table 11.14</a> for a list of <em class="emphasis">vim</em> indentation and formatting options.</p>

<a name="vi6-ch-11-tab-14" /><h4 class="objtitle">Table 11.14. vim Indentation and Formatting Options</h4><table border="1" cellpadding="3">

<tr>
<th>Option</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">autoindent</tt></td>
<td><p>Simple-minded indentation,
<a name="IXT-11-281874" />
uses that of the previous line.</p></td>
</tr>

<tr>
<td><tt class="literal">smartindent</tt></td>
<td><p>Similar to <tt class="literal">autoindent</tt>,
but knows a little about C syntax. Deprecated in favor
of <tt class="literal">cindent</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">cindent</tt></td>
<td><p>Enables automatic indenting
for C programs, and is quite smart. C formatting is affected
by the rest of the options in this table.</p></td>
</tr>

<tr>
<td><tt class="literal">cinkeys</tt></td>
<td><p>Input keys that trigger
<a name="IXT-11-281875" />
indentation options.</p></td>
</tr>

<tr>
<td><tt class="literal">cinoptions</tt></td>
<td><p>Allows you to tailor your
<a name="IXT-11-281876" />
preferred indentation style.</p></td>
</tr>

<tr>
<td><tt class="literal">cinwords</tt></td>
<td><p>Keywords that start an
<a name="IXT-11-281877" />
extra indentation on the following line.</p></td>
</tr>

<tr>
<td><tt class="literal">formatoptions</tt></td>
<td><p>Made up of a number of
single letter flags that control several behaviors,
<a name="IXT-11-281878" />
notably how comments are formatted as you type them.</p></td>
</tr>

<tr>
<td><tt class="literal">comments</tt></td>
<td><p>Describes different formatting
options for different kinds of comments, both those with
<a name="IXT-11-281879" />
starting and ending delimiters, as in C, and those that start
with a single symbol and go to the end of the line, such as
in a <em class="filename">Makefile</em> or shell program.</p></td>
</tr>


</table><p><p>

<p>When set up appropriately, <em class="emphasis">vim</em> automatically
rearranges the indentation of your C program as you type.
For instance, after an <tt class="literal">if</tt>, <em class="emphasis">vim</em>
automatically indents the next line. If the body of the
<tt class="literal">if</tt> is enclosed in braces, when you type
the right brace, <em class="emphasis">vim</em> will automatically
indent it back one tab stop, to line up underneath the
<tt class="literal">if</tt>.
As another example, with the settings shown below,
upon typing the colon that goes with a <tt class="literal">case</tt>,
<em class="emphasis">vim</em> will shift the line with the <tt class="literal">case</tt>
left one tab stop to line up under the <tt class="literal">switch</tt>.</p>

<p>The following <em class="filename">.vimrc</em> produces, in our
opinion, very nicely formatted C code:</p>

<blockquote><pre class="code">set nocp incsearch
set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set cindent
syntax on
source ~/.exrc</pre></blockquote>

<p>
<a name="IXT-11-281880" />
<a name="IXT-11-281881" />
The <tt class="literal">nocp</tt> option turns off strict <em class="emphasis">vi</em>
compatibility. The <tt class="literal">incsearch</tt> option turns on
incremental searching. The settings for <tt class="literal">cinoptions</tt>,
<tt class="literal">cinwords</tt>, and <tt class="literal">formatoptions</tt>
differ from the defaults; the result is to produce a
fairly strict "K&amp;R" C formatting style.
Finally, syntax coloring is turned on, and then the rest
of the <em class="emphasis">vi</em> options are read in from
the user's <em class="filename">.exrc</em> file.</p>

<p>We recommend that you start up <em class="emphasis">vim</em>, set
these options as shown, and then spend some time working on a
C or C++ program.
Five minutes of playing 
with this facility will give you a better feel for it than
whatever static examples we could present on the printed page.
We think you'll find the facility really
enjoyable to use.</p>
</div>


<a name="vi6-ch-11-sect-10.2.2" /><div class="sect3">
<h3 class="sect3">11.10.2.2. Include file searching</h3>

<p>
<a name="IXT-11-281882" />
<a name="IXT-11-281883" />
Often, when working with large C programs, it is helpful to be able
to see where a particular type name, function, variable or
macro is defined. The tag facility can help with this, but doing a
tag lookup actually moves you to the found location, which may be
more than you need.</p>

<p><em class="emphasis">vim</em> has a number of commands that
search through the current file <em class="emphasis">and</em>
through included files
to find other occurrences of
a keyword. We summarize them here.</p>

<p>The <em class="emphasis">vi</em> and <em class="emphasis">ex</em> commands
fall into four categories: those that display the first occurrence
of a particular object (in the status line), those that display
all occurrences of a particular object, those that jump to the
location of the first occurrence, and those that open a new window
and jump to the first occurrence.
Commands that do all four exist to look for keywords, 
usually the identifier under the cursor, and to look for macro
definitions of the identifier under the cursor.
</p>

<p>These commands use the smart syntax facilities (the
<tt class="literal">comments</tt> variable described earlier)
to ignore occurrences of the searched-for identifier
inside comments.
With a preceding count,
they go to the <tt class="literal">count</tt> th occurrence.
The search for the identifier starts at the beginning of the file,
unless otherwise noted.</p>

<p>See <a href="ch11_10.htm#vi6-ch-11-tab-15">Table 11.15</a> for 
a list of the <em class="emphasis">vim</em> identifier searching commands.</p>

<a name="vi6-ch-11-tab-15" /><h4 class="objtitle">Table 11.15. vim Identifier Search Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">[i</tt></td>
<td><p>Display the first line that contains
the keyword under the cursor.
<a name="IXT-11-281884" />
<a name="IXT-11-281885" />
<a name="IXT-11-281886" /></p></td>
</tr>

<tr>
<td><tt class="literal">]i</tt></td>
<td><p>Display the first line that contains
the keyword under the cursor, but start the search at
the current position in the file.
This command is most effective when given a count.</p></td>
</tr>

<tr>
<td><tt class="literal">[I</tt></td>
<td><p>Display all lines that contain the
<a name="IXT-11-281887" />
<a name="IXT-11-281888" />
<a name="IXT-11-281889" />
keyword under the cursor. Filenames and line
numbers are displayed.</p></td>
</tr>

<tr>
<td><tt class="literal">]I</tt></td>
<td><p>Display all lines that contain the
keyword under the cursor, but start from the current
position in the file.</p></td>
</tr>

<tr>
<td><tt class="literal">[ ^I</tt></td>
<td><p>Jump to the first occurrence of the
keyword under the cursor.
<a name="IXT-11-281890" />
<a name="IXT-11-281891" />
<a name="IXT-11-281892" />
(Note that <tt class="literal">^I</tt> is a TAB.)</p></td>
</tr>

<tr>
<td><tt class="literal">] ^I</tt></td>
<td><p>Jump to the first occurrence of the
keyword under the cursor, but start the search
from the current position.</p></td>
</tr>


<tr>
<td><tt class="literal">^W i</tt></td>
<td rowspan="1"><p>Open a new window showing the
<a name="IXT-11-281893" />
location of the first (or <em class="emphasis">count</em>th)
occurrence of the identifier under the cursor.</p></td>
</tr>

<tr>
<td><tt class="literal">^W ^I</tt></td>
</tr>


<tr>
<td><tt class="literal">[d</tt></td>
<td><p>Display the first macro definition for
<a name="IXT-11-281894" />
<a name="IXT-11-281895" />
<a name="IXT-11-281896" />
the identifier under the cursor.</p></td>
</tr>

<tr>
<td><tt class="literal">]d</tt></td>
<td><p>Display the first macro definition for
the identifier under the cursor, but start the search
from the current position.</p></td>
</tr>

<tr>
<td><tt class="literal">[D</tt></td>
<td><p>Display all macro definitions for the
<a name="IXT-11-281897" />
<a name="IXT-11-281898" />
<a name="IXT-11-281899" />
identifier under the cursor. Filenames and
line numbers are displayed.</p></td>
</tr>

<tr>
<td><tt class="literal">]D</tt></td>
<td><p>Display all macro definitions for the
identifier under the cursor, but start the search
from the current position.</p></td>
</tr>

<tr>
<td><tt class="literal">[ ^D</tt></td>
<td><p>Jump to the first macro definition for the
identifier under the cursor.
<a name="IXT-11-281900" />
<a name="IXT-11-281901" />
<a name="IXT-11-281902" /></p></td>
</tr>

<tr>
<td><tt class="literal">] ^D</tt></td>
<td><p>Jump to the first macro definition for the
identifier under the cursor, but start the search
from the current position.</p></td>
</tr>


<tr>
<td><tt class="literal">^W d</tt></td>
<td rowspan="1"><p>Open a new window showing the
location of the first (or <em class="emphasis">count</em>th)
macro definition of the identifier under the cursor.</p></td>
</tr>

<tr>
<td><tt class="literal">^W ^D</tt></td>
</tr>



</table><p><p>

<p>
<a name="IXT-11-281903" />
<a name="IXT-11-281904" />
Two options, <tt class="literal">define</tt> and <tt class="literal">include</tt>,
describe the source code lines that define macros and include
source files. They have default values appropriate for C, but
can be changed to suit your programming language (e.g., the value
<tt class="literal">^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)</tt>
for <tt class="literal">define</tt>
could be used
to also look for definitions of C++ named constants).</p>

<p>The same facilities are also available as <em class="emphasis">ex</em>
commands, shown in <a href="ch11_10.htm#vi6-ch-11-tab-16">Table 11.16</a>.</p>

<a name="vi6-ch-11-tab-16" /><h4 class="objtitle">Table 11.16. vim Identifier Search Commands from ex Mode</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">is</tt>[<tt class="literal">earch</tt>][<tt class="literal">!</tt>] [<em class="replaceable">count</em>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">[i</tt> and
<a name="IXT-11-281905" />
<tt class="literal">]i</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.
The <tt class="literal">!</tt>, if supplied, forces comments
to be searched also.
Without the
<tt class="literal">/</tt>'s, a word search is done.
With them, a regular expression search is done.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">il</tt>[<tt class="literal">ist</tt>][<tt class="literal">!</tt>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">[I</tt> and
<a name="IXT-11-281906" />
<tt class="literal">]I</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">ij</tt>[<tt class="literal">ump</tt>][<tt class="literal">!</tt>] [<em class="replaceable">count</em>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">[ ^I</tt> and
<a name="IXT-11-281907" />
<tt class="literal">] ^I</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">isp</tt>[<tt class="literal">lit</tt>][<tt class="literal">!</tt>] [<em class="replaceable">count</em>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">^W i</tt> and
<a name="IXT-11-281908" />
<tt class="literal">^W ^I</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">ds</tt>[<tt class="literal">earch</tt>][<tt class="literal">!</tt>] [<em class="replaceable">count</em>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">[d</tt> and
<a name="IXT-11-281909" />
<tt class="literal">]d</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">dl</tt>[<tt class="literal">ist</tt>][<tt class="literal">!</tt>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">[D</tt> and
<a name="IXT-11-281910" />
<tt class="literal">]D</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">dj</tt>[<tt class="literal">ump</tt>][<tt class="literal">!</tt>] [<em class="replaceable">count</em>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">[ ^D</tt> and
<a name="IXT-11-281911" />
<tt class="literal">] ^D</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.</p></td>
</tr>

<tr>
<td>[<em class="replaceable"><tt>range</em>]<tt class="literal">dsp</tt>[<tt class="literal">lit</tt>][<tt class="literal">!</tt>] [<em class="replaceable">count</em>] [<tt class="literal">/</tt>]<em class="replaceable">pattern</tt></em>[<tt class="literal">/</tt>]</td>
<td><p>Like <tt class="literal">^W d</tt> and
<a name="IXT-11-281912" />
<tt class="literal">^W ^D</tt>, but searches in <em class="emphasis">range</em>
lines. The default is the whole file.</p></td>
</tr>

<tr>
<td><tt class="literal">che</tt>[<tt class="literal">ckpath</tt>][<tt class="literal">!</tt>]</td>
<td><p>List all the included files that could not be
<a name="IXT-11-281913" />
found. With the <tt class="literal">!</tt>, list all the
included files.</p></td>
</tr>


</table><p><p>

<p>
<a name="IXT-11-281914" />
The <tt class="literal">path</tt> option is used to search for included files
that do not have an absolute pathname. Its default value is
<tt class="literal">.,/usr/include,,</tt>, which looks in
the directory where the edited file resides,
in <em class="filename">/usr/include</em>, and in the current directory.</p>
</div>


<a name="vi6-ch-11-sect-10.2.3" /><div class="sect3">
<h3 class="sect3">11.10.2.3. Cursor motion commands for programming</h3>

<p>
<a name="IXT-11-281915" />
<a name="IXT-11-281916" />
<a name="IXT-11-281917" />
A number of enhanced and new cursor motion commands make it
easier to find the opposite ends of matching constructs, as well
as to find unmatched constructs that should be matched, for
example, <tt class="literal">#if</tt> statements that do not have
a corresponding <tt class="literal">#endif</tt>.
Most of these commands may be preceded by a count, which
defaults to one if not given.</p>

<p>See <a href="ch11_10.htm#vi6-ch-11-tab-17">Table 11.17</a> for a list of the
extending matching commands.</p>

<a name="vi6-ch-11-tab-17" /><h4 class="objtitle">Table 11.17. vim Extended Matching Commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Function</th>
</tr>




<tr>
<td><tt class="literal">%</tt></td>
<td><p>Extended to match the <tt class="literal">/*</tt>
and <tt class="literal">*/</tt> of C comments,
<a name="IXT-11-281918" />
<a name="IXT-11-281919" />
nd also the C preprocessor conditionals,
<tt class="literal">#if</tt>,
<tt class="literal">#ifdef</tt>,
<tt class="literal">#ifndef</tt>,
<tt class="literal">#elif</tt>,
<tt class="literal">#else</tt>, and
<tt class="literal">#endif</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">[(</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
<a name="IXT-11-281920" />
<a name="IXT-11-281921" />
<a name="IXT-11-281922" />
<a name="IXT-11-281923" />
previous unmatched <tt class="literal">(</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">[)</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
next unmatched <tt class="literal">)</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">[{</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
<a name="IXT-11-281924" />
<a name="IXT-11-281925" />
<a name="IXT-11-281926" />
<a name="IXT-11-281927" />
previous unmatched <tt class="literal">{</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">[}</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
next unmatched <tt class="literal">}</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">[#</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
<a name="IXT-11-281928" />
<a name="IXT-11-281929" />
<a name="IXT-11-281930" />
<a name="IXT-11-281931" />
previous unmatched <tt class="literal">#if</tt> or <tt class="literal">#else</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">]#</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
next unmatched <tt class="literal">#else</tt> or
<tt class="literal">#endif</tt>.</p></td>
</tr>

<tr>
<td><tt class="literal">[*</tt>, <tt class="literal">[/</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
previous unmatched start of a C comment, <tt class="literal">/*</tt>.
<a name="IXT-11-281932" />
<a name="IXT-11-281933" />
<a name="IXT-11-281934" />
<a name="IXT-11-281935" />

<a name="IXT-11-281936" />
<a name="IXT-11-281937" />
<a name="IXT-11-281938" />
<a name="IXT-11-281939" /></p></td>
</tr>

<tr>
<td><tt class="literal">]*</tt>, <tt class="literal">]/</tt></td>
<td><p>Move to the <em class="emphasis">count</em>th
next unmatched end of a C comment, <tt class="literal">*/</tt>.</p></td>
</tr>


</table><p><p>
</div>


<a name="IXT-11-281940" />
<a name="IXT-11-281941" />
</div>




<a name="vi6-ch-11-sect-10.3" /><div class="sect2">
<h3 class="sect2">11.10.3. Autocommands</h3>

<p>
<a name="IXT-11-281942" />
<a name="IXT-11-281943" />
<a name="IXT-11-281944" />
<em class="emphasis">vim</em> allows you to specify actions that should
be executed when a particular event occurs. This facility gives
you a great deal of flexibility and control.
As always though, with power comes responsibility; the <em class="emphasis">vim</em>
documentation warns that you should be careful with the autocommand
facility so that you don't accidentally destroy your text!</p>

<p>The facility is complicated and detailed. In this section we
outline its general capabilities, and provide an example to give
you a sense of its flavor.</p>

<p>
<a name="IXT-11-281945" />
The autocommand command is named <tt class="literal">:autocmd</tt>.
The general syntax is:</p>

<blockquote><pre class="code">:au <em class="replaceable"><tt>event</em> <em class="replaceable">filepat</em> <em class="replaceable">command</tt></em></pre></blockquote>

<p>The <em class="emphasis">event</em> is the kind of event to which this
command applies, for example, before and after reading a file
(<tt class="literal">FileReadPre</tt> and <tt class="literal">FileReadPost</tt>),
before and after writing a file
(<tt class="literal">FileWritePre</tt> and <tt class="literal">FileWritePost</tt>),
and upon entering or leaving a window
(<tt class="literal">WinEnter</tt> and <tt class="literal">Winleave</tt>).
There are more defined events, and case in the event name does not matter.</p>

<p>The <em class="emphasis">filepat</em> is a shell-style wildcard pattern
that <em class="emphasis">vim</em> applies to filenames. If they match,
then the autocommand will be applied for this file.</p>

<p>The <em class="emphasis">command</em> is any
<em class="emphasis">ex</em> mode command.
<em class="emphasis">vim</em> has
a special syntax for
retrieving the different parts of filenames, such
as the file's extension, or the name without the
extension.
These can be used in any <em class="emphasis">ex</em> command, but
are very useful with autocommands.</p>

<p>Multiple autocommands for the same events and file patterns
add commands onto the list. Autocommands can be removed
for a particular combination of events and file patterns
by appending <tt class="literal">!</tt> to the <tt class="literal">:autocmd</tt>
command.</p>

<p>A particularly elegant example allows you to edit
files compressed with the <em class="emphasis">gzip</em> program.
The file is automatically decompressed when
editing starts, and then recompressed when the file is written out
(the fourth line is broken for readability):</p>

<blockquote><pre class="code">:autocmd! BufReadPre,FileReadPre        *.gz set bin
:autocmd! BufReadPost,FileReadPost      *.gz '[,']!gunzip
:autocmd  BufReadPost,FileReadPost      *.gz set nobin
:autocmd  BufReadPost,FileReadPost      *.gz \
          execute ":doautocmd BufReadPost " . expand("%:r")

:autocmd! BufWritePost,FileWritePost    *.gz !mv &lt;afile&gt; &lt;afile&gt;:r
:autocmd  BufWritePost,FileWritePost    *.gz !gzip &lt;afile&gt;:r

:autocmd! FileAppendPre                 *.gz !gunzip &lt;afile&gt;
:autocmd  FileAppendPre                 *.gz !mv &lt;afile&gt;:r &lt;afile&gt;

:autocmd! FileAppendPost                *.gz !mv &lt;afile&gt; &lt;afile&gt;:r
:autocmd  FileAppendPost                *.gz !gzip &lt;afile&gt;:r</pre></blockquote>

<p>The first four commands are for reading compressed files.
The first two in this set use <tt class="literal">!</tt> to
remove any previously defined autocommands
for compressed files (<em class="filename">*.gz</em>).
The compressed file is read into the buffer as a binary file, so
the first command turns on
the <tt class="literal">bin</tt> (short for <tt class="literal">binary</tt>)
option.</p>

<p><em class="emphasis">vim</em> sets the marks
<tt class="literal">'[</tt> and <tt class="literal">']</tt> to the first and
last lines of the just read text. The second command uses this to
uncompress the just read file in the buffer.</p>

<p>The next two lines unset the <tt class="literal">binary</tt>
option, and then apply any autocommands that apply to the
uncompressed version of the file (e.g., syntax highlighting).
The <tt class="literal">%:r</tt> is the current filename without the extension.</p>

<p>The next two lines are for writing the compressed file.
The first one in this set first removes any previously defined autocommands
for compressed files (<em class="filename">*.gz</em>), with these events.
The commands invoke a shell to rename the file to not have the
<tt class="literal">.gz</tt> extension, and then run <em class="emphasis">gzip</em>
to compress the file.
The <tt class="literal">&lt;afile&gt;:r</tt> is the filename
without the extension.
(The use of <tt class="literal">&lt;afile&gt;:r</tt> is restricted
to autocommands.)
<em class="emphasis">vim</em> writes the uncompressed buffer to
the file with the <em class="filename">.gz</em> extension, thus the
need for the renaming.</p>

<p>The second line in this set runs <em class="emphasis">gzip</em> to compress
the file. <em class="emphasis">gzip</em> automatically renames the file, adding
the <em class="emphasis">.gz</em> extension.</p>

<p>The last four lines handle the case of appending to a compressed file.
The first two of these lines uncompress the file and rename it
before appending the contents to the file.</p>

<p>Finally, the last two lines recompress the file after writing
to it, so that the uncompressed file is not left laying around.</p>

<p>This section just touches the tip of the iceberg of autocommands.
For example, autocommands can be placed into groups, so that they
can all be executed or removed together.
All of the syntax coloring commands
described in
<a href="ch11_09.htm#vi6-ch-11-sect-9.2">Section 11.9.2</a>
are placed into the <tt class="literal">highlight</tt>
group.
An autocommand then executes all of them together when an
appropriate file is read.</p>

<p>As an example, instead of having your <em class="filename">.vimrc</em> file
always execute <tt class="literal">set cindent</tt> for smart C indenting,
you might use an autocommand to do it just for C source code, like
this:</p>

<blockquote><pre class="code">autocmd BufReadPre,FileReadPre   *.[chy] set cindent</pre></blockquote>
</div>




<a name="IXT-11-281946" />


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch11_11.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.9. Programming Assistance</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">11.11. Sources and Supported
Operating Systems</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>