<html><head><title>Redirecting I/O  (Learning the Unix Operating System, 5th Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Jerry Peek, John Strang and Grace Todino-Gonguet" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00261-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Unix Operating System, 5th Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Learning the Unix Operating System" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 5. Redirecting I/O </h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch05_01.htm#sect1">Standard Input and Standard Output</a><br />
<a href="ch05_02.htm">Pipes and Filters</a><br /></p></div><p>Many Unix programs read input (such as a file) and write output.
In this chapter, we discuss Unix programs that handle their input
and output in a standard way.
This lets them work with each other.
</p><p>
This chapter generally <em class="emphasis">doesn't</em> apply to full-screen
programs, such as the Pico editor, that take control of your whole terminal
window.
(The pager programs, <b class="emphasis-bold">less</b>,
<b class="emphasis-bold">more</b>, and
<b class="emphasis-bold">pg</b>,
<em class="emphasis">do</em> work together in this way.)
It also doesn't apply to graphical programs, such as StarOffice or Netscape,
that open their own windows on your screen.
</p><div class="sect1"><a name="lunix5-CHP-5-SECT-1" />
<h2 class="sect1"><a name="sect1" />5.1. Standard Input and Standard Output</h2>

<p>
<a name="lunix5-IDXTERM-602" />
<a name="lunix5-IDXTERM-603" />
<a name="lunix5-IDXTERM-604" />
<a name="lunix5-IDXTERM-605" />
What happens if you don't give a filename argument on a command line?
Most programs will take their input from your keyboard instead
(after you press the first <span class="keycap">RETURN</span>
to start the program running, that is).
Your terminal keyboard is the program's <em class="emphasis">standard input</em>.
<a name="IXT-5-279920" />
</p>

<p>
As a program runs, the results are usually displayed on your terminal
screen.
The terminal screen is the program's <em class="emphasis">standard
output</em>.
</p>

<p>
So, by default, each of these programs takes its input from the standard input
and sends the results to the standard output.
</p>

<p>
These two default cases of input/output (I/O) can be varied.
This is called <em class="emphasis">I/O redirection</em>.
</p>

<p>
<a name="IXT-5-279921" />
<a name="IXT-5-279922" />
If a program doesn't normally read from files, but reads from its standard
input, you can give a filename by using the &lt; (less-than symbol) operator.
For example, the <b class="emphasis-bold">mail</b> program
(see <a href="ch06_05.htm#lunix5-CHP-6-SECT-5.2">Section 6.5.2</a> in <a href="ch06_01.htm">Chapter 6</a>)
normally reads the message to send from your keyboard.
Here's how to use the input redirection operator to
mail the contents of the file
<em class="emphasis">to_do</em> to <em class="emphasis">bigboss@corp.xyz</em>:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>mail bigboss@corp.xyz &lt; to_do</b></tt>
$
</pre></blockquote>
</p>

<p>
If a program writes to its standard output, which is normally the screen,
you can make it write to a file instead by using the
<a name="lunix5-IDXTERM-609" />

<a name="lunix5-IDXTERM-610" />

<a name="IXT-5-279923" />

<a name="IXT-5-279924" />

<a name="IXT-5-279925" />
<a name="IXT-5-279926" />
greater-than symbol (<tt class="literal">&gt;</tt>) operator.
The pipe operator (<tt class="literal">|</tt>)
sends the standard output of one 
program to the standard input of another program.
Input/output redirection is one of the most powerful and flexible
Unix features,
We'll take a closer look at it soon.
</p>

<a name="lunix5-CHP-5-SECT-1.1" /><div class="sect2">
<h3 class="sect2">5.1.1. Putting Text in a File</h3>

<p>
<a name="lunix5-IDXTERM-615" />
<a name="lunix5-IDXTERM-616" />
Instead of always letting a program's output come to the screen,
you can redirect output into a file.
This is useful when you'd like to save program output
or when you put files together to make a bigger file.
</p>

<a name="lunix5-CHP-5-SECT-1.1.1" /><div class="sect3">
<h3 class="sect3">5.1.1.1. cat</h3>

<p>
<a name="IXT-5-279927" />
<a name="lunix5-IDXTERM-618" />
<b class="emphasis-bold">cat</b>, which is short
for "concatenate," reads files and outputs their contents
one after another, without stopping.
</p>

<p>
To display files on the standard output (your screen), use:
</p>


<p><b class="emphasis-bold">cat</b> <em class="emphasis">file(s)</em></p>


<p>
For example, let's display the contents of the file
<em class="emphasis">/etc/passwd</em>.
This system file describes users' accounts.
(Your system may have a more complete list somewhere else.)
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>cat /etc/passwd</b></tt>
root:x&amp;k8KP30f;(:0:0:Root:/:
daemon:*:1:1:Admin:/:
	.
	.
	.
john::128:50:John Doe:/usr/john:/bin/sh
$
</pre></blockquote>
</p>

<p>
You cannot go back to view the previous screens, as you can when
you use a pager program such as <b class="emphasis-bold">less</b>
(unless you're using a terminal window with a scrollbar, that is).
<b class="emphasis-bold">cat</b> is mainly used with redirection,
as we'll see in a moment.
</p>

<p>
By the way:
if you enter <b class="emphasis-bold">cat</b> without a filename,
it tries to read from the keyboard (as we mention earlier).
You can get out by pressing <span class="keycap">RETURN</span> followed by a single
<span class="keycap">CTRL-D</span>.
</p>
</div>

<a name="lunix5-CHP-5-SECT-1.1.2" /><div class="sect3">
<h3 class="sect3">5.1.1.2. The &gt; operator</h3>

<p>


When you add "&gt; <em class="emphasis">filename</em>" to the end of a
command line, the program's output is diverted from the standard
output to the named file.
The &gt; symbol is called the <em class="emphasis">output redirection
operator</em>.
</p>

<blockquote><b>WARNING:</b> 

When you use the &gt; operator,
be careful not to accidentally overwrite a file's contents.
Your system may let you redirect output to an existing file.
If so, the old file will be deleted (or, in Unix lingo, "clobbered").
Be careful not to overwrite a much needed file!
</p>
<p>
Many shells can protect you from
<a name="IXT-5-279928" />
<a name="IXT-5-279929" />
<a name="IXT-5-279930" />
<a name="IXT-5-279931" />
<a name="IXT-5-279932" />
this risk.
In the C shell, use the command <b class="emphasis-bold">set noclobber</b>.
The Korn shell and <b class="emphasis-bold">bash</b> command is
<b class="emphasis-bold">set -o noclobber</b>.
Enter the command at a shell prompt or put it in your shell's startup file.
After that, the shell does not allow you to redirect onto an existing
file and overwrite its contents.
</p>

<p>
This doesn't protect against overwriting by Unix programs such as
<b class="emphasis-bold">cp</b>; it works only with the &gt;
redirection operator.
For more protection, you can set Unix file access permissions.
</p>

</blockquote>

<p>
For example, let's use <b class="emphasis-bold">cat</b> with
this operator.
The file contents that you'd normally see on the screen (from
the standard output) are diverted into another file, which we'll then
read using <b class="emphasis-bold">cat</b> (without any redirection!):
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>cat /etc/passwd &gt; password</b></tt>
$ <tt class="userinput"><b>cat password</b></tt>
root:x&amp;k8KP30f;(:0:0:Root:/:
daemon:*:1:1:Admin:/:
	.
	.
	.
john::128:50:John Doe:/usr/john:/bin/sh
$
</pre></blockquote>
</p>

<p>
An earlier example (in <a href="ch05_01.htm#lunix5-CHP-5-SECT-1.1.1">Section 5.1.1.1</a>)
showed how
<b class="emphasis-bold">cat /etc/passwd</b> displays
the file <em class="emphasis">/etc/passwd</em> on the screen.
The example here adds the &gt; operator; so the output of
<b class="emphasis-bold">cat</b> goes to a file called
<em class="emphasis">password</em> in the working directory.
Displaying the file <em class="emphasis">password</em> shows that its
contents are the same as the file <em class="emphasis">/etc/passwd</em>
(the effect is the same as the copy command
<b class="emphasis-bold">cp /etc/passwd password</b>).
</p>

<p>
You can use the &gt; redirection operator with any program that
sends text to its standard output--not just with
<b class="emphasis-bold">cat</b>.
For example:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>who &gt; users</b></tt>
$ <tt class="userinput"><b>date &gt; today</b></tt>
$ <tt class="userinput"><b>ls</b></tt>
password   today   users   ...
</pre></blockquote>
</p>

<p>
<a name="IXT-5-279933" />
<a name="IXT-5-279934" />
<a name="IXT-5-279935" />
We've sent the output of <b class="emphasis-bold">who</b> to a file
called <em class="emphasis">users</em> and the output of
<b class="emphasis-bold">date</b> to the file named
<em class="emphasis">today</em>.
Listing the directory shows the two new files.
Let's look at the output from the <b class="emphasis-bold">who</b>
and <b class="emphasis-bold">date</b> programs by reading these
two files with <b class="emphasis-bold">cat</b>:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>cat users</b></tt>
tim     tty1    Aug 12  07:30
john    tty4    Aug 12  08:26
$ <tt class="userinput"><b>cat today</b></tt>
Tue Aug 12 08:36:09 EDT 2001
$
</pre></blockquote>
</p>

<p>
You can also use the <b class="emphasis-bold">cat</b> program
and the &gt; operator to make a small text file.
We told you earlier to type <span class="keycap">CTRL-D</span>
if you accidentally enter <b class="emphasis-bold">cat</b> without a
filename.
This is because the <b class="emphasis-bold">cat</b> program alone
takes whatever you type on the keyboard as input.
Thus, the command:
</p>


<p>
<b class="emphasis-bold">cat &gt;</b> <em class="emphasis">filename</em></p>


<p>
takes input from the keyboard and redirects it to a file.
Try the following example:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>cat &gt; to_do
Finish report by noon
Lunch with Xannie
Swim at 5:30
^D</b></tt>
$
</pre></blockquote>
</p>

<p>
<b class="emphasis-bold">cat</b> takes the text that you typed
as input (in this example, the three lines that begin with <tt class="userinput"><b>Finish</b></tt>, <tt class="userinput"><b>Lunch</b></tt>,
and <tt class="userinput"><b>Swim</b></tt>), and the &gt; operator redirects it to a file called
<em class="emphasis">to_do</em>.
Type
<a name="IXT-5-279936" />
<span class="keycap">CTRL-D</span>
<em class="emphasis">once</em>,
on a new line by itself, to signal the end of the text.
You should get a shell prompt.
</p>

<p>You can also create a bigger file from smaller files
with the <b class="emphasis-bold">cat</b> command and the &gt;
operator.
The form:
</p>


<p>
<b class="emphasis-bold">cat</b> <em class="emphasis">file1 file2 &gt; newfile</em>
</p>


<p>
creates a file <em class="emphasis">newfile</em>, consisting of
<em class="emphasis">file1</em> followed by <em class="emphasis">file2</em>.
<a name="IXTR3-88" />
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>cat today to_do &gt; diary</b></tt>
$ <tt class="userinput"><b>cat diary</b></tt>
Tue Aug 12 08:36:09 EDT 2001
Finish report by noon
Lunch with Xannie
Swim at 5:30
$
</pre></blockquote>
</p>

<blockquote><b>WARNING:</b> 

You can't use redirection to add a file to itself, along with other files.
For example, you might hope that the following command would merge today's
to-do list with tomorrow's.
This won't work!
</p>


<blockquote><pre class="code">
$ <tt class="userinput"><b>cat to_do to_do.tomorrow &gt; to_do.tomorrow</b></tt>
cat: to_do.tomorrow: input file is output file
</pre></blockquote>

<p>
<b class="emphasis-bold">cat</b> warns you, but it's actually already
too late.
When you redirect a program's output to a file, Unix empties (clobbers)
the file <em class="emphasis">before</em> the program starts running.
The right way to do this is by using a temporary file (as you'll see
in a later example) or simply by using a text editor program.
</p>

</blockquote>


<p>
<a name="IXTR3-89" />
<a name="IXTR3-90" />
<a name="IXTR3-91" />
<a name="IXTR3-92" />
</p>
</div>


<a name="lunix5-CHP-5-SECT-1.1.3" /><div class="sect3">
<h3 class="sect3">5.1.1.3. The &gt;&gt; operator</h3>

<p>
<a name="IXT-5-279937" />
<a name="IXT-5-279938" />
<a name="IXT-5-279939" />
You can add more text to the end of an existing file, instead of
replacing its contents, by using the &gt;&gt; (append redirection) operator.
Use it as you would the &gt; (output redirection) operator.
So:
</p>


<p>
<b class="emphasis-bold">cat</b> <em class="emphasis">file2</em> <b class="emphasis-bold">&gt;&gt;</b> <em class="emphasis">file1</em>
</p>


<p>
appends the contents of <em class="emphasis">file2</em> to the end of <em class="emphasis">file1</em>.
For an example, let's append the contents of the file
<em class="emphasis">users</em>, and also
the current date and time, to the file <em class="emphasis">diary</em>.
Then we display the file:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>cat users &gt;&gt; diary</b></tt>
$ <tt class="userinput"><b>date &gt;&gt; diary</b></tt>
$ <tt class="userinput"><b>cat diary</b></tt>
Tue Aug 12 08:36:09 EDT 2001
Finish report by noon
Lunch with Xannie
Swim at 5:30
tim     tty1    Aug 12  07:30
john    tty4    Aug 12  08:26
Tue Aug 12 09:07:24 EDT 2001
$
</pre></blockquote>
</p>

<p>
Unix doesn't have a redirection operator that adds text to the beginning
of a file.
You can do this by storing the new text in a temporary file, then by using
a text editor program to read the temporary file into the start of the
file you want to edit.
You also can do the job with a temporary file and redirection.
Maybe you'd like each day's entry to go at the beginning of your
<em class="emphasis">diary</em> file.
Simply rename <em class="emphasis">diary</em> to something like
<em class="emphasis">temp</em>.
Make a new <em class="emphasis">diary</em> file with today's entries,
then append <em class="emphasis">temp</em> (with its old contents) to the
new <em class="emphasis">diary</em>.
For example:<a href="#FOOTNOTE-14">[14]</a>
</p><blockquote class="footnote">

<a name="FOOTNOTE-14" /><p> [14]
This example could be shortened by combining the two
<b class="emphasis-bold">cat</b> commands into one, giving
both filenames as arguments to a single <b class="emphasis-bold">cat</b>
command.
That wouldn't work, though, if you were making a real diary with
a command other than <b class="emphasis-bold">cat users</b>.
</p>

</blockquote>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>mv diary temp</b></tt>
$ <tt class="userinput"><b>date &gt; diary</b></tt>
$ <tt class="userinput"><b>cat users &gt;&gt; diary</b></tt>
$ <tt class="userinput"><b>cat temp &gt;&gt; diary</b></tt>
$ <tt class="userinput"><b>rm temp</b></tt>
</pre></blockquote>
</p>

</div>
</div>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch05_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4.5. Printing Files</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">5.2. Pipes and Filters</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
      </map>

</body></html>