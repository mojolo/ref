<html><head><title>Shared Libraries Versus Loadable Modules (Mac OS X for Unix Geeks)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Brian Jepson and Ernest E. Rothman" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00356-0" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Mac OS X for Unix Geeks" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Mac OS X for Unix Geeks" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">5.3. Shared Libraries Versus Loadable Modules</h2>

<p><a name="mosxgeeks-IDXTERM-368" />The <a name="IXT-5-557" />
<a name="IXT-5-558" />Executable and Linking Format (ELF),
developed by the Unix System Laboratories, is common in the Unix
world. On ELF systems, there is no distinction between shared
libraries and loadable modules; shared code can be used as a library
for dynamic loading. ELF is the default binary format on Linux,
Solaris 2.<em class="emphasis">x</em>, and SVR4. Since these systems cover
a large share of the Unix base, most Unix developers have experience
on ELF systems. Thus, it may come as a surprise to experienced Unix
developers that shared libraries and loadable modules are not the
same on Mac OS X. This is because the binary format used in Mac OS X
is <em class="emphasis">Mach-O</em>, which is different from ELF.
</p>

<p><a name="IXT-5-559" />Mach-O shared libraries have the file type
<tt class="literal">MH_DYLIB</tt><a name="IXT-5-560" /> and the <em class="emphasis">.dylib</em>
(dynamic library) suffix and can be linked to with static linker
flags. So, if you have a shared library named
<em class="emphasis">libcool.dylib</em>, you can link to this library by
specifying the -<em class="emphasis">lcool</em> flag. Although shared
libraries cannot be loaded dynamically as modules, they can be loaded
through the <em class="emphasis">dyld</em> API (see the manpage for
<em class="emphasis">dyld</em>, the dynamic link editor). It is important
to point out that shared libraries cannot be unloaded.
</p>

<p><a name="IXT-5-561" />Loadable modules,
called <em class="emphasis">bundles</em>
<a name="IXT-5-562" />in Mac OS
X, have the file type
<tt class="literal">MH_BUNDLE</tt><a name="IXT-5-563" />. Most Unix-based software ports usually
produce bundles with a
<em class="emphasis">.so</em><a name="IXT-5-564" /> extension, for the sake of
consistency across platforms. Although Apple recommends giving
bundles a <em class="emphasis">.bundle</em> extension, it
isn't mandatory.
</p>

<a name="ch05-13-fm2xml" /><blockquote><b>WARNING:</b> 
You cannot link directly against a bundle. Instead, bundles must be
dynamically loaded and unloaded by the <em class="emphasis">dyld</em>
APIs. When porting Unix-based software, you'll often
need to translate <tt class="literal">dlopen( )</tt> function calls to
<em class="emphasis">dylib</em><a name="IXT-5-565" /> actions. You can implement a
temporary fix by using the
<em class="emphasis">dlcompat</em><a name="IXT-5-566" /> library from the Finkdistribution, but the ideal solution is to do a complete
port using the <em class="emphasis">dyld</em> APIs.
</p>
</blockquote>

<p>You need to use special flags with
<em class="emphasis">cc</em><a name="IXT-5-567" /> when compiling a shared library or a
bundle on Darwin. One difference between <a name="IXT-5-568" />Darwin and many other Unix systems is that
no <em class="emphasis">position-independent
code</em><a name="IXT-5-569" /> <a name="IXT-5-570" /> (PIC) flag is needed, since it is the
default for Darwin. Next, since the linker does not allow common
symbols, the compiler flag <a name="IXT-5-571" />-<em class="emphasis">fno-common</em> is
required for both shared libraries and bundles. (A common symbol is
one that is defined multiple times. You should instead define a
symbol once and use C's
<em class="emphasis">extern</em><a name="IXT-5-572" /> keyword to declare it in places where
it is needed.)
</p>

<p>To build a shared library, use
<em class="emphasis">cc</em>'s -<em class="emphasis">dynamiclib</em>
<a name="IXT-5-573" />option. Use the
<a name="IXT-5-574" />-<em class="emphasis">bundle</em> option to
build a loadable module or bundle.
</p>

<a name="mosxgeeks-CHP-5-SECT-3.1" /><div class="sect2">
<h3 class="sect2">5.3.1. Building a Shared Library</h3>

<p>Suppose you want to create a shared library containing one or more C
functions, such as the one shown in <a href="ch05_03.htm#mosxgeeks-CHP-5-EX-3">Example 5-3</a>.
</p>

<a name="mosxgeeks-CHP-5-EX-3" /><div class="example">
<h4 class="objtitle">Example 5-3. A simple C program  </h4><a name="IXT-5-575" />
<blockquote><pre class="code">/*
 * answer.c: The answer to life, the universe, and everything.
 */
int get_answer( ) 
{
  return 42;
}</pre></blockquote>
</div>

<p>If you compile the program containing the function into a shared
library, you could test it with the program shown in <a href="ch05_03.htm#mosxgeeks-CHP-5-EX-4">Example 5-4</a>. 
</p>

<a name="mosxgeeks-CHP-5-EX-4" /><div class="example">
<h4 class="objtitle">Example 5-4. Compiling answer.c into a shared library  </h4>
<blockquote><pre class="code">/*
 * deep_thought.c: Obtain the answer to life, the universe, 
 * and everything, and act startled when you actually hear it.
 */
#include &lt;stdio.h&gt;
int main( )
{
  int the_answer;
  the_answer = get_answer( );
  printf("The answer is... %d\n", the_answer);

  fprintf(stderr, "%d??!!\n", the_answer);
  return 0;
}</pre></blockquote>
</div>

<p>The <em class="emphasis">makefile</em> shown in <a href="ch05_03.htm#mosxgeeks-CHP-5-EX-5">Example 5-5</a> will compile and link the library, and then
compile, link, and execute the test program.
</p>

<a name="mosxgeeks-CHP-5-EX-5" /><div class="example">
<h4 class="objtitle">Example 5-5. Sample makefile for creating and testing a shared library  </h4>
<blockquote><pre class="code"># Makefile: Create and test a shared library.
#
# Usage: make test
#
CC = cc 
LD = cc
CFLAGS = -O -fno-common

all: deep_thought

# Create the shared library.
#
answer.o: answer.c
        $(CC) $(CFLAGS) -c answer.c

libanswer.dylib: answer.o
        $(LD) -dynamiclib -install_name libanswer.dylib \
        -o libanswer.dylib answer.o

# Test the shared library with the deep_thought program.
#
deep_thought.o: deep_thought.c
        $(CC) $(CFLAGS) -c deep_thought.c

deep_thought: deep_thought.o libanswer.dylib
        $(LD) -o deep_thought deep_thought.o -L. -lanswer

test: all
        ./deep_thought

clean:
        rm -f *.o core deep_thought libanswer.dylib</pre></blockquote>
</div>

</div>
<a name="mosxgeeks-CHP-5-SECT-3.2" /><div class="sect2">
<h3 class="sect2">5.3.2. Dynamically Loading Libraries</h3>

<p><a name="mosxgeeks-IDXTERM-387" /> <a name="mosxgeeks-IDXTERM-388" />You can turn
<em class="emphasis">answer.o</em> into a bundle, which can be dynamically
loaded using the commands shown in <a href="ch05_03.htm#mosxgeeks-CHP-5-EX-6">Example 5-6</a>.
</p>

<a name="mosxgeeks-CHP-5-EX-6" /><div class="example">
<h4 class="objtitle">Example 5-6. Commands for converting answer.o into a bundle  </h4><a name="IXT-5-576" />
<blockquote><pre class="code">cc -flat_namespace -bundle -undefined suppress \
  -o libanswer.bundle answer.o</pre></blockquote>
</div>

<p>You do not need to specify the bundle at link time. Instead, use the
<em class="emphasis">dyld</em> functions
<tt class="literal">NSCreateObjectFileImageFromFile</tt> and
<tt class="literal">NSLinkModule</tt> to load the library. Then, you can
use <tt class="literal">NSLookupSymbolInModule</tt> and
<tt class="literal">NSAddressOfSymbol</tt> to access the symbols that the
library exports. <a href="ch05_03.htm#mosxgeeks-CHP-5-EX-7">Example 5-7</a> loads
<em class="emphasis">libanswer.bundle</em> and invokes the
<tt class="literal">get_answer</tt> function. <a href="ch05_03.htm#mosxgeeks-CHP-5-EX-7">Example 5-7</a>
is similar to <a href="ch05_03.htm#mosxgeeks-CHP-5-EX-4">Example 5-4</a>, but many lines (shown in
<b class="emphasis-bold">bold</b>) have been added.
</p>

<a name="mosxgeeks-CHP-5-EX-7" /><div class="example">
<h4 class="objtitle">Example 5-7. Dynamically loading a bundle and invoking a function  </h4>
<blockquote><pre class="code">/*
 * deep_thought_dyld.c: Obtain the answer to life, the universe,
 * and everything, and act startled when you actually hear it.
 */
#include &lt;stdio.h&gt;
<b class="emphasis-bold">#import &lt;mach-o/dyld.h&gt;</b>

int main( )
{
  int the_answer;
<b class="emphasis-bold">  int rc;                // Success or failure result value
  NSObjectFileImage img; // Represents the bundle's object file
  NSModule handle;       // Handle to the loaded bundle
  NSSymbol sym;          // Represents a symbol in the bundle

  int (*get_answer) (void);  // Function pointer for get_answer

  /* Get an object file for the bundle. */
  rc = NSCreateObjectFileImageFromFile("libanswer.bundle", &amp;img);
  if (rc != NSObjectFileImageSuccess) {
    fprintf(stderr, "Could not load libanswer.bundle.\n");
    exit(-1);
  }

  /* Get a handle for the bundle. */
  handle = NSLinkModule(img, "libanswer.bundle", FALSE);

  /* Look up the get_answer function. */
  sym = NSLookupSymbolInModule(handle, "_get_answer");
  if (sym == NULL)
  {
    fprintf(stderr, "Could not find symbol: _get_answer.\n");
    exit(-2);
  }

  /* Get the address of the function. */
  get_answer = NSAddressOfSymbol(sym);</b>

  /* Invoke the function and display the answer. */
  the_answer = get_answer( );
  printf("The answer is... %d\n", the_answer);

  fprintf(stderr, "%d??!!\n", the_answer);
  return 0;
}</pre></blockquote>
</div>

<p>For more information on these functions, see the
<tt class="literal">NSObjectFileImage</tt>, <tt class="literal">NSModule</tt>,
and <tt class="literal">NSSymbol</tt> manpages. To compile the code in
<a href="ch05_03.htm#mosxgeeks-CHP-5-EX-7">Example 5-7</a>, use the following command:
</p>

<a name="IXTR3-594" /><a name="IXTR3-595" /><blockquote><pre class="code">cc  -O -fno-common -o deep_thought_dyld deep_thought_dyld.c 
</pre></blockquote>

</div>
<a name="mosxgeeks-CHP-5-SECT-3.3" /><div class="sect2">
<h3 class="sect2">5.3.3. Two-level Namespaces</h3>

<p>In Mac OS X 10.0, the dynamic linker merged symbols into a single
(flat) <a name="IXT-5-577" />
<a name="IXT-5-578" />namespace. So, if you link against
two different libraries that both define the same function, the
dynamic linker complains, because the same symbol was defined in both
places. This approach prevented collisions that were known at compile
time. However, if there wasn't a conflict at compile
time, there is no guarantee that a future version of the library
won't introduce a conflict.
</p>

<p>Suppose you linked your application against version 1 of
<em class="emphasis">libfoo</em> and version 1 of
<em class="emphasis">libbar</em>. At the time you compiled your
application, <em class="emphasis">libfoo</em> defined a function called
<tt class="literal">logerror( )</tt>, and <em class="emphasis">libbar</em> did
not. But when version 2 of <em class="emphasis">libbar</em> came out, it
included a function called <tt class="literal">logerror( )</tt>. Since the
conflict was not known at compile time, your application
doesn't expect <em class="emphasis">libbar</em> to
contain this function. If your application happens to load
<em class="emphasis">libbar</em> before <em class="emphasis">libfoo</em>, it
will call <em class="emphasis">libbar</em>'s
<tt class="literal">logerror( )</tt> method, which is not what you want.
</p>

<p>So, Mac OS X 10.1 introduced two-level namespaces, which the compiler
uses by default. (Mac OS X 10.2 does not introduce any changes to
two-level namespaces.) With this feature, you can link against
version 1 of <em class="emphasis">libfoo</em> and
<em class="emphasis">libbar</em>. The linker creates an application that
knows <tt class="literal">logerror( )</tt> lives in
<em class="emphasis">libfoo</em>. So, even if a future version of
<em class="emphasis">libbar</em> includes a <tt class="literal">logerror( )</tt>
function, your application will know which <tt class="literal">logerror(
)</tt> it should use.
</p>

<p>If you want to build an application using a flat namespace, use the
<em class="emphasis">-flat_namespace</em><a name="IXT-5-579" /> linker flag. See the
<em class="emphasis">ld</em> manpage for more details.<a name="IXTR3-596" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch05_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">5.2. The System Library: libSystem</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">5.4. Library Versions</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>