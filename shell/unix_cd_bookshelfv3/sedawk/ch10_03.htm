<html><head><title>The system() Function (sed & awk, Second Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Dale Dougherty and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-225-5" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="sed &amp; awk, Second Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="sed &amp; awk" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="sed &amp; awk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">10.3. The system() Function</h2>

<p>
<a name="ch10.system" />
<a name="IXT-10-266161" />
<a name="IXT-10-266162" />
The <b class="emphasis-bold">system()</b> function executes a command supplied as
an expression.<a href="#FOOTNOTE-68">[68]</a>
It does not, however, make the output of the command available within
the program for processing.  It returns the exit status of the command
that was executed.  The script waits for the command to finish before
continuing execution.  The following example executes the
<b class="emphasis-bold">mkdir</b> command:</p><blockquote class="footnote">

<a name="FOOTNOTE-68" /><p> [68]The <b class="emphasis-bold">system()</b> function is modeled after the
standard C library function of the same name.</p>

</blockquote>

<blockquote><pre class="code">BEGIN { if (system("mkdir dale") != 0) 
		print "Command Failed" }</pre></blockquote>

<p>The <b class="emphasis-bold">system()</b> function is called from an
<b class="emphasis-bold">if</b> statement that tests for a non-zero exit
status.  Running the program twice produces one success and one
failure:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f system.awk</b></tt>
$ <tt class="userinput"><b>ls dale</b></tt>
$ <tt class="userinput"><b>awk -f system.awk</b></tt>
mkdir: dale: File exists
Command Failed</pre></blockquote>

<p>The first run creates the new directory and
<b class="emphasis-bold">system()</b> returns an exit status of 0
(success).  The second time the command is executed, the directory
already exists, so <b class="emphasis-bold">mkdir</b> fails and produces an
error message.  The "Command Failed" message is produced by awk.</p>

<p>The Berkeley UNIX command set has a small but useful command for
<b class="emphasis-bold">troff</b> users named <b class="emphasis-bold">soelim</b>, named
because it "eliminates" ".so" lines from a <b class="emphasis-bold">troff</b>
input file.  (<b class="emphasis-bold">.so</b> is a request to include or
"source" the contents of the named file.)  If you have an older
System V system that does not have <b class="emphasis-bold">soelim</b>, you can
use the following awk script to create it:</p>

<blockquote><pre class="code">/^\.so/ { gsub(/"/, "", $2)
		system("cat " $2)
		next
		}
{ print }</pre></blockquote>

<p>This script looks for ".so" at the beginning of a line, removes
any quotation marks, and then uses <b class="emphasis-bold">system()</b> 
to execute the <b class="emphasis-bold">cat</b> command and 
output the contents of the file. This output merges with the
rest of the lines in the file, which are simply printed to standard
output, as in the following example.</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>cat soelim.test</b></tt>
This is a test
.so test1
This is a test
.so test2
This is a test.
$ <tt class="userinput"><b>awk -f soelim.awk soelim.test</b></tt>
This is a test
first:second
one:two
This is a test
three:four
five:six
This is a test.</pre></blockquote>

<p>We don't explicitly test the exit status of the command.  Thus, if the
file does not exist, the error messages merge with the output:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f soelim.awk soelim.test</b></tt>
This is a test
first:second
one:two
This is a test
cat: cannot open test2
This is a test.</pre></blockquote>

<p>We might want to test the return value of the
<b class="emphasis-bold">system()</b> function and generate an error
message for the user.  This program is also very simplistic: it does
not handle instances of ".so" nested in the included file.  Think
about how you might implement a version of this program that did
handle nested ".so" requests.</p>

<p>This example is a function prompting you to enter a
filename.  It uses the <b class="emphasis-bold">system()</b> function to
execute the <b class="emphasis-bold">test</b> command to verify the file
exists and is readable:</p>

<blockquote><pre class="code"># getFilename function -- prompts user for filename,
#   verifies that file exists and returns absolute pathname. 
function getFilename(	file) { 
    while (! file) {
	printf "Enter a filename: "
	getline &lt; "-" # get response
	file = $0
	# check that file exists and is readable
	# test returns 1 if file does not exist.
	if (system("test -r " file)) {
		print file " not found"
		file = ""
	}
    }
    if (file !~ /^\//) {
	"pwd" | getline # get current directory 
 	close("pwd")
	file = $0 "/" file
    }
    return file
}</pre></blockquote>

<p>This function returns the absolute pathname of the file specified by
the user.  It places the prompting and verification sequence inside a
<b class="emphasis-bold">while</b> loop in order to allow the user to make a
different entry if the previous one is invalid.</p>

<p>The <b class="emphasis-bold">test -r</b> command returns 0 if the file exists
and is readable, and 1 if not.  Once it is determined that the
filename is valid, then we test the filename to see if it begins with
a "/", which would indicate that the user supplied an absolute
pathname.  If that test fails, we use the <b class="emphasis-bold">getline</b>
function to get the output of the <b class="emphasis-bold">pwd</b> command and
prepend it to the filename.  (Admittedly, the script makes no attempt
to deal with "./" or "../" entries, although tests can
be easily devised to match them.)  Note the two uses of the
<b class="emphasis-bold">getline</b> function: the first gets the user's
response and the second executes the <b class="emphasis-bold">pwd</b> command.</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch10_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch10_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">10.2. The close() Function</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">10.4. A Menu-Based Command Generator</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>