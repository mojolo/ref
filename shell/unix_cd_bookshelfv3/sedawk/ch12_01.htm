<html><head><title>Full-Featured Applications (sed & awk, Second Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Dale Dougherty and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-225-5" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="sed &amp; awk, Second Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="sed &amp; awk" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="sed &amp; awk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 12. Full-Featured Applications</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch12_01.htm#sect1">An Interactive Spelling Checker</a><br />
<a href="ch12_02.htm">Generating a Formatted Index</a><br />
<a href="ch12_03.htm">Spare Details of the masterindex Program</a><br /></p></div><p>This chapter presents two complex applications that integrate most
features of the awk programming language.  The first program,
<b class="emphasis-bold">spellcheck</b>, provides an interactive interface to
the UNIX <b class="emphasis-bold">spell</b> program.  The second application,
<b class="emphasis-bold">masterindex</b>, is a batch program for generating an
index for a book or a set of books.  Even if you are not interested in
the particular application, you should study these larger programs to
get a feel for the scope of the problems that an awk program can
solve.</p><div class="sect1"><a name="sedawk-ch-12-sect-1" />
<h2 class="sect1"><a name="sect1" />12.1. An Interactive Spelling Checker</h2>

<p>
<a name="ch12.spell" />
<a name="ch12.spell2" />
The UNIX <b class="emphasis-bold">spell</b> program does an adequate job of
catching spelling errors in a document.  For most people, however, it
only does half the job.  It doesn't help you correct the misspelled
words.  First-time users of <b class="emphasis-bold">spell</b> find themselves
jotting down the misspelled words and then using the text editor to
change the document.  More skilled users build a sed script to make
the changes automatically.</p>

<p>The <b class="emphasis-bold">spellcheck</b> program
offers another way--it shows you each word that
<b class="emphasis-bold">spell</b> has found and asks if you want to correct the
word.  You can change each occurrence of the word after seeing the
line on which it occurs, or you can correct the spelling error
globally.  You can also choose to add any word that
<b class="emphasis-bold">spell</b> turns up to a local dictionary file.</p>

<p>Before describing the program, let's have a demonstration of how it
works.  The user enters <b class="emphasis-bold">spellcheck</b>, a shell script
that invokes awk, and the name of the document file.</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>spellcheck ch00</b></tt>
Use local dict file? (y/n)<tt class="userinput"><b>y</b></tt></pre></blockquote>

<p>If a dictionary file is not specified on the command line, and a file
named <em class="filename">dict</em> exists in the current directory, then
the user is asked if the local dictionary should be used.
<b class="emphasis-bold">spellcheck</b> then runs <b class="emphasis-bold">spell</b> using
the local dictionary.</p>

<blockquote><pre class="code">Running spell checker ...</pre></blockquote>

<p>Using the list of "misspelled" words turned up by
<b class="emphasis-bold">spell</b>, <b class="emphasis-bold">spellcheck</b> prompts the
user to correct them.  Before the first word is displayed, a list of
responses is shown that describes what actions are possible.</p>

<blockquote><pre class="code">Responses: 
	Change each occurrence, 
	Global change, 
	Add to Dict, 
	Help, 
	Quit 
	CR to ignore: 
1 - Found SparcStation (C/G/A/H/Q/):<b class="emphasis-bold">a</b></pre></blockquote>

<p>The first word found by <b class="emphasis-bold">spell</b> is "SparcStation."  A
response of "a" (followed by a carriage return) adds this word to a
list that will be used to update the dictionary.  The second word is
clearly a misspelling and a response of "g" is entered to make the
change globally:</p>

<blockquote><pre class="code">2 - Found languauge (C/G/A/H/Q/):<tt class="userinput"><b>g</b></tt>
Globally change to:<tt class="userinput"><b>language</b></tt>
Globally change languauge to language? (y/n):<tt class="userinput"><b>y</b></tt>
&gt; and a full description of its scripting language. 
1 lines changed. Save changes? (y/n)<tt class="userinput"><b>y</b></tt></pre></blockquote>

<p>After prompting the user to enter the correct spelling and confirming
the entry, the change is made and each line affected is displayed,
preceded by a "&gt;".  The user is then asked to approve these changes
before they are saved.  The third word is also added to the
dictionary:</p>

<blockquote><pre class="code">3 - Found nawk (C/G/A/H/Q/):<tt class="userinput"><b>a</b></tt></pre></blockquote>

<p>The fourth word is a misspelling of "utilities."</p>

<blockquote><pre class="code">4 - Found utlitities (C/G/A/H/Q/):<tt class="userinput"><b>c</b></tt>
These utlitities have many things in common, including
      ^^^^^^^^^^
Change to:<tt class="userinput"><b>utilities</b></tt>
Change utlitities to utilities? (y/n):<tt class="userinput"><b>y</b></tt>
Two other utlitities that are found on the UNIX system
          ^^^^^^^^^^
Change utlitities to utilities? (y/n):<tt class="userinput"><b>y</b></tt>
&gt;These utilities have many things in common, including
&gt;Two other utilities that are found on the UNIX system
2 lines changed. Save changes? (y/n)<tt class="userinput"><b>y</b></tt></pre></blockquote>

<p>The user enters "c" to change each occurrence.  This response allows
the user to see the line containing the misspelling and then make the
change.  After the user has made each change, the changed lines are
displayed and the user is asked to confirm saving the changes.</p>

<p>It is unclear whether the fifth word is a misspelling or not, so the
user enters "c" to view the line.</p>

<blockquote><pre class="code">5 - Found xvf (C/G/A/H/Q/):<tt class="userinput"><b>c</b></tt>
tar xvf filename
    ^^^
Change to:<tt class="userinput"><b>RETURN</b></tt></pre></blockquote>

<p>After determining that it is not a misspelling, the user enters a
carriage return to ignore the word.  Generally,
<b class="emphasis-bold">spell</b> turns up a lot of words that are not
misspellings so a carriage return means to ignore the word.</p>

<p>After all the words in the list have been processed, or if the user
quits before then, the user is prompted to save the changes made to
the document and the dictionary.</p>

<blockquote><pre class="code">Save corrections in ch00 (y/n)? <tt class="userinput"><b>y</b></tt>
Make changes to dictionary (y/n)? <tt class="userinput"><b>y</b></tt></pre></blockquote>

<p>If the user answers "n," the original file and the dictionary are left
unchanged.</p>

<p>Now let's look at the <b class="emphasis-bold">spellcheck.awk</b> script, which
can be divided into four sections:</p>

<ul><li><p> The <b class="emphasis-bold">BEGIN</b> procedure, that
processes the command-line arguments and executes the
<b class="emphasis-bold">spell</b> command to create a word list.</p></li><li><p>The main procedure, that reads one word at a time from the list and
prompts the user to make a correction.</p></li><li><p>The <b class="emphasis-bold">END</b> procedure, that saves the working copy of
the file, overwriting the original.  It also appends words from the
exception list to the current dictionary.</p></li><li><p>Supporting functions, that are called to make changes in the file.</p></li></ul><p>We will look at each of these sections of the program.</p>

<a name="sedawk-ch-12-sect-1.1" /><div class="sect2">
<h3 class="sect2">12.1.1. BEGIN Procedure</h3>

<p>The <b class="emphasis-bold">BEGIN</b> procedure for
<b class="emphasis-bold">spellcheck.awk</b> is large.  It is also somewhat
unusual.</p>

<blockquote><pre class="code"># spellcheck.awk -- interactive spell checker
#
# AUTHOR: Dale Dougherty
#
# Usage: nawk -f spellcheck.awk [+dict] file 
# (Use spellcheck as name of shell program) 
# SPELLDICT = "dict" 
# SPELLFILE = "file"

# BEGIN actions perform the following tasks: 
#	1) process command-line arguments
#	2) create temporary filenames
#	3) execute spell program to create wordlist file
#	4) display list of user responses

BEGIN { 
# Process command-line arguments
# Must be at least two args -- nawk and filename
	if (ARGC &gt; 1) {
	# if more than two args, second arg is dict 
		if (ARGC &gt; 2) {
		# test to see if dict is specified with "+"  
		# and assign ARGV[1] to SPELLDICT
			if (ARGV[1] ~ /^\+.*/) 
				SPELLDICT = ARGV[1]
			else 
				SPELLDICT = "+" ARGV[1]
		# assign file ARGV[2] to SPELLFILE 
			SPELLFILE = ARGV[2]
		# delete args so awk does not open them as files
			delete ARGV[1]
			delete ARGV[2]
		}
	# not more than two args
		else {
		# assign file ARGV[1] to SPELLFILE 
			SPELLFILE = ARGV[1]
		# test to see if local dict file exists
			if (! system ("test -r dict")) {
			# if it does, ask if we should use it
				printf ("Use local dict file? (y/n)")	
				getline reply &lt; "-"
			# if reply is yes, use "dict" 
				if (reply ~ /[yY](es)?/){
					SPELLDICT = "+dict"
				}
			}
		}
	} # end of processing args &gt; 1 
	# if args not &gt; 1, then print shell-command usage 
	else {
		print "Usage: spellcheck [+dict] file"
		exit 1
	}
# end of processing command line arguments

# create temporary file names, each begin with sp_
	wordlist = "sp_wordlist"
	spellsource = "sp_input"
	spellout = "sp_out"

# copy SPELLFILE to temporary input file
	system("cp " SPELLFILE " " spellsource)

# now run spell program; output sent to wordlist
	print "Running spell checker ..."
	if (SPELLDICT)
		SPELLCMD = "spell " SPELLDICT " "
	else
		SPELLCMD = "spell "
	system(SPELLCMD spellsource " &gt; " wordlist )

# test wordlist to see if misspelled words turned up
	if ( system("test -s " wordlist ) ) {
	# if wordlist is empty (or spell command failed), exit
		print "No misspelled words found."
		system("rm " spellsource " " wordlist)
		exit
	}	

# assign wordlist file to ARGV[1] so that awk will read it.	
	ARGV[1] = wordlist

# display list of user responses 
	responseList = "Responses: \n\tChange each occurrence," 
	responseList = responseList "\n\tGlobal change," 
	responseList = responseList "\n\tAdd to Dict,"  
	responseList = responseList "\n\tHelp," 
	responseList = responseList "\n\tQuit" 
	responseList = responseList "\n\tCR to ignore: "
	printf("%s", responseList)

} # end of BEGIN procedure</pre></blockquote>

<p>The first part of the <b class="emphasis-bold">BEGIN</b> procedure processes the
command-line arguments.  It checks that <b class="emphasis-bold">ARGC</b> is
greater than one for the program to continue.  That is, in addition to
"nawk," a filename must be specified.  This file specifies the
document that <b class="emphasis-bold">spell</b> will analyze.  An optional
dictionary filename can be specified as the second argument.  The
<b class="emphasis-bold">spellcheck</b> script follows the command-line
interface of <b class="emphasis-bold">spell</b>, although none of the obscure
<b class="emphasis-bold">spell</b> options can be invoked from the
<b class="emphasis-bold">spellcheck</b> command line.  If a dictionary is not
specified, then the script executes a <b class="emphasis-bold">test</b> command
to see if the file <em class="filename">dict</em> exists.  If it does, the
prompt asks the user to approve using it as the dictionary file.</p>

<p>Once we've processed the arguments, we delete them from the
<b class="emphasis-bold">ARGV</b> array.  This is to prevent their being
interpreted as filename arguments.</p>

<p>The second part of the <b class="emphasis-bold">BEGIN</b> procedure sets up some
temporary files, because we do not want to work directly with the
original file.  At the end of the program, the user will have the
option of saving or discarding the work done in the temporary files.
The temporary files all begin with "sp_" and are removed before
exiting the program.</p>

<p>The third part of the procedure executes <b class="emphasis-bold">spell</b> and
creates a word list.  We test to see that this file exists and that
there is something in it before proceeding.  If for some reason the
<b class="emphasis-bold">spell</b> program fails, or there are no misspelled
words found, the <b class="emphasis-bold">wordlist</b> file will be empty.  If
this file does exist, then we assign the filename as the second
element in the <b class="emphasis-bold">ARGV</b> array.  This is an unusual but
valid way of supplying the name of the input file that awk will
process.  Note that this file did not exist when awk was invoked!  The
name of the document file, which was specified on the command line, is
no longer in the <b class="emphasis-bold">ARGV</b> array.  We will not read the
document file using awk's main input loop.  Instead, a
<b class="emphasis-bold">while</b> loop reads the file to find and correct
misspelled words.</p>

<p>The last task in the <b class="emphasis-bold">BEGIN</b> procedure is to define
and display a list of responses that the user can enter when a
misspelled word is displayed.  This list is displayed once at the
beginning of the program as well as when the user enters "Help" at the
main prompt.  Putting this list in a variable allows us to access it
from different points in the program, if necessary, without
maintaining duplicates.  The assignment of
<b class="emphasis-bold">responseList</b> could be done more simply, but the
long string would not be printable in this book.  (You can't break a
string over two lines.)</p>
</div>




<a name="sedawk-ch-12-sect-1.2" /><div class="sect2">
<h3 class="sect2">12.1.2. Main Procedure</h3>

<p>The main procedure is rather small, merely displaying a misspelled
word and prompting the user to enter an appropriate response.
This procedure is executed for each misspelled word.</p>

<p>One reason this procedure is short is because the central
action--correcting a misspelled word--is handled by two
larger user-defined functions, which we'll see in the last section.</p>

<blockquote><pre class="code"># main procedure, executed for each line in wordlist.
#	Purpose is to show misspelled word and prompt user
#	for appropriate action.

{
# assign word to misspelling
	misspelling = $1 
	response = 1
	++word

# print misspelling and prompt for response
	while (response !~ /(^[cCgGaAhHqQ])|^$/ ) {
		printf("\n%d - Found %s (C/G/A/H/Q/):", word, misspelling)
		getline response &lt; "-"
	}
# now process the user's response
# CR - carriage return ignores current word 
# Help
	if (response ~ /[Hh](elp)?/) {
	# Display list of responses and prompt again.
		printf("%s", responseList)
		printf("\n%d - Found %s (C/G/A/Q/):", word, misspelling)
		getline response &lt; "-"
	}
# Quit
	if (response ~ /[Qq](uit)?/) exit
# Add to dictionary
	if ( response ~ /[Aa](dd)?/) { 
		dict[++dictEntry] = misspelling
	}
# Change each occurrence
	if ( response ~ /[cC](hange)?/) {
	# read each line of the file we are correcting
		newspelling = ""; changes = ""
		while( (getline &lt; spellsource) &gt; 0){
		# call function to show line with misspelled word
		# and prompt user to make each correction 
			make_change($0)
		# all lines go to temp output file
			print &gt; spellout
		}	
	# all lines have been read 
	# close temp input and temp output file
		close(spellout)
		close(spellsource)
	# if change was made
		if (changes){ 
		# show changed lines
			for (j = 1; j &lt;= changes; ++j)
				print changedLines[j]
			printf ("%d lines changed. ", changes) 
		# function to confirm before saving changes
			confirm_changes()
		}
	}
# Globally change
	if ( response ~ /[gG](lobal)?/) {
	# call function to prompt for correction
	# and display each line that is changed.
	# Ask user to approve all changes before saving.
		make_global_change()
	}	
} # end of Main procedure</pre></blockquote>

<p>The first field of each input line from <b class="emphasis-bold">wordlist</b>
contains the misspelled word and it is assigned to
<b class="emphasis-bold">misspelling</b>.  We construct a
<b class="emphasis-bold">while</b> loop inside which we display the misspelled
word to the user and prompt for a response.  Look closely at the
regular expression that tests the value of
<b class="emphasis-bold">response</b>:</p>

<blockquote><pre class="code">while (response !~ /(^[cCgGaAhHqQ])|^$/)</pre></blockquote>

<p>The user can only get out of this loop by entering any of the
specified letters <em class="emphasis">or</em> by entering a carriage
return--an empty line.  The use of regular expressions for
testing user input helps tremendously in writing a simple but flexible
program.  The user can enter a single letter "c" in lower- or uppercase
or a word beginning with "c" such as "Change."</p>

<p>The rest of the main procedure consists of conditional statements that
test for a specific response and perform a corresponding action.  The
first response is "help," which displays the list of responses again
and then redisplays the prompt.</p>

<p>The next response is "quit."  The action associated with quit is
<b class="emphasis-bold">exit</b>, which drops out of the main procedure and
goes to the <b class="emphasis-bold">END</b> procedure.</p>

<p>If the user enters "add," the misspelled word is put in the array
<b class="emphasis-bold">dict</b> and will be added as an exception in a local
dictionary.</p>

<p>The "Change" and "Global" responses cause the program's real work to
begin.  It's important to understand how they differ.  When the user
enters "c" or "change," the first occurrence of the misspelled word in
the document is displayed.  Then the user is prompted to make the
change.  This happens for each occurrence in the document.  When the
user enters "g" or "global," the user is prompted to make the change
right away, and all the changes are made at once without prompting the
user to confirm each one.  This work is largely handled by two
functions, <b class="emphasis-bold">make_change()</b> and
<b class="emphasis-bold">make_global_change()</b>, which we'll look at
in the last section.  These are all the valid responses, except one.
A carriage return means to ignore the misspelled word and get the next
word in the list.  This is the default action of the main input loop,
so no conditional need be set up for it.</p>
</div>




<a name="sedawk-ch-12-sect-1.3" /><div class="sect2">
<h3 class="sect2">12.1.3. END Procedure</h3>

<p>The <b class="emphasis-bold">END</b> procedure, of course, is 
reached in one of the following circumstances:</p>

<ul><li><p>The <b class="emphasis-bold">spell</b> command failed or did not turn up any misspellings.</p></li><li><p>The list of misspelled words is exhausted.</p></li><li><p>The user has entered "quit" at a prompt.</p></li></ul><p>The purpose of the <b class="emphasis-bold">END</b> procedure is to allow the
user to confirm any permanent change to the document or the
dictionary.</p>

<blockquote><pre class="code"># END procedure makes changes permanent.
# It overwrites the original file, and adds words
# to the dictionary.
# It also removes the temporary files.

END {
# if we got here after reading only one record, 
# no changes were made, so exit.
	if (NR &lt;= 1) exit
# user must confirm saving corrections to file
	while (saveAnswer !~ /([yY](es)?)|([nN]o?)/ ) {
		printf "Save corrections in %s (y/n)? ", SPELLFILE
		getline saveAnswer &lt; "-"
	}
# if answer is yes then mv temporary input file to SPELLFILE
# save old SPELLFILE, just in case
	if (saveAnswer ~ /^[yY]/) {
		system("cp " SPELLFILE " " SPELLFILE ".orig")
		system("mv " spellsource " " SPELLFILE)
	}
# if answer is no then rm temporary input file
	if (saveAnswer ~ /^[nN]/)
		system("rm " spellsource) 

# if words have been added to dictionary array, then prompt
# to confirm saving in current dictionary. 
	if (dictEntry) {
		printf "Make changes to dictionary (y/n)? "
		getline response &lt; "-"
		if (response ~ /^[yY]/){
		# if no dictionary defined, then use "dict"
			if (! SPELLDICT) SPELLDICT = "dict"
		
		# loop through array and append words to dictionary
			sub(/^\+/, "", SPELLDICT)
			for ( item in dict )
				print dict[item] &gt;&gt; SPELLDICT
			close(SPELLDICT)
		# sort dictionary file 
			system("sort " SPELLDICT "&gt; tmp_dict")
			system("mv " "tmp_dict " SPELLDICT)
		}
	}
# remove word list
	system("rm sp_wordlist")
} # end of END procedure</pre></blockquote>

<p>The <b class="emphasis-bold">END</b> procedure begins with a conditional
statement that tests that the number of records is less than or equal
to 1.  This occurs when the <b class="emphasis-bold">spell</b> program does not
generate a word list or when the user enters "quit" after seeing just
the first record.  If so, the <b class="emphasis-bold">END</b> procedure is
exited as there is no work to save.</p>

<p>Next, we create a <b class="emphasis-bold">while</b> loop to ask the user about
saving the changes made to the document.  It requires the user to
respond "y" or "n" to the prompt.  If the answer is "y," the temporary
input file replaces the original document file.  If the answer is "n,"
the temporary file is removed.  No other responses are accepted.</p>

<p>Next, we test to see if the <b class="emphasis-bold">dict</b> array has
something in it.  Its elements are the words to be added to the
dictionary.  If the user approves adding them to the dictionary, these
words are appended to the current dictionary, as defined above, or if
not, to a local <em class="filename">dict</em> file.  Because the
dictionary must be sorted to be read by <b class="emphasis-bold">spell</b>, a
<b class="emphasis-bold">sort</b> command is executed with the output sent to a
temporary file that is afterwards copied over the original file.</p>
</div>




<a name="sedawk-ch-12-sect-1.4" /><div class="sect2">
<h3 class="sect2">12.1.4. Supporting Functions</h3>

<p>There are three supporting functions, two of which are large and do
the bulk of the work of making changes in the document.  The third
function supports that work by confirming that the user wants to save
the changes that were made.</p>

<p>When the user wants to "Change each occurrence" in the document, the
main procedure has a <b class="emphasis-bold">while</b> loop that reads the
document one line at a time.  (This line becomes $0.) It calls the
<b class="emphasis-bold">make_change()</b> function to see if the line contains
the misspelled word.  If it does, the line is displayed and the user
is prompted to enter the correct spelling of the word.</p>

<blockquote><pre class="code"># make_change -- prompt user to correct misspelling 
#		 for current input line.  Calls itself
# 		 to find other occurrences in string.
# 	stringToChange -- initially $0; then unmatched substring of $0
# 	len -- length from beginning of $0 to end of matched string 
# Assumes that misspelling is defined. 

function make_change (stringToChange, len,	# parameters
	line, OKmakechange, printstring, carets)	# locals
{
# match misspelling in stringToChange; otherwise do nothing 
  if ( match(stringToChange, misspelling) ) {
  # Display matched line 
	printstring = $0
	gsub(/\t/, " ", printstring)
	print printstring
	carets = "^"
	for (i = 1; i &lt; RLENGTH; ++i)
		carets = carets "^"
	if (len)
		FMT = "%" len+RSTART+RLENGTH-2 "s\n"
	else
		FMT = "%" RSTART+RLENGTH-1 "s\n"
	printf(FMT, carets)

  # Prompt user for correction, if not already defined
	if (! newspelling) {
		printf "Change to:"
		getline newspelling &lt; "-"
	}
  # A carriage return falls through
  # If user enters correction, confirm  
	while (newspelling &amp;&amp; ! OKmakechange) {
		printf ("Change %s to %s? (y/n):", misspelling, newspelling)
		getline OKmakechange &lt; "-"
		madechg = ""
	# test response
		if (OKmakechange ~ /[yY](es)?/ ) {
		# make change (first occurrence only)
			madechg = sub(misspelling, newspelling, stringToChange)
		}
		else if ( OKmakechange ~ /[nN]o?/ ) {
			# offer chance to re-enter correction 
			printf "Change to:"
			getline newspelling &lt; "-"
			OKmakechange = ""
		}
	} # end of while loop

   # if len, we are working with substring of $0
	if (len) {
	# assemble it
		line = substr($0,1,len-1)
		$0 = line stringToChange
	}
	else {
		$0 = stringToChange
		if (madechg) ++changes
	}

   # put changed line in array for display
	if (madechg) 
		changedLines[changes] = "&gt;" $0

   # create substring so we can try to match other occurrences
	len += RSTART + RLENGTH
	part1 = substr($0, 1, len-1)
	part2 = substr($0, len)
   # calls itself to see if misspelling is found in remaining part 
	make_change(part2, len) 

  } # end of if

} # end of make_change()</pre></blockquote>

<p>If the misspelled word is not found in the current input line, nothing
is done.  If it is found, this function shows the line containing the
misspelling and asks the user if it should be corrected.

Underneath the display of the current line is a row of carets
that indicates the misspelled word.</p>

<blockquote><pre class="code">Two other utlitities that are found on the UNIX system
          ^^^^^^^^^^</pre></blockquote>

<p>The current input line is copied to <b class="emphasis-bold">printstring</b>
because it is necessary to change the line for display purposes.  If
the line contains any tabs, each tab in this copy of the line is
temporarily replaced by a single space.  This solves a problem of
aligning the carets when tabs were present.  (A tab counts as a single
character when determining the length of a line but actually occupies
greater space when displayed, usually five to eight characters long.)</p>

<p>After displaying the line, the function prompts the user to enter a
correction.  It then follows up by displaying what the user has
entered and asks for confirmation.  If the correction is approved, the
<b class="emphasis-bold">sub()</b> function is called to make the
change.  If not approved, the user is given another chance to enter
the correct word.</p>

<p>Remember that the <b class="emphasis-bold">sub()</b> function only
changes the first occurrence on a line.  The
<b class="emphasis-bold">gsub()</b> function changes all occurrences on
a line, but we want to allow the user to confirm
<em class="emphasis">each</em> change.  Therefore, we have to try to match
the misspelled word against the remaining part of the line.  And we
have to be able to match the next occurrence regardless of whether or
not the first occurrence was changed.</p>

<p>To do this, <b class="emphasis-bold">make_change()</b> is designed as a
recursive function; it calls itself to look for additional occurrences
on the same line.  In other words, the first time
<b class="emphasis-bold">make_change()</b> is called, it looks at all of
$0 and matches the first misspelled word on that line.  Then it splits
the line into two parts--the first part contains the characters
up to the end of the first occurrence and the second part contains the
characters that immediately follow up to the end of the line.  Then it
calls itself to try and match the misspelled word in the second part.
When called recursively, the function takes two arguments.</p>

<blockquote><pre class="code">make_change(part2, len)</pre></blockquote>

<p>The first is the string to be changed, which is initially $0 when
called from the main procedure but each time thereafter is the
remaining part of $0.  The second argument is <b class="emphasis-bold">len</b>
or the length of the first part, which we use to extract the substring
and reassemble the two parts at the end.</p>

<p>The <b class="emphasis-bold">make_change()</b> function also collects an
array of lines that were changed.</p>

<blockquote><pre class="code"># put changed line in array for display
        if (madechg)
                changedLines[changes] = "&gt;" $0</pre></blockquote>

<p>The variable <b class="emphasis-bold">madechg</b> will have a value if the
<b class="emphasis-bold">sub()</b> function was successful.  $0 (the two
parts have been rejoined) is assigned to an element of the array.
When all of the lines of the document have been read, the main
procedure loops through this array to display all the changed lines.
Then it calls the <b class="emphasis-bold">confirm_changes()</b>
function to ask if these changes should be saved.  It copies the
temporary output file over the temporary input file, keeping intact
the corrections made for the current misspelled word.</p>

<p>If a user decides to make a "Global change," the
<b class="emphasis-bold">make_global_change()</b> function is called to
do it.  This function is similar to the
<b class="emphasis-bold">make_change()</b> function, but is simpler
because we can make the change globally on each line.</p>

<blockquote><pre class="code"># make_global_change --
#		prompt user to correct misspelling 
#		for all lines globally.  
#		Has no arguments
# Assumes that misspelling is defined. 

function make_global_change(    newspelling, OKmakechange, changes)
{
# prompt user to correct misspelled word
   printf "Globally change to:"
   getline newspelling &lt; "-"

# carriage return falls through
# if there is an answer, confirm 
   while (newspelling &amp;&amp; ! OKmakechange) {
		printf ("Globally change %s to %s? (y/n):", misspelling,
				newspelling)
		getline OKmakechange &lt; "-"
	# test response and make change
		if (OKmakechange ~ /[yY](es)?/ ) {
		# open file, read all lines 
			while( (getline &lt; spellsource) &gt; 0){
			# if match is found, make change using gsub
			# and print each changed line.
				if ($0 ~ misspelling) {
					madechg = gsub(misspelling, newspelling)
					print "&gt;", $0
					changes += 1  # counter for line changes
				}
			# write all lines to temp output file
				print &gt; spellout
			} # end of while loop for reading file

		# close temporary files
			close(spellout)
			close(spellsource)
		# report the number of changes	
			printf ("%d lines changed. ", changes) 

		# function to confirm before saving changes
			confirm_changes()
		} # end of if (OKmakechange ~ y) 

	# if correction not confirmed,  prompt for new word
		else if ( OKmakechange ~ /[nN]o?/ ){
			printf "Globally change to:"
			getline newspelling &lt; "-"
			OKmakechange = ""
		}

  } # end of while loop for prompting user for correction

} # end of make_global_change()</pre></blockquote>

<p>This function prompts the user to enter a correction.  A
<b class="emphasis-bold">while</b> loop is set up to read all the lines of the
document and apply the <b class="emphasis-bold">gsub()</b> function to
make the changes.  The main difference is that all the changes are
made at once--the user is not prompted to confirm them.  When all
lines have been read, the function displays the lines that were
changed and calls <b class="emphasis-bold">confirm_changes()</b> to get
the user to approve this batch of changes before saving them.</p>

<p>The <b class="emphasis-bold">confirm_changes()</b> function is a routine
called to get approval of the changes made when the
<b class="emphasis-bold">make_change()</b> or
<b class="emphasis-bold">make_global_change()</b> function is called.</p>

<blockquote><pre class="code"># confirm_changes --  
#		confirm before saving changes

function confirm_changes(  savechanges) {
# prompt to confirm saving changes
	while (! savechanges ) {
		printf ("Save changes? (y/n)")
		getline savechanges &lt; "-"
	}
# if confirmed, mv output to input
	if (savechanges ~ /[yY](es)?/)
		system("mv " spellout " " spellsource) 
}</pre></blockquote>

<p>The reason for creating this function is to prevent the duplication of
code.  Its purpose is simply to require the user to acknowledge the
changes before replacing the old version of the document file
(<b class="emphasis-bold">spellsource</b>) with the new version
(<b class="emphasis-bold">spellout</b>).</p>
</div>




<a name="sedawk-ch-12-sect-1.5" /><div class="sect2">
<h3 class="sect2">12.1.5. The spellcheck Shell Script</h3>

<p>To make it easy to invoke this awk script, we create the
<b class="emphasis-bold">spellcheck</b> shell script (say
<em class="emphasis">that</em> three times fast).  It contains the following
lines:</p>

<blockquote><pre class="code">AWKLIB=/usr/local/awklib
nawk -f $AWKLIB/spellcheck.awk $*</pre></blockquote>

<p>This script sets up a shell variable <b class="emphasis-bold">AWKLIB</b> that
specifies the location of the <b class="emphasis-bold">spellcheck.awk</b>
script. The symbol "$*" expands to all command-line parameters
following the name of the script.  These parameters are then available
to awk.</p>

<p>One of the interesting things about this spell checker
is how little is done in the shell script.<a href="#FOOTNOTE-85">[85]</a>

All of the work is done in the awk programming language, including
executing 10 UNIX commands.  We're using a consistent syntax and the
same constructs by doing it all in awk.  When you have to do some of
your work in the shell and some in awk, it can get confusing.  For
instance, you have to remember the differences in the syntax of
<b class="emphasis-bold">if</b> conditionals and how to reference variables.
Modern versions of awk provide a true alternative to the shell for
executing commands and interacting with a user.
The full listing for <b class="emphasis-bold">spellcheck.awk</b> is found in
<a href="appc_01.htm">Appendix C, "Supplement for Chapter 12"</a>.</p><blockquote class="footnote">

<a name="FOOTNOTE-85" /><p> [85]<em class="citetitle">UNIX Text Processing</em> (Dougherty and O'Reilly,
Howard W.  Sams, 1987) presents a sed-based spell checker that relies
heavily upon the shell.  It is interesting to compare the two
versions.</p>

</blockquote>
</div>




<a name="IXT-12-266376" />
<a name="IXT-12-266377" />
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch12_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.4. Epilogue</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">12.2. Generating a Formatted Index</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
      </map>

</body></html>