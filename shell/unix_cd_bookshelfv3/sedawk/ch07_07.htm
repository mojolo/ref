<html><head><title>System Variables (sed & awk, Second Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Dale Dougherty and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-225-5" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="sed &amp; awk, Second Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="sed &amp; awk" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="sed &amp; awk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">7.7. System Variables</h2>

<p>
<a name="ch07.sys1" />
<a name="ch07.sys2" />
<a name="ch07.sys3" />
<a name="ch07.sys4" />
There are a number of system or built-in variables defined by awk.
Awk has two types of system variables.  The first type defines values
whose default can be changed, such as the default field and record
separators.  The second type defines values that can be used in
reports or processing, such as the number of fields found in the
current record, the count of the current record, and others.  These
are <em class="emphasis">automatically</em> updated by awk; for example, the
current record number and input file name.</p>

<p>
<a name="IXT-7-265913" />
<a name="IXT-7-265914" />
There are a set of default values that affect the recognition of
records and fields on input and their display on output.  The system
variable <b class="emphasis-bold">FS</b> defines the field
separator.  By default, its value is a single space, which tells awk
that any number of spaces and/or tabs separate fields.  <b class="emphasis-bold">FS</b> can also be set to any single character, or to
a regular expression.  Earlier, we changed the field separator to a
comma in order to read a list of names and addresses.</p>

<p>
<a name="IXT-7-265915" />
<a name="IXT-7-265916" />
The output equivalent of <b class="emphasis-bold">FS</b> is
<b class="emphasis-bold">OFS</b>, which is a space by default.
We'll see an example of redefining <b class="emphasis-bold">OFS</b>
shortly.</p>

<p>
<a name="IXT-7-265917" />
<a name="IXT-7-265918" />
<a name="IXT-7-265919" />
Awk defines the variable <b class="emphasis-bold">NF</b> to be the number of
fields for the current input record.
Changing the value of <b class="emphasis-bold">NF</b> actually has side effects.
The interactions that occur when <b class="emphasis-bold">$0</b>, 
the fields, and <b class="emphasis-bold">NF</b>
are changed is a murky area, particularly when <b class="emphasis-bold">NF</b> 
is decreased.<a href="#FOOTNOTE-46">[46]</a>
Increasing it creates new (empty) fields, and rebuilds <b class="emphasis-bold">$0</b>,
with the fields separated by the value of <b class="emphasis-bold">OFS</b>.
In the case where <b class="emphasis-bold">NF</b> is decreased, gawk and mawk rebuild the record,
and the fields that were above the new value of <b class="emphasis-bold">NF</b> are set equal
to the empty string.
The Bell Labs awk does not change <b class="emphasis-bold">$0</b>.</p><blockquote class="footnote">

<a name="FOOTNOTE-46" /><p> [46]Unfortunately, the POSIX standard isn't as helpful here as it should be.</p>

</blockquote>

<p>
<a name="IXT-7-265920" />
<a name="IXT-7-265921" />
Awk also defines <b class="emphasis-bold">RS</b>, the record separator,
as a newline.
<b class="emphasis-bold">RS</b> is a bit unusual; it's the only variable where awk only
pays attention to the first character of the value.</p>

<p>
<a name="IXT-7-265922" />
<a name="IXT-7-265923" />
The output equivalent to <b class="emphasis-bold">RS</b> is
<b class="emphasis-bold">ORS</b>, which is also a newline by
default.  In the next section, "Working with Multiline Records," we'll show
how to change the default record separator.  Awk sets the variable
<a name="IXT-7-265924" />
<a name="IXT-7-265925" />
<b class="emphasis-bold">NR</b> to the number of the current input
record.  It can be used to number records in a list.  The variable
<b class="emphasis-bold">FILENAME</b> contains the name of the
current input file.  The variable <b class="emphasis-bold">FNR</b>
is useful when multiple input files are used as it provides the number
of the current record relative to the current input file.
<a name="IXT-7-265926" /></p>

<p>
<a name="IXT-7-265927" />
<a name="IXT-7-265928" />
Typically, the field and record separators are defined in the
<b class="emphasis-bold">BEGIN</b> procedure because you want these values set
before the first input line is read.  However, you can redefine these
values anywhere in the script.  In POSIX awk, assigning a new value to
<b class="emphasis-bold">FS</b> has no effect on the current input
line; it only affects the next input line.</p>

<blockquote><b>NOTE:</b> 
Prior to the June 1996 release of Bell Labs awk, versions of awk for UNIX did not
follow the POSIX standard in this regard.  In those versions, if you
have not yet referenced an individual field, and you set the field
separator to a different value, the current input line is split into
fields using the new value of <b class="emphasis-bold">FS</b>.  Thus, you should test how your awk
behaves, and if at all possible, upgrade to a correct version of awk.</p>
</blockquote>

<p>
<a name="IXT-7-265929" />
<a name="IXT-7-265930" />
<a name="IXT-7-265931" />
<a name="IXT-7-265932" />
Finally, POSIX added a new variable, <b class="emphasis-bold">CONVFMT</b>, which is used
to control number-to-string conversions. For example,</p>

<blockquote><pre class="code">str = (5.5 + 3.2) " is a nice value"</pre></blockquote>

<p>Here, the result of the numeric expression <b class="emphasis-bold">5.5 +
3.2</b> (which is 8.7) must be converted to a string before it
can be used in the string concatenation.  <b class="emphasis-bold">CONVFMT</b> controls this conversion. Its default
value is <b class="emphasis-bold">"%.6g"</b>, which is a
<b class="emphasis-bold">printf</b>-style format specification for floating-point 
numbers.  Changing <b class="emphasis-bold">CONVFMT</b>
to <b class="emphasis-bold">"%d"</b>,
for instance, would cause all
numbers to be converted to strings as integers.  Prior to the POSIX
standard, awk used <b class="emphasis-bold">OFMT</b> for this purpose.
<a name="IXT-7-265933" />
<b class="emphasis-bold">OFMT</b> does the same job, but
controlling the conversion of numeric values when using the
<b class="emphasis-bold">print</b> statement.  The POSIX committee wanted to
separate the tasks of output conversion from simple string conversion.
Note that numbers that are integers are always converted to strings
as integers, no matter what the values of <b class="emphasis-bold">CONVFMT</b> and <b class="emphasis-bold">OFMT</b>
may be.</p>

<p>Now let's look at some examples, beginning with the
<b class="emphasis-bold">NR</b> variable.
Here's a revised <b class="emphasis-bold">print</b> statement for the script that calculates
student averages:
<a name="IXT-7-265934" />
<a name="IXT-7-265935" /></p>

<blockquote><pre class="code">print NR ".", $1, avg</pre></blockquote>

<p>Running the revised script produces the following output:</p>

<blockquote><pre class="code">1. john 87.4
2. andrea 86
3. jasper 85.6</pre></blockquote>

<p>After the last line of input is read, <b class="emphasis-bold">NR</b> contains
the number of input records that were read.
It can be used in the <b class="emphasis-bold">END</b> action to provide
a report summary.
Here's a revised version of the <b class="emphasis-bold">phonelist.awk</b>
script.</p>

<blockquote><pre class="code"># phonelist.awk -- print name and phone number. 
# input file -- name, company, street, city, state and zip, phone
BEGIN { FS = ", *" }  # comma-delimited fields
{ print $1 ", " $6 } 
END { 	print ""
	print NR, "records processed." }</pre></blockquote>

<p>This program changes the default field separator
and uses <b class="emphasis-bold">NR</b> to print the total number of records
printed.
Note that this program uses a regular expression for the value of
<b class="emphasis-bold">FS</b>.
This program produces the following output:</p>

<blockquote><pre class="code">John Robinson, 696-0987
Phyllis Chapman, 879-0900

2 records processed.</pre></blockquote>


<p>
<a name="IXT-7-265936" />
<a name="IXT-7-265937" />
The output field separator (<b class="emphasis-bold">OFS</b>)
is generated when a comma is used
to separate the arguments in a <b class="emphasis-bold">print</b> statement.  
You may have wondered what effect the comma has in the following
expression:</p>

<blockquote><pre class="code">print NR ".", $1, avg</pre></blockquote>

<p>By default, the comma causes a space (the default value of <b class="emphasis-bold">OFS</b>)
to be output.  For instance, you could redefine
<b class="emphasis-bold">OFS</b> to be a tab in a <b class="emphasis-bold">BEGIN</b> action. 
Then the preceding <b class="emphasis-bold">print</b> statement would produce
the following output:</p>

<blockquote><pre class="code">1.      john    87.4
2.      andrea  86
3.      jasper  85.6</pre></blockquote>

<p>This is especially useful if the input consists of tab-separated
fields and you want to generate the same kind of output.
<b class="emphasis-bold">OFS</b> can be redefined to be a sequence of characters,
such as a comma followed by a space.</p>

<p>
<a name="IXT-7-265938" />
<a name="IXT-7-265939" />
<a name="IXT-7-265940" />
Another commonly used system variable is
<b class="emphasis-bold">NF</b>, which is set to
the number of fields for the current record. 
As we'll see in the next section, you can use
<b class="emphasis-bold">NF</b> to check that a record has the 
same number of fields that you expect.
You can also use <b class="emphasis-bold">NF</b> to reference
the last field of each record.  Using the "$"
field operator and <b class="emphasis-bold">NF</b> produces
that reference.  If there are six fields,
then "$NF" is the same as "$6."
Given a list of names, such as the following:</p>

<blockquote><pre class="code">John Kennedy
Lyndon B. Johnson
Richard Milhouse Nixon
Gerald R. Ford
Jimmy Carter
Ronald Reagan
George Bush
Bill Clinton</pre></blockquote>

<p>you will note that the last name is not the same
field number for each record.
You could print the last name of each President
using "$NF."<a href="#FOOTNOTE-47">[47]</a></p><blockquote class="footnote">

<a name="FOOTNOTE-47" /><p> [47]This scheme breaks down for Martin Van Buren; fortunately,
our list contains only recent U.S. presidents.</p>

</blockquote>

<p>These are the basic system variables, the ones
most commonly used.  There are more
of them, as listed in <a href="appb_01.htm">Appendix B, "Quick Reference
for awk"</a>, and we'll introduce
new system variables as needed in 
the chapters that follow.</p>

<a name="sedawk-ch-7-sect-7.1" /><div class="sect2">
<h3 class="sect2">7.7.1. Working with Multiline Records</h3>

<p>
<a name="IXT-7-265941" />
<a name="IXT-7-265942" />
All of our examples have used input files whose records consisted
of a single line.  In this section, we show how to read a record
where each field consists of a single line.</p>

<p>Earlier, we looked at an example of processing a file of names and
addresses.  Let's suppose that the same data is stored on file
in block format.  
Instead of having all the information
on one line, the person's name is on one line, followed by the
company's name on the next line and so on. 
Here's a sample record:</p>

<blockquote><pre class="code">John Robinson
Koren Inc.
978 Commonwealth Ave.
Boston
MA 01760
696-0987</pre></blockquote>

<p>This record has six fields.
A blank line separates each record.</p>

<p>To process this data,
we can specify a multiline record by defining
the field separator to be a newline, represented as "\n",
and set the record
separator to the empty string, which stands for a blank line.</p>

<blockquote><pre class="code">BEGIN { FS = "\n"; RS = "" }</pre></blockquote>

<p>We can print the first and last fields using the following
script:</p>

<blockquote><pre class="code"># block.awk - print first and last fields 
# $1 = name; $NF = phone number

BEGIN { FS = "\n"; RS = "" }

{ print $1, $NF }</pre></blockquote>

<p>Here's a sample run:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f block.awk phones.block</b></tt>
John Robinson 696-0987
Phyllis Chapman 879-0900
Jeffrey Willis 914-636-0000
Alice Gold (707) 724-0000
Bill Gold 1-707-724-0000</pre></blockquote>

<p>The two fields are printed on the same line because the default
output separator (<b class="emphasis-bold">OFS</b>) remains a single space.  If you want
the fields to be output on separate lines, change <b class="emphasis-bold">OFS</b>
to a newline.  While you're at it, you probably want to preserve
the blank line between records, so you must specify the output
record separator <b class="emphasis-bold">ORS</b> to be two newlines. 
<a name="IXT-7-265943" />
<a name="IXT-7-265944" /></p>

<blockquote><pre class="code">OFS = "\n"; ORS = "\n\n"</pre></blockquote>
</div>




<a name="sedawk-ch-7-sect-7.2" /><div class="sect2">
<h3 class="sect2">7.7.2. Balance the Checkbook</h3>

<p>This is a simple application that processes items in your
check register.  While not necessarily the easiest way to balance
the checkbook, it is amazing how quickly you can build
something useful with awk.</p>

<p>This program presumes you have entered in a file the
following information:</p>

<blockquote><pre class="code">1000
125	Market         -125.45
126	Hardware Store  -34.95
127	Video Store      -7.45
128	Book Store      -14.32
129	Gasoline        -16.10</pre></blockquote>

<p>The first line contains the beginning balance.
Each of the other lines represent information
from a single check:  the check number, a description
of where it was spent, and the amount of the check.
The three fields are separated by tabs.
Using negative amounts for checks allows positive amounts to
represent deposits.</p>

<p>The core task of the script is that it must get the beginning
balance and then deduct the amount of each check from that
balance.  We can provide detail lines 
for each check to compare against the check register.  
Finally, we can print the
ending balance.  Here it is:</p>

<blockquote><pre class="code"># checkbook.awk
BEGIN { FS = "\t" }

#1 Expect the first record to have the starting balance.
NR == 1 { print "Beginning Balance: \t" $1
	balance = $1
	next		# get next record and start over
}

#2 Apply to each check record, adding amount from balance.
{	print $1, $2, $3
	print balance += $3   # checks have negative amounts
}</pre></blockquote>

<p>Let's run this program and look at the results:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f checkbook.awk checkbook.test</b></tt>
Beginning Balance:      1000
125 Market -125.45
874.55
126 Hardware Store -34.95
839.6
127 Video Store -7.45
832.15
128 Book Store -14.32
817.83
129 Gasoline -16.10
801.73</pre></blockquote>

<p>The report is difficult to read, but later we will learn to fix the
format using the <b class="emphasis-bold">printf</b> statement.  What's
important is to confirm that the script is doing what we want.
Notice, also, that getting this far takes only a few minutes in awk.
In a programming language such as C, it would take you much longer to
write this program; for one thing, you might have many more lines of
code; and you'd be programming at a much lower level.  There are any
number of refinements that you'd want to make to this program to
improve it, and refining a program takes much longer.  The point is
that with awk, you are able to isolate and implement the basic
functionality quite easily.</p>
</div>




<a name="IXT-7-265945" />
<a name="IXT-7-265946" />
<a name="IXT-7-265947" />
<a name="IXT-7-265948" />


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_06.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_08.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.6. Expressions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7.8. Relational and Boolean Operators</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>