<html><head><title>Command Summary for awk (sed & awk, Second Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Dale Dougherty and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-225-5" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="sed &amp; awk, Second Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="sed &amp; awk" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="sed &amp; awk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appb_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">B.3. Command Summary for awk</h2>

<p>
<a name="b.awk2" />
<a name="b.awk3" />
The following alphabetical list of statements and functions includes
all that are available in POSIX awk, nawk, or gawk.  See 
<a href="ch11_01.htm">Chapter 11, "A Flock of awks"</a>, for extensions available in different
implementations.</p>

<dl>
<dt><b class="emphasis-bold">atan2()</b></i></dt><dd><b class="emphasis-bold">atan2</b>(<em class="emphasis">y</em></tt>, <em class="emphasis">x</em></tt>)</p>

<p>Returns the arctangent of
<em class="emphasis">y</em></tt>/<em class="emphasis">x</em></tt> in radians.</p></dd>


<dt><b class="emphasis-bold">break</b></i></dt><dd>Exit from a <b class="emphasis-bold">while</b>, <b class="emphasis-bold">for</b>, or
<b class="emphasis-bold">do</b> loop.</p></dd>


<dt><b class="emphasis-bold">close()</b></i></dt><dd><b class="emphasis-bold">close</b>(<em class="emphasis">filename-expr</em></tt>)</p>

<p><b class="emphasis-bold">close</b>(<em class="emphasis">command-expr</em></tt>)</p>

<p>In most implementations of awk, you can only have a limited number of
files and/or pipes open simultaneously.  Therefore, awk provides a
<b class="emphasis-bold">close()</b> function that allows you to close a
file or a pipe.  It takes as an argument the same expression that
opened the pipe or file.  This expression must be identical, character
by character, to the one that opened the file or pipe--even whitespace
is significant.</p></dd>


<dt><b class="emphasis-bold">continue</b></i></dt><dd>Begin next iteration of <b class="emphasis-bold">while</b>,
<b class="emphasis-bold">for</b>, or <b class="emphasis-bold">do</b> loop.</p></dd>


<dt><b class="emphasis-bold">cos()</b></i></dt><dd><b class="emphasis-bold">cos</b>(<em class="emphasis">x</em></tt>)</p>

<p>Return cosine of <em class="emphasis">x</em></tt> in radians.</p></dd>


<dt><b class="emphasis-bold">delete</b></i></dt><dd><b class="emphasis-bold">delete</b> <em class="emphasis">array</em></tt>[<em class="emphasis">element</em></tt>]</p>

<p>Delete element of an array.</p></dd>


<dt><b class="emphasis-bold">do</b></i></dt><dd><b class="emphasis-bold">do</b></p>

<p>&#160;<em class="emphasis">body</em></tt></p>

<p><b class="emphasis-bold">while</b> (<em class="emphasis">expr</em></tt>)</p>

<p>Looping statement.  Execute statements in
<em class="emphasis">body</em></tt> then evaluate
<em class="emphasis">expr</em></tt> and if true, execute
<em class="emphasis">body</em></tt> again.</p></dd>


<dt><b class="emphasis-bold">exit</b></i></dt><dd><b class="emphasis-bold">exit</b> [<em class="emphasis">expr</em></tt>]</p>

<p>Exit from script, reading no new input.  The <b class="emphasis-bold">END</b> rule,
if it exists, will be executed. An optional <em class="emphasis">expr</em>
becomes awk's return value.</p></dd>


<dt><b class="emphasis-bold">exp()</b></i></dt><dd><b class="emphasis-bold">exp</b>(<em class="emphasis">x</em></tt>)</p>

<p>Return exponential of <em class="emphasis">x</em></tt>
(<em class="emphasis">e</em></tt> ^ <em class="emphasis">x</em></tt>).</p></dd>


<dt><b class="emphasis-bold">for</b></i></dt><dd><b class="emphasis-bold">for</b> (<em class="emphasis">init-expr</em></tt>; <em class="emphasis">test-expr</em></tt>; <em class="emphasis">incr-expr</em></tt>) <em class="emphasis">statement</em></tt></p>

<p>C-style looping construct.  <em class="emphasis">init-expr</em>
assigns the initial value of the counter
variable. <em class="emphasis">test-expr</em> is a relational
expression that is evaluated each time before executing the
statement. When <em class="emphasis">test-expr</em> is false, the
loop is exited. <em class="emphasis">incr-expr</em> is used to
increment the counter variable after each pass.</p>

<p><b class="emphasis-bold">for</b> (<em class="emphasis">item</em> <b class="emphasis-bold">in</b> <em class="emphasis">array</em>) <em class="emphasis">statement</em></p>

<p>Special loop designed for reading associative arrays.  For each
element of the array, the <em class="emphasis">statement</em> is
executed; the element can be referenced by
<em class="emphasis">array</em>[<em class="emphasis">item</em>].</p></dd>


<dt><b class="emphasis-bold">getline</b></i></dt><dd>Read next line of input.</p>

<p><b class="emphasis-bold">getline</b> [<em class="emphasis">var</em></tt>] [&lt;<em class="emphasis">file</em></tt>]</p>

<p><em class="emphasis">command</em></tt> | <b class="emphasis-bold">getline</b> [<em class="emphasis">var</em></tt>]</p>

<p>The first form reads input from <em class="emphasis">file</em></tt> and the
second form reads the output of <em class="emphasis">command</em></tt>.  Both
forms read one line at a time, and each time the statement is executed
it gets the next line of input.  The line of input is assigned to $0
and it is parsed into fields, setting <b class="emphasis-bold">NF</b>,
<b class="emphasis-bold">NR</b>, and <b class="emphasis-bold">FNR</b>.  If
<em class="emphasis">var</em></tt> is specified, the result is assigned to
<em class="emphasis">var</em></tt> and the $0 is not changed.  Thus, if the
result is assigned to a variable, the current line does not change.
<b class="emphasis-bold">getline</b> is actually a function and it returns 1 if
it reads a record successfully, 0 if end-of-line is encountered, and
-1 if for some reason it is otherwise unsuccessful.</p></dd>


<dt><b class="emphasis-bold">gsub()</b></i></dt><dd><b class="emphasis-bold">gsub</b>(<em class="emphasis">r</em></tt>, <em class="emphasis">s</em></tt>, <em class="emphasis">t</em></tt>)</p>

<p>Globally substitute <em class="emphasis">s</em> for each match of the
regular expression <em class="emphasis">r</em> in the string
<em class="emphasis">t</em>.  Return the number of substitutions.  If
<em class="emphasis">t</em> is not supplied, defaults to $0.</p></dd>


<dt><b class="emphasis-bold">if</b></i></dt><dd><b class="emphasis-bold">if</b> (<em class="emphasis">expr</em></tt>) <em class="emphasis">statement1</em></tt></p>

<p>[ <b class="emphasis-bold">else</b> <em class="emphasis">statement2</em></tt> ]</p>

<p>Conditional statement.  Evaluate <em class="emphasis">expr</em></tt> and,
if true, execute <em class="emphasis">statement1</em></tt>; if
<b class="emphasis-bold">else</b> clause is supplied, execute
<em class="emphasis">statement2</em></tt> if
<em class="emphasis">expr</em></tt> is false.</p></dd>


<dt><b class="emphasis-bold">index()</b></i></dt><dd><b class="emphasis-bold">index</b>(<em class="emphasis">str</em></tt>, <em class="emphasis">substr</em></tt>)</p>

<p>Return position (starting at 1) of substring in string.</p></dd>


<dt><b class="emphasis-bold">int()</b></i></dt><dd><b class="emphasis-bold">int</b>(<em class="emphasis">x</em></tt>)</p>

<p>Return integer value of <em class="emphasis">x</em></tt> by truncating any
digits following a decimal point.</p></dd>


<dt><b class="emphasis-bold">length()</b></i></dt><dd><b class="emphasis-bold">length</b>(<em class="emphasis">str</em></tt>)</p>

<p>Return length of string, or the length of $0 if no argument.</p></dd>


<dt><b class="emphasis-bold">log()</b></i></dt><dd><b class="emphasis-bold">log</b>(<em class="emphasis">x</em></tt>)</p>

<p>Return natural logarithm (base <em class="emphasis">e</em></tt>) of
<em class="emphasis">x</em></tt>.</p></dd>


<dt><b class="emphasis-bold">match()</b></i></dt><dd><b class="emphasis-bold">match</b>(<em class="emphasis">s</em></tt>, <em class="emphasis">r</em></tt>)</p>

<p>Function that matches the pattern, specified by the regular expression
<em class="emphasis">r</em>, in the string
<em class="emphasis">s</em> and returns either the position in
<em class="emphasis">s</em> where the match begins, or 0 if no
occurrences are found.  Sets the values of <b class="emphasis-bold">RSTART</b>
and <b class="emphasis-bold">RLENGTH</b> to the start and length of the match,
respectively.</p></dd>


<dt><b class="emphasis-bold">next</b></i></dt><dd>Read next input line and begin executing script at first rule.</p></dd>


<dt><b class="emphasis-bold">print</b></i></dt><dd><b class="emphasis-bold">print</b> [ <em class="emphasis">output-expr</em></tt> ] [ <em class="emphasis">dest-expr</em></tt> ]</p>

<p>Evaluate the <em class="emphasis">output-expr</em> and direct it to
standard output followed by the value of <b class="emphasis-bold">ORS</b>.  Each
<em class="emphasis">output-expr</em> is separated by the value of
<b class="emphasis-bold">OFS</b>.  <em class="emphasis">dest-expr</em> is an
optional expression that directs the output to a file or pipe.  "&gt;
<em class="emphasis">file</em>" directs the output to a file,
overwriting its previous contents.  "&gt;&gt;
<em class="emphasis">file</em>" appends the output to a file,
preserving its previous contents.  In both of these cases, the file will be
created if it does not already exist.  "| <em class="emphasis">command</em>"
directs the output as the input to a system command.</p></dd>


<dt><b class="emphasis-bold">printf</b></i></dt><dd><b class="emphasis-bold">printf</b> (<em class="emphasis">format-expr</em></tt> [, <em class="emphasis">expr-list</em></tt> ]) [ <em class="emphasis">dest-expr</em></tt> ]</p>

<p>An alternative output statement borrowed from the C language.  It has
the ability to produce formatted output.  It can also be used to
output data without automatically producing a newline.
<em class="emphasis">format-expr</em></tt> is a string of format
specifications and constants; see next section for a list of format
specifiers.  <em class="emphasis">expr-list</em></tt> is a list of
arguments corresponding to format specifiers.  See the
<b class="emphasis-bold">print</b> statement for a description of
<em class="emphasis">dest-expr</em></tt>.</p></dd>


<dt><b class="emphasis-bold">rand()</b></i></dt><dd><b class="emphasis-bold">rand()</b></p>

<p>Generate a random number between 0 and 1.  This function returns the
same series of numbers each time the script is executed, unless the
random number generator is seeded using the
<b class="emphasis-bold">srand()</b> function.</p></dd>


<dt><b class="emphasis-bold">return</b></i></dt><dd><b class="emphasis-bold">return</b> [<em class="emphasis">expr</em></tt>]</p>

<p>Used at end of user-defined functions to exit function, returning
value of expression.</p></dd>


<dt><b class="emphasis-bold">sin()</b></i></dt><dd><b class="emphasis-bold">sin</b>(<em class="emphasis">x</em></tt>)</p>

<p>Return sine of <em class="emphasis">x</em> in radians.</p></dd>


<dt><b class="emphasis-bold">split()</b></i></dt><dd><b class="emphasis-bold">split</b>(<em class="emphasis">str</em></tt>, <em class="emphasis">array</em></tt>, <em class="emphasis">sep</em></tt>)</p>

<p>Function that parses string into elements of array using field
separator, returning number of elements in array.  Value of
<b class="emphasis-bold">FS</b> is used if no field separator is specified.
Array splitting works the same as field splitting.</p></dd>


<dt><b class="emphasis-bold">sprintf()</b></i></dt><dd><b class="emphasis-bold">sprintf</b> (<em class="emphasis">format-expr</em></tt> [, <em class="emphasis">expr-list</em></tt> ] )</p>

<p>Function that returns string formatted according to
<b class="emphasis-bold">printf</b> format specification. It formats data but
does not output it.  <em class="emphasis">format-expr</em> is a
string of format specifications and constants; see the next section for a
list of format specifiers.  <em class="emphasis">expr-list</em> is a
list of arguments corresponding to format specifiers.</p></dd>


<dt><b class="emphasis-bold">sqrt()</b></i></dt><dd><b class="emphasis-bold">sqrt</b>(<em class="emphasis">x</em></tt>)</p>

<p>Return square root of <em class="emphasis">x</em></tt>.</p></dd>


<dt><b class="emphasis-bold">srand()</b></i></dt><dd><b class="emphasis-bold">srand</b>(<em class="emphasis">expr</em></tt>)</p>

<p>Use <em class="emphasis">expr</em> to set a new seed for random
number generator.  Default is time of day.  Return value is the old
seed.</p></dd>


<dt><b class="emphasis-bold">sub()</b></i></dt><dd><b class="emphasis-bold">sub</b>(<em class="emphasis">r</em></tt>, <em class="emphasis">s</em></tt>, <em class="emphasis">t</em></tt>)</p>

<p>Substitute <em class="emphasis">s</em></tt> for first match of the regular
expression <em class="emphasis">r</em></tt> in the string
<em class="emphasis">t</em></tt>.  Return 1 if successful; 0 otherwise.
If <em class="emphasis">t</em></tt> is not supplied, defaults to $0.</p></dd>


<dt><b class="emphasis-bold">substr()</b></i></dt><dd><b class="emphasis-bold">substr</b>(<em class="emphasis">str</em></tt>, <em class="emphasis">beg</em></tt>, <em class="emphasis">len</em></tt>)</p>

<p>Return substring of string <em class="emphasis">str</em> at beginning
position <em class="emphasis">beg</em>, and the characters that
follow to maximum specified length <em class="emphasis">len</em>.  If
no length is given, use the rest of the string.</p></dd>


<dt><b class="emphasis-bold">system()</b></i></dt><dd><b class="emphasis-bold">system</b>(<em class="emphasis">command</em></tt>)</p>

<p>Function that executes the specified
<em class="emphasis">command</em></tt> and returns its status.  The status
of the executed command typically indicates success or failure.  A
value of 0 means that the command executed successfully. A non-zero
value, whether positive or negative, indicates a failure of some sort.
The documentation for the command you're running will give you the
details.  The output of the command is not available for processing
within the awk script.  Use "<em class="emphasis">command</em></tt>
<b class="emphasis-bold">| getline</b>" to read the output of a command into
the script.</p></dd>


<dt><b class="emphasis-bold">tolower()</b></i></dt><dd><b class="emphasis-bold">tolower</b>(<em class="emphasis">str</em></tt>)</p>

<p>Translate all uppercase characters in <em class="emphasis">str</em>
to lowercase and return the new string.<a href="#FOOTNOTE-93">[93]</a></p><blockquote class="footnote">

<a name="FOOTNOTE-93" /><p> [93]Very early versions of nawk, such as that in SunOS 4.1.x, don't
support <b class="emphasis-bold">tolower()</b> and
<b class="emphasis-bold">toupper()</b>. However, they are now part of
the POSIX specification for awk.</p>

</blockquote></dd>


<dt><b class="emphasis-bold">toupper()</b></i></dt><dd><b class="emphasis-bold">toupper</b>(<em class="emphasis">str</em></tt>)</p>

<p>Translate all lowercase characters in <em class="emphasis">str</em></tt>
to uppercase and return the new string.</p></dd>


<dt><b class="emphasis-bold">while</b></i></dt><dd><b class="emphasis-bold">while</b> (<em class="emphasis">expr</em></tt>)
   <em class="emphasis">statement</em></p>

<p>Looping construct.  While <em class="emphasis">expr</em> is true,
execute <em class="emphasis">statement</em>.</p></dd>

</dl>

<a name="sedawk-app-b-sect-3.1.1" /><div class="sect2">
<h3 class="sect2">B.3.1. Format Expressions Used in printf and sprintf</h3>

<p>A format expression can take three optional modifiers following "%"
and preceding the format specifier:</p>

<blockquote><pre class="code"><b class="emphasis-bold">%-</b><em class="emphasis">width</em>.<em class="emphasis">precision format-specifier</em></pre></blockquote><p>The <em class="emphasis">width</em> of the output field is a numeric
value.  When you specify a field width, the contents of the field will
be right-justified by default.  You must specify "-" to get
left-justification.  Thus, "%-20s" outputs a string left-justified in
a field 20 characters wide.  If the string is less than 20 characters,
the field will be padded with spaces to fill.</p>

<p>The <em class="emphasis">precision</em> modifier, used for decimal or
floating-point values, controls the number of digits that appear to
the right of the decimal point.  For string formats, it controls the
number of characters from the string to print.</p>

<p>You can specify both the <em class="emphasis">width</em> and
<em class="emphasis">precision</em> dynamically, via values in the
<b class="emphasis-bold">printf</b> or <b class="emphasis-bold">sprintf</b> argument list.
You do this by specifying asterisks, instead of specifying literal values.</p>

<blockquote><pre class="code">printf("%*.*g\n", 5, 3, myvar);</pre></blockquote>

<p>In this example, the width is 5, the precision is 3, and the value to
print will come from <b class="emphasis-bold">myvar</b>.  Older versions of nawk
may not support this.</p>

<p>Note that the default precision for the output of numeric values is
"%.6g."  The default can be changed by setting the system variable
<b class="emphasis-bold">OFMT</b>.  This affects the precision used by the
<b class="emphasis-bold">print</b> statement when outputting numbers.  For
instance, if you are using awk to write reports that contain dollar
values, you might prefer to change <b class="emphasis-bold">OFMT</b> to "%.2f."</p>

<p>

The format specifiers, shown in <a href="appb_03.htm#sedawk-app-b-tab-6">Table B.6</a>, 
are used with
<b class="emphasis-bold">printf</b> and <b class="emphasis-bold">sprintf</b> statements.</p>

<a name="sedawk-app-b-tab-6" /><h4 class="objtitle">Table B.6. Format Specifiers Used in printf</h4><table border="1" cellpadding="3">

<tr>
<th>Character</th>
<th>Description</th>
</tr>




<tr>
<td><b class="emphasis-bold">c</b></td>
<td>ASCII character.</td>
</tr>

<tr>
<td><b class="emphasis-bold">d</b></td>
<td>Decimal integer.</td>
</tr>

<tr>
<td><b class="emphasis-bold">i</b></td>
<td>Decimal integer. Added in POSIX.</td>
</tr>

<tr>
<td><b class="emphasis-bold">e</b></td>
<td><p>Floating-point format
([-]<em class="emphasis">d</em>.<em class="emphasis">precision</em><b class="emphasis-bold">e</b>[+-]<em class="emphasis">dd</em>).</p></td>
</tr>

<tr>
<td><b class="emphasis-bold">E</b></td>
<td><p>Floating-point format ([-]<em class="emphasis">d</em>.<em class="emphasis">precision</em><b class="emphasis-bold">E</b>[+-]<em class="emphasis">dd</em>).</p></td>
</tr>

<tr>
<td><b class="emphasis-bold">f</b></td>
<td><p>Floating-point format ([-]<em class="emphasis">ddd</em>.<em class="emphasis">precision</em>).</p></td>
</tr>

<tr>
<td><b class="emphasis-bold">g</b></td>
<td><p><b class="emphasis-bold">e</b> or <b class="emphasis-bold">f</b> conversion, whichever is
shortest, with trailing zeros removed.</p></td>
</tr>

<tr>
<td><b class="emphasis-bold">G</b></td>
<td><p><b class="emphasis-bold">E</b> or <b class="emphasis-bold">f</b> conversion, whichever is
shortest, with trailing zeros removed.</p></td>
</tr>

<tr>
<td><b class="emphasis-bold">o</b></td>
<td>Unsigned octal value.</td>
</tr>

<tr>
<td><b class="emphasis-bold">s</b></td>
<td>String.</td>
</tr>

<tr>
<td><b class="emphasis-bold">x</b></td>
<td><p>Unsigned hexadecimal number. Uses
<b class="emphasis-bold">a</b>-<b class="emphasis-bold">f</b> for 10 to 15.</p></td>
</tr>

<tr>
<td><b class="emphasis-bold">X</b></td>
<td><p>Unsigned hexadecimal number. Uses
<b class="emphasis-bold">A</b>-<b class="emphasis-bold">F</b> for 10 to 15.</p></td>
</tr>

<tr>
<td><b class="emphasis-bold">%</b></td>
<td>Literal %.</td>
</tr>


</table><p>

<p>Often, whatever format specifiers are available in the system's
<em class="emphasis">sprintf</em>(3) subroutine are available in awk.</p>

<p>The way <b class="emphasis-bold">printf</b> and
<b class="emphasis-bold">sprintf()</b> do rounding will often depend
upon the system's C <em class="emphasis">sprintf</em>(3) subroutine.
On many machines, <em class="emphasis">sprintf</em> rounding is
"unbiased," which means it doesn't always round a trailing ".5" up,
contrary to naive expectations.  In unbiased rounding, ".5" rounds to
even, rather than always up, so 1.5 rounds to 2 but 4.5 rounds to 4.
The result is that if you are using a format that does rounding (e.g.,
<b class="emphasis-bold">"%.0f"</b>) you should check what your system does.
The following function does traditional rounding; it might be useful
if your awk's <b class="emphasis-bold">printf</b> does unbiased rounding.</p>

<blockquote><pre class="code"># round --- do normal rounding
#	Arnold Robbins, arnold@gnu.ai.mit.edu
#	Public Domain
function round(x,       ival, aval, fraction)
{
        ival = int(x)	# integer part, int() truncates
	# see if fractional part
	if (ival == x)	# no fraction
		return x
	if (x &lt; 0) {
		aval = -x	# absolute value
		ival = int(aval)
		fraction = aval - ival
		if (fraction &gt;= .5)
			return int(x) - 1		# -2.5 --&gt; -3
		else
			return int(x)		# -2.3 --&gt; -2
	} else {
		fraction = x - ival
		if (fraction &gt;= .5)
			return ival + 1
		else
			return ival
	}
}</pre></blockquote>
</div>




<a name="IXT-B-265279" />
<a name="IXT-B-265280" />
<a name="IXT-B-265281" />


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appb_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appc_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">B.2. Language Summary for awk</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">C. Supplement for Chapter 12</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>