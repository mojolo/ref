<html><head><title>Writing Your Own Functions (sed & awk, Second Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Dale Dougherty and Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-225-5" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="sed &amp; awk, Second Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="sed &amp; awk" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="sed &amp; awk" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch10_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">9.3. Writing Your Own Functions</h2>

<p>
<a name="ch09.fun8" />
<a name="ch09.fun9" />
<a name="ch09.fun10" />
<a name="ch09.fun11" />
<a name="ch09.fun12" />
With user-defined functions, awk
allows the novice programmer to take another step toward
C programming<a href="#FOOTNOTE-59">[59]</a>
by writing programs that make use
of self-contained functions.  
When you write a function properly, you have
defined a program component that can be
reused in other programs.
The real benefit of modularity becomes apparent
as programs grow in size or in age, and as the number 
of programs you write increases significantly.</p><blockquote class="footnote">

<a name="FOOTNOTE-59" /><p> [59]Or programming in any other traditional high-level language.</p>

</blockquote>

<p>A function definition can be placed anywhere in a script
that a pattern-action rule can appear.  Typically, we put
the function definitions at the top of the script before
the pattern-action rules.
A function is defined using the following syntax:
<a name="IXT-9-266123" /></p>

<blockquote><pre class="code"><tt class="userinput"><b>function</b></tt> <em class="replaceable"><tt>name</em> <tt class="userinput"><b>(</b></tt><em class="replaceable">parameter-list</tt></em><tt class="userinput"><b>) {</b></tt>
	<em class="replaceable"><tt>statements</tt></em>
<tt class="userinput"><b>}</b></tt></pre></blockquote>

<p>The newlines after the left brace and before the
right brace are optional.  You can also have a newline
after the close-parenthesis of the parameter list and before
the left brace.</p>

<p>
<a name="IXT-9-266124" />
The <em class="emphasis">parameter-list</em>
is a comma-separated list of variables that are passed
as arguments into the function when it is called.  
The body of the function consists of one or more statements.  
<a name="IXT-9-266125" />
The function typically contains a <b class="emphasis-bold">return</b> statement
that returns control to that point in the script where
the function was called; it often has an expression
that returns a value as well.</p>

<blockquote><pre class="code"><tt class="userinput"><b>return</b></tt> <em class="replaceable"><tt>expression</tt></em></pre></blockquote>

<p>The following example shows the definition for an <b class="emphasis-bold">insert()</b>
function:</p>

<blockquote><pre class="code">function insert(STRING, POS, INS) {
        before_tmp = substr(STRING, 1, POS)
        after_tmp = substr(STRING, POS + 1)
        return before_tmp INS after_tmp
}</pre></blockquote>

<p>This function takes three arguments,
inserting one string <b class="emphasis-bold">INS</b> in another string <b class="emphasis-bold">STRING</b>
after the character at position <b class="emphasis-bold">POS</b>.<a href="#FOOTNOTE-60">[60]</a>
The body of this function uses the <b class="emphasis-bold">substr()</b> function
to divide the value of <b class="emphasis-bold">STRING</b> into two parts.  The <b class="emphasis-bold">return</b>
statement returns a string that is the result of concatenating
the first part of <b class="emphasis-bold">STRING</b>, the <b class="emphasis-bold">INS</b> string, and the last part of
<b class="emphasis-bold">STRING</b>.  
A function call can appear anywhere that
an expression can.  Thus, the following statement:</p><blockquote class="footnote">

<a name="FOOTNOTE-60" /><p> [60]We've used a convention of giving all uppercase names to our
parameters. This is mostly to make the explanation easier to follow. In
practice, this is probably not a good idea, since it becomes much
easier to accidentally have a parameter conflict with a system variable.


</p>

</blockquote>

<blockquote><pre class="code">print insert($1, 4, "XX")</pre></blockquote>

<p>If the value of $1 is "Hello," then this functions returns "HellXXo."
Note that when <em class="emphasis">calling</em> a user-defined function,
there can be no spaces between the function name
and the left parenthesis.  This is not true of built-in functions.</p>

<p>
<a name="IXT-9-266126" />
<a name="IXT-9-266127" />
<a name="IXT-9-266128" />
It is important to understand the notion of local and global
variables.  A local variable is a variable that is local
to a function and cannot be accessed outside of it.  A global
variable, on the other hand, can be accessed or changed anywhere
in the script.  There can be potentially damaging side effects
of global variables if a function changes a variable that 
is used elsewhere in the script.  Therefore, it is usually a good
idea to eliminate global variables in a function.</p>

<p>When we call the <b class="emphasis-bold">insert()</b> function, and specify $1 as
the first argument, then a copy of that variable is passed to
the function, where it is manipulated as a local variable
named <b class="emphasis-bold">STRING</b>.
All the variables in the function definition's parameter list 
are local variables
and their values are not accessible outside the function.
Similarly, the arguments in the function call
are not changed by the function itself.
When the <b class="emphasis-bold">insert()</b> function returns, the value of $1 is not changed.</p>

<p>However, the variables defined in the body of the function
are global variables, by default.  Given the above definition
of the <b class="emphasis-bold">insert()</b> function, the temporary variables <b class="emphasis-bold">before_tmp</b>
and <b class="emphasis-bold">after_tmp</b> are visible outside the function.  Awk provides
what its developers call an "inelegant" means of declaring variables
local to a function, and that is by specifying those variables in
the parameter list.</p>

<p>
<a name="IXT-9-266129" />
The local temporary
variables are put at the end of the parameter list. This is
<em class="emphasis">essential</em>; parameters in the parameter list receive their
values, in order, from the values passed in the function call.
Any extra parameters, like normal awk variables, are initialized to the
empty string.
By convention, the local variables are separated from the "real" parameters by 
several spaces.
For instance, the following example shows how to define
the <b class="emphasis-bold">insert()</b> function with two local variables.</p>

<blockquote><pre class="code">function insert(STRING, POS, INS,   before_tmp, after_tmp) {
		<em class="emphasis">body</em>
}</pre></blockquote>

<p>If this seems confusing,<a href="#FOOTNOTE-61">[61]</a>
seeing how the following script works might help:</p><blockquote class="footnote">

<a name="FOOTNOTE-61" /><p> [61]The documentation calls it a syntactical botch.</p>

</blockquote>

<blockquote><pre class="code">function insert(STRING, POS, INS,   before_tmp) {
	before_tmp = substr(STRING, 1, POS)
	after_tmp = substr(STRING, POS + 1)
	return before_tmp INS after_tmp
}

# main routine
{
print "Function returns", insert($1, 4, "XX")
print "The value of $1 after is:", $1
print "The value of STRING is:", STRING
print "The value of before_tmp:", before_tmp
print "The value of after_tmp:", after_tmp
}</pre></blockquote>

<p>Notice that we specify <b class="emphasis-bold">before_tmp</b> in the parameter list.
In the main routine, we call the <b class="emphasis-bold">insert()</b> function
and print its result.  Then we print different variables
to see what their value is, if any. 
Now let's run the above script and look at the output:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>echo "Hello" | awk -f insert.awk -</b></tt>
Function returns HellXXo
The value of $1 after is: Hello
The value of STRING is:
The value of before_tmp:
The value of after_tmp: o</pre></blockquote>

<p>The <b class="emphasis-bold">insert()</b> function returns "HellXXo," as expected.  
The value of $1 is the same after the function was called
as it was before.  The variable <b class="emphasis-bold">STRING</b> is local to the
function and it does not have a value when called from
the main routine.  The same is true for <b class="emphasis-bold">before_tmp</b>
because its name was placed in the parameter list for
the function definition.
The variable <b class="emphasis-bold">after_tmp</b> which was not specified in 
the parameter list does have a value, the letter "o."</p>

<p>As this example shows, $1 is passed "by value" into the function.
This means that a copy is made of the value when the function
is called and the function manipulates the copy, not the original.  
Arrays, however, are passed "by reference." That is, the function
does not work with a copy of the array but is passed the 
array itself.  Thus, any changes that the function
makes to the array are visible outside of the function. 
(This distinction between "scalar" variables and arrays  
also holds true for functions written in the C language.)
The next section presents an example of a function that
operates on an array.</p>

<a name="sedawk-ch-9-sect-3.1" /><div class="sect2">
<h3 class="sect2">9.3.1. Writing a Sort Function</h3>

<p>
<a name="ch09.sort" />
Earlier in this chapter we presented the <b class="emphasis-bold">lotto</b> script
for picking <em class="emphasis">x</em> random numbers out of a series of <em class="emphasis">y</em>
numbers.  That script did not sort the list of numbers
that were selected.  In this section, we develop a 
<b class="emphasis-bold">sort</b> function for elements of an array.</p>

<p>We define a function that takes two arguments, the name
of the array and the number of elements in the array.  
This function can be called this way:</p>

<blockquote><pre class="code">sort(sortedpick, NUM)</pre></blockquote>

<p>The function definition lists the two arguments
and three local variables used
in the function.</p>

<blockquote><pre class="code"># sort numbers in ascending order
function sort(ARRAY, ELEMENTS,   temp, i, j) {
        for (i = 2; i &lt;= ELEMENTS; ++i) {
                for (j = i; (j-1) in ARRAY &amp;&amp; ARRAY[j-1] &gt; ARRAY[j]; --j) {
                        temp = ARRAY[j]
                        ARRAY[j] = ARRAY[j-1]
                        ARRAY[j-1] = temp
                }
        }
        return
}</pre></blockquote>

<p>The body of the function implements an insertion sort.  This sorting
algorithm is very simple.  We loop through 
each element of the array and compare it to the value preceding
it.  If the first element is greater than the second, the
first and second elements are swapped.<a href="#FOOTNOTE-62">[62]</a> To actually swap
the values, we use a temporary variable to hold a copy of
the value while we overwrite the original.
The loop continues swapping adjacent elements until all are
in order.
<a name="IXT-9-266130" />
At the end of the function, we use the <b class="emphasis-bold">return</b> 
statement to simply return control.<a href="#FOOTNOTE-63">[63]</a>
The function does not need to pass the array back 
to the main routine because the array itself is changed and it
can be accessed directly.</p><blockquote class="footnote">

<a name="FOOTNOTE-62" /><p> [62]We have to test that <b class="emphasis-bold">j-1 in ARRAY</b>, first, to make sure we don't fall off the front end of the array.</p>

</blockquote><blockquote class="footnote">

<a name="FOOTNOTE-63" /><p> [63]The <b class="emphasis-bold">return</b> is optional here;
"falling off the end" of the function would have the same effect.
Since functions can have return values, it's a good 
idea to always use a <b class="emphasis-bold">return</b> statement.</p>

</blockquote>

<p>Here's proof positive:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>lotto 7 35</b></tt>
Pick 7 of 35
6 7 17 19 24 29 35</pre></blockquote>

<p>In fact, many of the scripts that we developed in this chapter
could be turned into functions.  For instance, if we
only had the original, 1987, version of nawk, we might want to write
our own <b class="emphasis-bold">tolower()</b> and 
<b class="emphasis-bold">toupper()</b>
functions.</p>

<p>The value of writing the <b class="emphasis-bold">sort()</b> function in a general
fashion is that you can easily reuse it.  To demonstrate this,
we'll take the above sort function and use it to sort student
grades.  In the following script, we read all of the student
grades into an array and then call <b class="emphasis-bold">sort()</b> to
put the grades in ascending order.</p>

<blockquote><pre class="code"># grade.sort.awk -- script for sorting student grades
# input: student name followed by a series of grades

# sort function -- sort numbers in ascending order
function sort(ARRAY, ELEMENTS, 	temp, i, j) {
	for (i = 2; i &lt;= ELEMENTS; ++i) 
		for (j = i; ARRAY[j-1] &gt; ARRAY[j]; --j) { 
			temp = ARRAY[j]
			ARRAY[j] = ARRAY[j-1]
			ARRAY[j-1] = temp
	}
	return 
}

# main routine
{ 
# loop through fields 2 through NF and assign values to
# array named grades
for (i = 2; i &lt;= NF; ++i)
	grades[i-1] = $i 

# call sort function to sort elements

sort(grades, NF-1)

# print student name
printf("%s: ", $1)

# output loop
for (j = 1; j &lt;= NF-1; ++j)
	printf("%d ", grades[j])
printf("\n")
}</pre></blockquote>

<p>Note that the sort routine is identical to the
previous version.  
In this example, once we've sorted the grades we simply output them:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f grade.sort.awk grades.test</b></tt>
mona: 70 70 77 83 85 89
john: 78 85 88 91 92 94
andrea: 85 89 90 90 94 95
jasper: 80 82 84 84 88 92
dunce: 60 60 61 62 64 80
ellis: 89 90 92 96 96 98</pre></blockquote>

<p>However, you could, for instance, delete the first element of
the sort array if you wanted to average the student grades
after dropping the lowest grade.</p>

<p>As another exercise, you could write a version of the sort function
that takes a third argument indicating an ascending or descending
sort.</p>

<a name="IXT-9-266131" />
</div>




<a name="sedawk-ch-9-sect-3.2" /><div class="sect2">
<h3 class="sect2">9.3.2. Maintaining a Function Library</h3>

<p>
<a name="IXT-9-266132" />
<a name="IXT-9-266133" />
<a name="IXT-9-266134" />
You might want to put a useful function in its own file and store it in 
a central directory.  Awk permits multiple uses of the <span class="option">-f</span>
option to specify more than one program file.<a href="#FOOTNOTE-64">[64]</a>
For instance,
we could have written the previous example such that the sort
function was placed in a separate file from the main program
<b class="emphasis-bold">grade.awk</b>.  The following command specifies both program
files:</p><blockquote class="footnote">

<a name="FOOTNOTE-64" /><p> [64]The SunOS 4.1.x version of nawk does not support multiple script files.
This feature was not in the original 1987 version of nawk either. It was
added in 1989 and is now part of POSIX awk.</p>

</blockquote>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f grade.awk -f /usr/local/share/awk/sort.awk grades.test</b></tt></pre></blockquote>

<p>This command assumes that <tt class="literal">grade.awk</tt> is in the
working directory and that the sort function is defined in
<tt class="literal">sort.awk</tt> in the directory
<em class="filename">/usr/local/share/awk</em>.</p>

<blockquote><b>NOTE:</b> 
You cannot put a script on the command line and also
use the <span class="option">-f</span> option to specify a filename for a script.</p>
</blockquote>

<p>Remember to document functions clearly so that you will understand
how they work when you want to reuse them.</p>
</div>




<a name="sedawk-ch-9-sect-3.3" /><div class="sect2">
<h3 class="sect2">9.3.3. Another Sorted Example</h3>

<p>
<a name="ch09.sort2" />
Lenny, our production editor, is back with another request.</p>

<blockquote><pre class="code">Dale:

The last section of each Xlib manpage is called "Related Commands"
(that is the argument of a .SH) and it's followed by a list of commands
(often 10 or 20) that are now in random order.  It'd be more
useful and professional if they were alphabetized.  Currently, commands
are separated by a comma after each one except the last, which has a
period.

The question is: could awk alphabetize these lists?  We're talking
about a couple of hundred manpages.  Again, don't bother if this is a
bigger job than it seems to someone who doesn't know what's involved.

Best to you and yours, 

Lenny</pre></blockquote>

<p>To see what he is talking about,
a simplified version of an Xlib manpage is shown below:</p>

<blockquote><pre class="code">.SH "Name"
XSubImage -- create a subimage from part of an image.
.
.
.
.SH "Related Commands"
XDestroyImage, XPutImage, XGetImage, 
XCreateImage, XGetSubImage, XAddPixel, 
XPutPixel, XGetPixel, ImageByteOrder.</pre></blockquote>

<p>You can see that the names of related commands appear
on several lines following the heading.
You can also see that they are in no particular order.</p>

<p>To sort the list of related commands is actually fairly
simple, given that we've already covered sorting.  The structure 
of the program is somewhat interesting, as we must read
several lines <em class="emphasis">after</em> matching the "Related Commands"
heading.</p>

<p>Looking at the input, it is obvious that the list of related
commands is the last section in the file. 
All other lines except these we want to print as is.
The key is to match all lines from the heading
"Related Commands" to the end of the file.
Our script can consist of four rules, that match:</p>

<ol><li><p>The "Related Commands" heading</p></li><li><p>The lines following that heading</p></li><li><p>All other lines</p></li><li><p>After all lines have been read (<b class="emphasis-bold">END</b>)</p></li></ol><p>Most of the "action" takes place in the <b class="emphasis-bold">END</b> procedure.
That's where we sort and output the list of commands.
Here's the script:</p>

<blockquote><pre class="code"># sorter.awk -- sort list of related commands
# requires sort.awk as function in separate file
BEGIN { relcmds = 0 } 

#1 Match related commands; enable flag x 
/\.SH "Related Commands"/ {
	print
	relcmds = 1
	next
}

#2 Apply to lines following "Related Commands" 
(relcmds == 1) {
	commandList = commandList $0
}


#3 Print all other lines, as is.
(relcmds == 0) { print }

#4 now sort and output list of commands 
END {
# remove leading spaces and final period.
	gsub(/, */, ",", commandList)
	gsub(/\. *$/, "", commandList)
# split list into array
	sizeOfArray = split(commandList, comArray, ",")
# sort
	sort(comArray, sizeOfArray)
# output elements
	for (i = 1; i &lt; sizeOfArray; i++)
		printf("%s,\n", comArray[i])  
	printf("%s.\n", comArray[i])
}</pre></blockquote>

<p>Once the "Related Commands" heading is matched, we print that line
and then set a flag, the variable <b class="emphasis-bold">relcmds</b>, which indicates
that subsequent input lines are to be collected.<a href="#FOOTNOTE-65">[65]</a>
The second procedure actually collects each line
into the variable <b class="emphasis-bold">commandList</b>.
The third procedure is executed for all other lines, simply
printing them.</p><blockquote class="footnote">

<a name="FOOTNOTE-65" /><p> [65]The <b class="emphasis-bold">getline</b> function introduced 
in the next chapter provides a simpler way to control reading input lines.</p>

</blockquote>

<p>When all lines of input have been read, the
<b class="emphasis-bold">END</b> procedure is executed, and we know that our list of commands
is complete.
Before
splitting up the commands into fields, we remove any number
of spaces following a comma.
Next we remove the final period and any trailing spaces.
Finally, we create the array <b class="emphasis-bold">comArray</b> using the <b class="emphasis-bold">split()</b>
function.
We pass this array as an argument to the <b class="emphasis-bold">sort()</b> function,
and then we print the sorted values.</p>

<p>This program generates the following output:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f sorter.awk test</b></tt>
.SH "Name"
XSubImage -- create a subimage from part of an image.
.SH "Related Commands"
ImageByteOrder,
XAddPixel,
XCreateImage,
XDestroyImage,
XGetImage,
XGetPixel,
XGetSubImage,
XPutImage,
XPutPixel.</pre></blockquote>

<p>Once again, the virtue of calling a function to do the sort
versus writing or copying the code to do the same task is that  
the function is a module that's been tested previously and
has a standard interface.  That is, you know that it works and
you know how it works.  When you come upon the same sort code
in the awk version, which uses different variable names, you
have to scan it to verify that it works the same way as other
versions.  Even if you were to copy the lines into another program,
you would have to make changes to accommodate the new circumstances.
With a function, all you need to know is
what kind of arguments it expects and their calling sequence.
Using a function reduces the chance for error by
reducing the complexity of the problem that you are solving.</p>

<p>Because this script presumes that the <b class="emphasis-bold">sort()</b> function
exists in a separate file, it must be invoked using
the multiple <span class="option">-f</span> options:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>awk -f sort.awk -f sorter.awk test</b></tt></pre></blockquote>

<p>where the <b class="emphasis-bold">sort()</b> function is defined in the file <em class="filename">sort.awk</em>.</p>

<a name="IXT-9-266135" />
</div>




<a name="IXT-9-266136" />
<a name="IXT-9-266137" />
<a name="IXT-9-266138" />
<a name="IXT-9-266139" />
<a name="IXT-9-266140" />


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch09_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch10_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">9.2. String Functions</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">10. The Bottom Drawer</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>