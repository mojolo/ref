<html><head><title>Alphabetical Summary of Functions and Commands (UNIX in a Nutshell: System V Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="1-56592-427-4" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX in a Nutshell: System V Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="part3.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h2 class="sect1">11.10. Alphabetical Summary of Functions and Commands</h2><p>
<a name="IXT-11-123310" />The following alphabetical list of keywords and functions includes all
that are available in <tt class="literal">awk</tt>, <tt class="literal">nawk</tt>,
and <tt class="literal">gawk</tt>.  <tt class="literal">nawk</tt> includes all old
<tt class="literal">awk</tt> functions and keywords, plus some additional
ones (marked as <b class="emphasis-bold">{N}</b>).
<tt class="literal">gawk</tt> includes all <tt class="literal">nawk</tt> functions and
keywords, plus some additional ones (marked as <b class="emphasis-bold">{G}</b>).
Items marked with <b class="emphasis-bold">{B}</b>
are available in the Bell Labs <tt class="literal">awk</tt>.
Items that aren't marked with a symbol are available in all
versions.</p>

<table border="1" cellpadding="5"><tr><td valign="top">atan2</td><td><p><tt class="literal">atan2</tt><tt class="literal">(</tt><em class="replaceable"><tt>y</em><tt class="literal">,</tt> <em class="replaceable">x</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123311" />Return the arctangent of <em class="emphasis">y</em>/<em class="emphasis">x</em> in radians.
{N}</p>
</td></tr><tr><td valign="top"><a name="break">break</a></td><td><p><tt class="literal">break</tt></p>
<p>
<a name="IXT-11-123312" />Exit from a <tt class="literal">while</tt>, <tt class="literal">for</tt>, or
<tt class="literal">do</tt> loop.</p>
</td></tr><tr><td valign="top"><a name="close">close</a></td><td><p><tt class="literal">close(</tt><em class="replaceable"><tt>filename-expr</em><tt class="literal">)</tt><br><tt class="literal">close</tt><tt class="literal">(</tt><em class="replaceable">command-expr</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123313" />In most implementations of <tt class="literal">awk</tt>, you can have only 10 files open
simultaneously and one pipe.  Therefore, <tt class="literal">nawk</tt> provides a <tt class="literal">close</tt>
function that allows you to close a file or a pipe.  It takes
as an argument the same expression that opened the pipe
or file.  This expression must be identical, character
by character, to the one that opened the file or pipe; even whitespace
is significant.
{N}</p>
</td></tr><tr><td valign="top"><a name="continue">continue</a></td><td><p><tt class="literal">continue</tt></p>
<p>
<a name="IXT-11-123314" />Begin next iteration of <tt class="literal">while</tt>, <tt class="literal">for</tt>,
or <tt class="literal">do</tt> loop.</p>
</td></tr><tr><td valign="top"><a name="cos">cos</a></td><td><p><tt class="literal">cos(</tt><em class="replaceable"><tt>x</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123315" />Return the cosine of <em class="emphasis">x</em>, an angle in radians.
{N}</p>
</td></tr><tr><td valign="top"><a name="delete">delete</a></td><td><p><tt class="literal">delete</tt> <em class="replaceable"><tt>array</em><tt class="literal">[</tt><em class="replaceable">element</em><tt class="literal">]</tt><br>tt class="literal">delete</tt> <em class="replaceable">array</tt></em></p>
<p>
<a name="IXT-11-123316" />Delete <em class="emphasis">element</em> from <em class="emphasis">array</em>.
The brackets are typed literally.
The second form is a common extension, which deletes <em class="emphasis">all</em>
elements of the array at one shot.
{N}</p>
</td></tr>



<tr><td valign="top"><a name="do">do</a></td><td><p><tt class="literal">do</tt><br>&#160;&#160;&#160;&#160;<em class="replaceable"><tt>statement</em><br><tt class="literal">while (</tt><em class="replaceable">expr</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123317" />Looping statement.
Execute <em class="emphasis">statement</em>,
then evaluate <em class="emphasis">expr</em> and, if true,
execute <em class="emphasis">statement</em> again.
A series of statements must be put within braces.
{N}</p>
</td></tr><tr><td valign="top"><a name="exit">exit</a></td><td><p><tt class="literal">exit</tt> [<em class="replaceable"><tt>expr</tt></em>]</p>
<p>
<a name="IXT-11-123318" />Exit from script, reading no new input.  The <tt class="literal">END</tt> procedure,
if it exists, will be executed. An optional <em class="emphasis">expr</em>
becomes <tt class="literal">awk</tt>'s return value.</p>
</td></tr><tr><td valign="top"><a name="exp">exp</a></td><td><p><tt class="literal">exp(</tt><em class="replaceable"><tt>x</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123319" />Return exponential of <em class="emphasis">x</em>


(<em class="emphasis">e</em><sup class="superscript"><em class="emphasis">x</em></sup>).</p>
</td></tr><tr><td valign="top"><a name="fflush">fflush</a></td><td><p><tt class="literal">fflush(</tt>[<em class="replaceable"><tt>output-expr</tt></em>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123320" />Flush any buffers associated with open output file or pipe
<em class="emphasis">output-expr</em>.
{B}</p>
<p><tt class="literal">gawk</tt> extends this function.
If no <em class="emphasis">output-expr</em> is supplied,
it flushes standard output.
If <em class="emphasis">output-expr</em> is the null
string (<tt class="literal">""</tt>), it flushes
all open files and pipes. {G}</p>
</td></tr><tr><td valign="top"><a name="for">for</a></td><td><p><tt class="literal">for (</tt><em class="replaceable"><tt>init-expr</em><tt class="literal">;</tt> <em class="replaceable">test-expr</em><tt class="literal">;</tt> <em class="replaceable">incr-expr</em><tt class="literal">)</tt><br>&#160;&#160;&#160;&#160;<em class="replaceable">statement</tt></em></p>
<p>
<a name="IXT-11-123321" />C-style looping construct.  <em class="emphasis">init-expr</em> assigns the
initial value of a counter variable. <em class="emphasis">test-expr</em> is
a relational expression that is evaluated each time before executing
the <em class="emphasis">statement</em>. When <em class="emphasis">test-expr</em> is
false, the loop is exited. <em class="emphasis">incr-expr</em> increments
the counter variable after each pass. All the expressions are
optional.  A missing <em class="emphasis">test-expr</em> is considered to be true.
A series of statements must be put within braces.</p>
</td></tr><tr><td valign="top"><a name="for">for</a></td><td><p><tt class="literal">for (</tt><em class="replaceable"><tt>item</em> <tt class="literal">in</tt> <em class="replaceable">array</em><tt class="literal">)</tt><br>&#160;&#160;&#160;&#160;<em class="replaceable">statement</tt></em></p>
<p>Special loop designed for reading associative arrays.  For each
element of the array, the <em class="emphasis">statement</em> is
executed; the element can be referenced by
<em class="emphasis">array</em>[<em class="emphasis">item</em>].
A series of statements must be put within braces.</p>
</td></tr>



<tr><td valign="top"><a name="function">function</a></td><td><p><tt class="literal">function</tt> <em class="replaceable"><tt>name</em><tt class="literal">(</tt><em class="replaceable">parameter-list</em><tt class="literal">) {</tt><br>&#160;&#160;&#160;&#160;<em class="replaceable">statements</tt></em><br><tt class="literal">}</tt></p>
<p>
<a name="IXT-11-123322" />Create <em class="emphasis">name</em> as a user-defined function consisting of <tt class="literal">awk</tt>
<em class="emphasis">statements</em> that apply to the specified list of parameters.
No space is allowed between <em class="emphasis">name</em> and the left paren
when the function is called.
{N}</p>
</td></tr><tr><td valign="top"><a name="getline">getline</a></td><td><p><tt class="literal">getline</tt> [<em class="replaceable"><tt>var</em>] [<tt class="literal">&lt;</tt> <em class="replaceable">file</em>]<br>&#160;&#160;&#160;&#160;<b class="emphasis-bold">or</b><br><em class="replaceable">command</em><tt class="literal"> | getline </tt>[<em class="replaceable">var</tt></em>]</p>
<p>
<a name="IXT-11-123323" />Read next line of input.
Original <tt class="literal">awk</tt> doesn't support the syntax
to open multiple input streams.
The first form reads input from <em class="emphasis">file</em>; the second form reads the output of <em class="emphasis">command</em>.
Both forms read one record at a time, and each time
the statement is executed, it gets the next record
of input.  The record is assigned to <tt class="literal">$0</tt>
and is parsed into fields, setting <tt class="literal">NF</tt>,
<tt class="literal">NR</tt> and <tt class="literal">FNR</tt>.
If <em class="emphasis">var</em> is specified, the result is assigned
to <em class="emphasis">var</em>, and <tt class="literal">$0</tt> and
<tt class="literal">NF</tt> aren't changed.  Thus, if
the result is assigned to a variable, the
current record doesn't change.
<tt class="literal">getline</tt> is actually a function and returns 1 if it
reads a record successfully, 0 if end-of-file is
encountered, and -1 if it's
otherwise unsuccessful.
{N}</p>
</td></tr><tr><td valign="top"><a name="gensub">gensub</a></td><td><p><tt class="literal">gensub(</tt><em class="replaceable"><tt>r</em><tt class="literal">,</tt> <em class="replaceable">s</em><tt class="literal">,</tt> <em class="replaceable">h</em> [<tt class="literal">,</tt> <em class="replaceable">t</tt></em>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123324" />General substitution function.  Substitute <em class="emphasis">s</em> for matches
of the regular expression <em class="emphasis">r</em> in the string
<em class="emphasis">t</em>.  If <em class="emphasis">h</em> is a number, replace
the <em class="emphasis">h</em>th match. If it is
<tt class="literal">"g"</tt> or <tt class="literal">"G"</tt>,
substitute globally.  If <em class="emphasis">t</em> is not supplied,
<tt class="literal">$0</tt> is used.  Return the new string value. The
original <em class="emphasis">t</em> is <em class="emphasis">not</em> modified.
(Compare <b class="emphasis-bold">gsub</b> and <b class="emphasis-bold">sub</b>.)
{G}</p>
</td></tr><tr><td valign="top"><a name="gsub">gsub</a></td><td><p><tt class="literal">gsub(</tt><em class="replaceable"><tt>r</em><tt class="literal">,</tt> <em class="replaceable">s</em> [<tt class="literal">,</tt> <em class="replaceable">t</tt></em>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123325" />Globally substitute <em class="emphasis">s</em> for each match of the
regular expression <em class="emphasis">r</em> in the string <em class="emphasis">t</em>.
If <em class="emphasis">t</em> is not supplied,
defaults to <tt class="literal">$0</tt>.
Return the number of substitutions.
{N}</p>
</td></tr><tr><td valign="top"><a name="if">if</a></td><td><p><tt class="literal">if (</tt><em class="replaceable"><tt>condition</em><tt class="literal">)</tt><br>&#160;&#160;&#160;&#160;<em class="replaceable">statement</em><br>[<tt class="literal">else</tt><br>&#160;&#160;&#160;&#160;<em class="replaceable">statement</tt></em>]</p>
<p>
<a name="IXT-11-123326" />If <em class="emphasis">condition</em> is true, do <em class="emphasis">statement(s)</em>; otherwise do
<em class="emphasis">statement</em> in the optional <tt class="literal">else</tt> clause.
The <em class="emphasis">condition</em> can be an expression using
any of the relational operators <tt class="literal">&lt;</tt>,
<tt class="literal">&lt;=</tt>,
<tt class="literal">==</tt>,
<tt class="literal">!=</tt>,
<tt class="literal">&gt;=</tt>,
or
<tt class="literal">&gt;</tt>,
as well as
the array membership operator <tt class="literal">in</tt>,
and
the pattern-matching operators <tt class="literal">~</tt>
and <tt class="literal">!~</tt>
(e.g., <tt class="literal">if ($1 ~ /[Aa].*/)</tt>).
A series of statements must be put within braces.
Another <tt class="literal">if</tt> can directly follow an <tt class="literal">else</tt>
in order to produce a chain of tests or decisions.</p>
</td></tr><tr><td valign="top"><a name="index">index</a></td><td><p><tt class="literal">index(</tt><em class="replaceable"><tt>str</em><tt class="literal">,</tt> <em class="replaceable">substr</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123327" />Return the position (starting at 1) of <em class="emphasis">substr</em>
in <em class="emphasis">str</em>,
or zero if <em class="emphasis">substr</em> is not present in <em class="emphasis">str</em>.</p>
</td></tr><tr><td valign="top"><a name="int">int</a></td><td><p><tt class="literal">int(</tt><em class="replaceable"><tt>x</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123328" />Return integer value of <em class="emphasis">x</em> by truncating any
fractional part.</p>
</td></tr><tr><td valign="top"><a name="length">length</a></td><td><p><tt class="literal">length(</tt>[<em class="replaceable"><tt>arg</tt></em>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123329" />Return length of <em class="emphasis">arg</em>,
or the length of <tt class="literal">$0</tt> if no argument.</p>
</td></tr><tr><td valign="top"><a name="log">log</a></td><td><p><tt class="literal">log(</tt><em class="replaceable"><tt>x</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123330" />Return the natural logarithm (base <em class="emphasis">e</em>)
of <em class="emphasis">x</em>.</p>
</td></tr><tr><td valign="top"><a name="match">match</a></td><td><p><tt class="literal">match(</tt><em class="replaceable"><tt>s</em><tt class="literal">,</tt> <em class="replaceable">r</tt></em><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123331" />Function that matches the pattern, specified by the regular expression <em class="emphasis">r</em>,
in the string <em class="emphasis">s</em>, and
returns either the position in <em class="emphasis">s</em>, where the match
begins, or 0 if no occurrences are found.  Sets the values
of <tt class="literal">RSTART</tt> and <tt class="literal">RLENGTH</tt> to the start and
length of the match,
respectively.
{N}</p>
</td></tr><tr><td valign="top"><a name="next">next</a></td><td><p><tt class="literal">next</tt></p>
<p>
<a name="IXT-11-123332" />Read next input line and start new cycle through pattern/procedures
statements.</p>
</td></tr><tr><td valign="top"><a name="nextfile">nextfile</a></td><td><p><tt class="literal">nextfile</tt></p>
<p>
<a name="IXT-11-123333" />Stop processing the current input file and
start new cycle through pattern/procedures
statements,
beginning with the first record of the next file.
{B} {G}</p>
</td></tr><tr><td valign="top"><a name="print">print</a></td><td><p><tt class="literal">print</tt> [ <em class="replaceable"><tt>output-expr</em>[, ...]] [ <em class="replaceable">dest-expr</tt></em> ]</p>
<p>
<a name="IXT-11-123334" />Evaluate the <em class="emphasis">output-expr</em> and direct it to
standard output, followed by the value of <tt class="literal">ORS</tt>.
Each comma-separated <em class="emphasis">output-expr</em> is
separated in the output by the value of <tt class="literal">OFS</tt>.
With no <em class="emphasis">output-expr</em>, print <tt class="literal">$0</tt>.</p>
<h4 class="refsect2">Output Redirections</h4><p><em class="emphasis">dest-expr</em> is an
optional expression that directs the output to a file or pipe.</p>
<dl><dt><tt class="literal">&gt;</tt> <tt><em class="replaceable">file</em></tt></dt><dd>Directs the output to a file,
overwriting its previous contents.</p>
</dd>
<dt><tt class="literal">&gt;&gt;</tt> <tt><em class="replaceable">file</em></tt></dt><dd>Appends the output to a file,
preserving its previous contents.
In both cases, the file is
created if it does not already exist.</p>
</dd>
<dt><tt class="literal">|</tt> <tt><em class="replaceable">command</em></tt></dt><dd>Directs the output as the input to a Unix command.</p>
</dd>
</dl>
<p>Be careful not to mix <tt class="literal">&gt;</tt> and <tt class="literal">&gt;&gt;</tt>
for the same file.
Once a file has been opened with <tt class="literal">&gt;</tt>, subsequent
output statements continue to append to the file until it is closed.</p>
<p>Remember to call <tt class="literal">close()</tt>
when you have finished with a file or pipe.
If you don't, eventually you will hit the system limit
on the number of simultaneously open files.</p>

</td></tr><tr><td valign="top"><a name="printf">printf</a></td><td><p><tt class="literal">printf(</tt><tt><em class="replaceable"><tt>format</em></tt> [<tt class="literal">,</tt> <tt><em class="replaceable">expr-list</em></tt> ]<tt class="literal">)</tt> [ <tt><em class="replaceable">dest-expr</tt></em></tt> ]</p>
<p>
<a name="IXT-11-123335" />An alternative output statement borrowed from the C language.  It can produce formatted output and also
output data without automatically producing a newline.
<em class="emphasis">format</em></tt> is a string of format
specifications and constants.
<em class="emphasis">expr-list</em></tt> is a list of
arguments corresponding to format specifiers.
See <b class="emphasis-bold"><a href="#print">print</a></b> for a description of
<em class="emphasis">dest-expr</em></tt>.</p>
<p><em class="emphasis">format</em></tt> follows the conventions of the C-language
<em class="emphasis">printf</em></tt>(3S) library function.
Here are a few of the most common formats:</p>

<table border="1" cellpadding="3">

<tr><td><tt class="literal">%s</tt></td><td><p>A string.</p>
</td></tr>
<tr><td><tt class="literal">%d</tt></td><td><p>A decimal number.</p>
</td></tr>
<tr><td><tt class="literal">%</tt><tt><em class="replaceable"><tt>n</em></tt><tt class="literal">.</tt><tt><em class="replaceable">m</em></tt><tt class="literal">f</tt></td><td><p>A floating-point number; <em class="emphasis">n</em></tt> = total number of digits.  <em class="emphasis">m</tt></em></tt> =
number of digits after decimal point.</p>
</td></tr>
<tr><td><tt class="literal">%[-]</tt><tt><em class="replaceable"><tt>nc</em></tt></td><td><p><em class="emphasis">n</tt></em></tt> specifies minimum field length for format type
<em class="emphasis">c</em></tt>, while <tt class="literal">-</tt> left-justifies value in
field; otherwise, value is right-justified.</p>
</td></tr>
</table><p>
<p>Like any string,
<em class="emphasis">format</em></tt> can also contain embedded escape sequences:
<tt class="literal">\n</tt> (newline) or <tt class="literal">\t</tt> (tab)
being the most common.
Spaces and literal text can be placed in the <em class="emphasis">format</em></tt> argument
by quoting the entire argument.
If there are multiple expressions to be printed, there should be
multiple formats specified.</p>
<h4 class="refsect2">Example</h4><p>Using the script:</p>
<blockquote><pre class="code">{ printf("The sum on line %d is %.0f.\n", NR, $1+$2) }</pre></blockquote>
<p>The following input line:</p>
<blockquote><pre class="code">5   5</pre></blockquote>
<p>produces this output, followed by a newline:</p>
<blockquote><pre class="code">The sum on line 1 is 10.</pre></blockquote>

</td></tr><tr><td valign="top"><a name="rand">rand</a></td><td><p><tt class="literal">rand()</tt></p>
<p>
<a name="IXT-11-123336" />Generate a random number between 0 and 1.  This function returns the
same series of numbers each time the script is executed, unless the random
number generator is seeded using <tt class="literal">srand()</tt>.
{N}</p>
</td></tr><tr><td valign="top"><a name="return">return</a></td><td><p><tt class="literal">return</tt> [<tt><em class="replaceable"><tt>expr</tt></em></tt>]</p>
<p>
<a name="IXT-11-123337" />Used within a user-defined function to exit the function,
returning value of <em class="emphasis">expr</em></tt>.
The return value of a function is undefined if <em class="emphasis">expr</em></tt>
is not provided.
{N}</p>
</td></tr><tr><td valign="top"><a name="sin">sin</a></td><td><p><tt class="literal">sin(</tt><tt><em class="replaceable"><tt>x</tt></em></tt><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123338" />Return the sine of <em class="emphasis">x</em></tt>, an angle in radians.
{N}</p>
</td></tr><tr><td valign="top"><a name="split">split</a></td><td><p><tt class="literal">split(</tt><tt><em class="replaceable"><tt>string</em></tt><tt class="literal">,</tt> <tt><em class="replaceable">array</em></tt> [<tt class="literal">,</tt> <tt><em class="replaceable">sep</tt></em></tt>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123339" />Split <em class="emphasis">string</em></tt> into elements of array
<em class="emphasis">array</em></tt><tt class="literal">[1]</tt>,...,<em class="emphasis">array</em></tt><tt class="literal">[</tt><em class="emphasis">n</em></tt><tt class="literal">]</tt>.
The string
is split at each occurrence of separator <em class="emphasis">sep</em></tt>.
If <em class="emphasis">sep</em></tt> is
not specified, <tt class="literal">FS</tt> is used.
The number of array elements created is
returned.</p>
</td></tr><tr><td valign="top"><a name="sprintf">sprintf</a></td><td><p><tt class="literal">sprintf(</tt><tt><em class="replaceable"><tt>format</em></tt> [<tt class="literal">,</tt> <tt><em class="replaceable">expressions</tt></em></tt>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123340" />Return the formatted value of one or more <em class="emphasis">expressions</em></tt>, 
using the specified <em class="emphasis">format</em></tt>
(see <b class="emphasis-bold"><a href="#printf">printf</a></b>).  Data is formatted but not printed.
{N}</p>
</td></tr><tr><td valign="top"><a name="sqrt">sqrt</a></td><td><p><tt class="literal">sqrt(</tt><tt><em class="replaceable"><tt>arg</tt></em></tt><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123341" />Return square root of <em class="emphasis">arg</em></tt>.</p>
</td></tr>



<tr><td valign="top"><a name="srand">srand</a></td><td><p><tt class="literal">srand(</tt>[<tt><em class="replaceable"><tt>expr</tt></em></tt>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123342" />Use optional <em class="emphasis">expr</em></tt> to set a new seed for the
random number generator.
Default is the time of day.
Return value is the old seed.
{N}</p>
</td></tr><tr><td valign="top"><a name="strftime">strftime</a></td><td><p><tt class="literal">strftime(</tt>[<tt><em class="replaceable"><tt>format</em></tt> [<tt class="literal">,</tt><tt><em class="replaceable">timestamp</tt></em></tt>]]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123343" />Format <em class="emphasis">timestamp</em></tt> according to <em class="emphasis">format</em></tt>.
Return the formatted string.
The <em class="emphasis">timestamp</em></tt> is a time-of-day value in
seconds since midnight, January 1, 1970, UTC.
The <em class="emphasis">format</em></tt> string is similar to that of
<tt class="literal">sprintf</tt>.
(See the Example for <b class="emphasis-bold"><a href="#systime">systime</a></b>.)
If <em class="emphasis">timestamp</em></tt> is omitted, it defaults to the
current time.
If <em class="emphasis">format</em></tt> is omitted, it defaults to a value
that produces output similar to that of <tt class="literal">date</tt>.
{G}</p>
</td></tr><tr><td valign="top"><a name="sub">sub</a></td><td><p><tt class="literal">sub(</tt><tt><em class="replaceable"><tt>r</em></tt><tt class="literal">,</tt> <tt><em class="replaceable">s</em></tt> [<tt class="literal">,</tt> <tt><em class="replaceable">t</tt></em></tt>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123344" />Substitute <em class="emphasis">s</em></tt> for first match of the
regular expression <em class="emphasis">r</em></tt> in the string <em class="emphasis">t</em></tt>.
If <em class="emphasis">t</em></tt> is not supplied,
defaults to <tt class="literal">$0</tt>.
Return 1 if successful; 0 otherwise.
{N}</p>
</td></tr><tr><td valign="top"><a name="substr">substr</a></td><td><p><tt class="literal">substr(</tt><tt><em class="replaceable"><tt>string</em></tt><tt class="literal">,</tt> <tt><em class="replaceable">beg</em></tt> <tt class="literal">[,</tt> <tt><em class="replaceable">len</tt></em></tt>]<tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123345" />Return substring of <em class="emphasis">string</em></tt> at beginning
position <em class="emphasis">beg</em></tt> and the characters that
follow to maximum specified length <em class="emphasis">len</em></tt>.  If
no length is given, use the rest of the string.</p>
</td></tr><tr><td valign="top"><a name="system">system</a></td><td><p><tt class="literal">system(</tt><tt><em class="replaceable"><tt>command</tt></em></tt><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123346" />Function that executes the specified
<em class="emphasis">command</em></tt> and returns its status.  The status
of the executed command typically indicates success or failure.  A
value of 0 means that the command executed successfully. A nonzero
value indicates a failure of some sort.
The documentation for the command you're running will give you the
details.</p>
<p>The output of the command is <em class="emphasis">not</em></tt> available for processing
within the <tt class="literal">awk</tt> script.
Use <em class="emphasis">command</em></tt> <tt class="literal">| getline</tt>
to read the output of a command into the script.
{N}</p>
</td></tr><tr><td valign="top"><a name="systime">systime</a></td><td><p><tt class="literal">systime()</tt></p>
<p>
<a name="IXT-11-123347" />Return a
time-of-day value in
seconds since midnight, January 1, 1970, UTC.
{G}</p>
<h4 class="refsect2">Example</h4><p>Log the start and end times of a data-processing program:</p>

<blockquote><pre class="code">BEGIN {
	now = systime()
	mesg = strftime("Started at %m/%d/%Y %H:%M:%S", now)
	print mesg
}
<tt><em class="replaceable"><tt>process data ...</tt></em></tt>
END {
	now = systime()
	mesg = strftime("Ended at %m/%d/%Y %H:%M:%S", now)
	print mesg
}</pre></blockquote>

</td></tr><tr><td valign="top"><a name="tolower">tolower</a></td><td><p><tt class="literal">tolower(</tt><tt><em class="replaceable"><tt>str</tt></em></tt><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123348" />Translate all uppercase characters
in <em class="emphasis">str</em></tt> to lowercase and return the new string.<a href="#FOOTNOTE-15">[15]</a>
{N}</p><blockquote class="footnote"><a name="FOOTNOTE-15" /><p> [15]Very early versions of <tt class="literal">nawk</tt>
don't support <tt class="literal">tolower()</tt> and
<tt class="literal">toupper()</tt>. However, they are now part of
the POSIX specification for <tt class="literal">awk</tt>, and are
included in the SVR4 <tt class="literal">nawk</tt>.</p>
</blockquote>
</td></tr><tr><td valign="top"><a name="toupper">toupper</a></td><td><p><tt class="literal">toupper(</tt><tt><em class="replaceable"><tt>str</tt></em></tt><tt class="literal">)</tt></p>
<p>
<a name="IXT-11-123349" />Translate all lowercase characters
in <em class="emphasis">str</em></tt> to uppercase and return the new string.
{N}</p>
</td></tr><tr><td valign="top"><a name="while">while</a></td><td><p><tt class="literal">while (</tt><tt><em class="replaceable"><tt>condition</em></tt><tt class="literal">)</tt><br>&#160;&#160;&#160;&#160;<tt><em class="replaceable">statement</tt></em></tt></p>
<p>
<a name="IXT-11-123350" />Do <em class="emphasis">statement</em></tt> while <em class="emphasis">condition</em></tt> is true
(see <tt class="literal">if</tt> for a
description of allowable conditions).
A series of statements must be put within braces.</p>
</td></tr></table><p>

<a name="unut-ch-11-sect-10.1" /><div class="sect2"><h3 class="sect2">11.10.1. printf Formats</h3><p>Format specifiers for <tt class="literal">printf</tt> and <tt class="literal">sprintf</tt>
have the following form:</p>
<blockquote><pre class="code"><tt class="literal">%</tt>[<tt><em class="replaceable"><tt>flag</em></tt>][<tt><em class="replaceable">width</em></tt>][<tt class="literal">.</tt><tt><em class="replaceable">precision</tt></em></tt>]<tt class="literal">letter</tt></pre></blockquote><p>The control letter is required.
The format conversion control letters are as follows.</p>
<table border="1" cellpadding="3"><tr><th><em class="emphasis">Character</em></tt></th><th><em class="emphasis">Description</em></tt></th></tr>

<tr><td><tt class="literal">c</tt></td><td>ASCII character</td></tr>
<tr><td><tt class="literal">d</tt></td><td>Decimal integer</td></tr>
<tr><td><tt class="literal">i</tt></td><td>Decimal integer (added in POSIX)</td></tr>
<tr><td><tt class="literal">e</tt></td><td>Floating-point format ([-]<em class="emphasis">d</em></tt>.<em class="emphasis">precision</em></tt><tt class="literal">e</tt>[+-]<em class="emphasis">dd</em></tt>)</td></tr>
<tr><td><tt class="literal">E</tt></td><td>Floating-point format ([-]<em class="emphasis">d</em></tt>.<em class="emphasis">precision</em></tt><tt class="literal">E</tt>[+-]<em class="emphasis">dd</em></tt>)</td></tr>
<tr><td><tt class="literal">f</tt></td><td>Floating-point format ([-]<em class="emphasis">ddd</em></tt>.<em class="emphasis">precision</em></tt>)</td></tr>
<tr><td><tt class="literal">g</tt></td><td><tt class="literal">e</tt> or <tt class="literal">f</tt> conversion, whichever is shortest, with trailing zeros removed</td></tr>
<tr><td><tt class="literal">G</tt></td><td><tt class="literal">E</tt> or <tt class="literal">f</tt> conversion, whichever is shortest, with trailing zeros removed</td></tr>
<tr><td><tt class="literal">o</tt></td><td>Unsigned octal value</td></tr>
<tr><td><tt class="literal">s</tt></td><td>String</td></tr>
<tr><td><tt class="literal">x</tt></td><td>Unsigned hexadecimal number; uses <tt class="literal">a</tt>-<tt class="literal">f</tt> for 10 to 15</td></tr>
<tr><td><tt class="literal">X</tt></td><td>Unsigned hexadecimal number; uses <tt class="literal">A</tt>-<tt class="literal">F</tt> for 10 to 15</td></tr>
<tr><td><tt class="literal">%</tt></td><td>Literal <tt class="literal">%</tt></td></tr>
</table><p>
<p>The optional <em class="emphasis">flag</em></tt> is one of the following.</p>
<table border="1" cellpadding="3">

<tr><th><em class="emphasis">Character</em></tt></th><th><em class="emphasis">Description</em></tt></th></tr>

<tr><td><tt class="literal">-</tt></td><td><p>Left-justify the formatted value within the field.</p>
</td></tr>
<tr><td><em class="emphasis">space</em></tt></td><td><p>Prefix positive values with a space and negative values with a minus.</p>
</td></tr>
<tr><td><tt class="literal">+</tt></td><td><p>Always prefix numeric values with a sign,
even if the value is positive.</p>
</td></tr>
<tr><td><tt class="literal">#</tt></td><td><p>Use an alternate form:
<tt class="literal">%o</tt> has a preceding <tt class="literal">0</tt>;
<tt class="literal">%x</tt> and <tt class="literal">%X</tt> are prefixed with
<tt class="literal">0x</tt> and <tt class="literal">0X</tt>, respectively;
<tt class="literal">%e</tt>, <tt class="literal">%E</tt>, and <tt class="literal">%f</tt>
always have a decimal point in the result;
and
<tt class="literal">%g</tt> and <tt class="literal">%G</tt> do not have
trailing zeros removed.</p>
</td></tr>
<tr><td><tt class="literal">0</tt></td><td><p>Pad output with zeros, not spaces.
This happens only when the field width is wider than the converted result.</p>
</td></tr>
</table><p>
<p>The optional <em class="emphasis">width</em></tt> is the minimum number of characters to
output.
The result will be padded to this size if it is smaller.
The <tt class="literal">0</tt> flag causes padding with zeros; otherwise,
padding is with spaces.</p>
<p>The <em class="emphasis">precision</em></tt> is optional.
Its meaning varies by control letter,
as shown in this table.</p>
<table border="1" cellpadding="3"><tr><th><em class="emphasis">Conversion</em></tt></th><th><em class="emphasis">Precision Means</em></tt></th></tr>


<tr><td><p><tt class="literal">%d</tt>, <tt class="literal">%i</tt>, <tt class="literal">%o</tt></p>
<p><tt class="literal">%u</tt>, <tt class="literal">%x</tt>, <tt class="literal">%X</tt></p>
</td>

<td>The minimum number of digits to print</td></tr>


<tr><td><tt class="literal">%e</tt>, <tt class="literal">%E</tt>, <tt class="literal">%f</tt></td>

<td>The number of digits to the right of the decimal point</td></tr>


<tr><td><tt class="literal">%g</tt>, <tt class="literal">%G</tt></td><td>The maximum number of significant digits</td></tr>
<tr><td><tt class="literal">%s</tt></td><td>The maximum number of characters to print</td></tr>
</table><p>
<a name="IXT-11-123351" />
<a name="IXT-11-123352" />
<a name="IXT-11-123353" /></div>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch11_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="part3.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">11.9. Implementation Limits</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">III. Text Formatting</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>
