<html><head><title>Nested Command Substitution (Unix Power Tools, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Shelley Powers, Jerry Peek, Tim O'Reilly, Mike Loukides and  " /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00330-7" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX Power Tools, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Unix Power Tools" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Unix Power Tools" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch36_23.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch36_25.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">36.24. Nested Command Substitution</h2>

<p><a name="IXT-36-3404" /><a name="IXT-36-3405" /><a name="IXT-36-3406" /><a href="ch28_14.htm#upt3-CHP-28-SECT-14">Section 28.14</a> introduced command substitution with a pair of
backquotes (<tt class="literal">''</tt>). Let's review.
The shell runs a backquoted string as a command, then replaces the
string with its output. Sometimes -- though not as
often -- you'll want to use the results from one
backquoted string as arguments to another command, itself also inside
backquotes. To do that, you need to nest the backquotes to tell the
shell which command (which set of backquotes) should be done first,
with its output given to the second command. This is tricky with
backquotes; the Korn shell introduced an easier way that
you'll see below. Here's a simple
example -- the first command line uses nested backquotes, and the
next two commands show its parts:<a href="#FOOTNOTE-116">[116]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-116" /><p> [116]True, this
won't work after 2008. Also true, most shells have
built-in arithmetic, and some can zero-pad results. But this
<em class="emphasis">is</em> a simple example!</p> </blockquote>

<blockquote><pre class="code">$ <tt class="userinput"><b>echo "Next year will be 200`expr \`date +%y\` + 1`."</b></tt>
Next year will be 2002.
$ <tt class="userinput"><b>date +%y</b></tt>
01
$ <tt class="userinput"><b>expr 01 + 1</b></tt>
2</pre></blockquote>

<p><a name="IXT-36-3407" />The command to run
first has escaped backquotes (<tt class="literal">\'\'</tt>) around it. In
the example above, that's the <tt class="literal">date
+%y</tt> command. <tt class="literal">date +%y</tt> outputs the
year -- in this case, <tt class="literal">01</tt> -- and that value
is passed to the <i class="command">expr</i> command.
<i class="command">expr</i> adds 01 and 1 to get 2. Then that result
(from the outer backquotes) is passed to <i class="command">echo</i>, on
its command line, and <i class="command">echo</i> prints the message.
</p>

<p>Why does the inner command, inside the escaped backquotes
(<tt class="literal">\'\'</tt>), run first? It's because
the backslash before the backquote <b class="emphasis-bold">turns off
the special meaning</b> (<a href="ch27_12.htm#upt3-CHP-27-SECT-12">Section 27.12</a>) of the
backquote. When the shell first evaluates the command line, which
backquotes does it see? It sees the unescaped backquotes, the ones
around the <tt class="literal">expr</tt> command, and the shell runs the
command:
</p>

<blockquote><pre class="code">expr `date +%y` + 1</pre></blockquote>

<p>But when the shell evaluates that command line, it sees the
backquotes in it (now unescaped) and runs <em class="emphasis">that</em>
command -- <tt class="literal">date +%y</tt>. The <tt class="literal">date
+%y</tt> command outputs <tt class="literal">01</tt>. Next, the shell
can finish the command <tt class="literal">expr 01 + 1</tt>. It outputs 2.
Then the <i class="command">echo</i> command can print its message.
</p>

<p><a name="IXT-36-3408" />Whew. Most newer
Bourne-type shells have an easier way: the
<tt class="literal">$(</tt><em class="replaceable"><tt>command</tt></em><tt class="literal">)</tt>
operators. Use <tt class="literal">$(</tt> before the command, where you
would use an opening backquote. Put the <tt class="literal">)</tt> after
the command, in place of a closing backquote. You
don't have to escape these operators when you nest
them.
</p>

<p>Here's the previous example with <tt class="literal">$(
)</tt>, then a more real-life example:
</p>

<p><tt class="literal">2&gt;&amp;1</tt> <a href="ch36_16.htm#upt3-CHP-36-SECT-16">Section 36.16</a></p>
<a name="IXT-36-3409" />

<blockquote><pre class="code">$ <tt class="userinput"><b>echo "Next year will be 200$(expr $(date +%y) + 1)."</b></tt>
Next year will be 2002.

$ <tt class="userinput"><b>tarout=$(tar cf /dev/rst1 $(find . -type f -mtime -1 -print) 2&gt;&amp;1)</b></tt>
    <i class="lineannotation">time passes...</i>
$ <tt class="userinput"><b>echo "$tarout"</b></tt>
tar: ./files/145923: Permission denied</pre></blockquote>

<p><a name="IXT-36-3410" />The inner command -- in this
case, the <b class="emphasis-bold">find</b> (<a href="ch09_01.htm#upt3-CHP-9-SECT-1">Section 9.1</a>) -- is run first. Its output, a list of
filenames, is put on the command line of the <b class="emphasis-bold">tar</b> (<a href="ch38_02.htm#upt3-CHP-38-SECT-2">Section 38.2</a>) command.
Finally, the output of <i class="command">tar</i> (in this case, an error
message) is stored in the <em class="emphasis">tarout</em> shell variable.
</p>

<p>Beginners (and some long-time programmers too) might argue that you
should never nest command substitution because it's
too confusing. I think there are times nesting is clearer.
It's more compact and doesn't need
temporary storage. And it's not that hard to
understand once you see what's happening.
There's another nice example in <a href="ch24_16.htm#upt3-CHP-24-SECT-16">Section 24.16</a>. 
</p>

<p> <em class="emphasis">-- JP</em></p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch36_23.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch36_25.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">36.23. Grabbing Parts of a String</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">36.25. Testing Two Strings with One case Statement</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>