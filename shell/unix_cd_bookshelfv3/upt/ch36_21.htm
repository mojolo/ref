<html><head><title>Quick Reference: expr (Unix Power Tools, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Shelley Powers, Jerry Peek, Tim O'Reilly, Mike Loukides and  " /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00330-7" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX Power Tools, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Unix Power Tools" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Unix Power Tools" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch36_20.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch36_22.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">36.21. Quick Reference: expr</h2>

<p><a name="upt3-IDXTERM-5920" /> <a name="upt3-IDXTERM-5921" /><i class="command">expr</i> is a very
handy tool in shell programming, since it provides the ability to
evaluate a wide range of arithmetic, logical, and relational
expressions. It evaluates its arguments as expressions and prints the
result.
</p>

<a name="upt3-CHP-36-SECT-21.1" /><div class="sect2">
<h3 class="sect2">36.21.1. Syntax</h3>

<p><a name="IXT-36-3331" />Here's
the syntax. The [brackets] mean
"optional"; don't
type the brackets:
</p>


<p><tt class="literal">expr</tt> <em class="replaceable"><tt>arg1 operator arg2</tt></em>
<tt class="literal">[</tt> <em class="replaceable"><tt>operator arg3</tt></em>
<tt class="literal">... ]</tt>
</p>


<p>Arguments and operators must be separated by spaces. In many cases,
an argument is an integer, typed literally or represented by a shell
variable. There are three types of operators: arithmetic, relational,
and logical.
</p>

<p><a name="IXT-36-3332" /> <a name="IXT-36-3333" /><b class="emphasis-bold">Exit
status</b> (<a href="ch35_12.htm#upt3-CHP-35-SECT-12">Section 35.12</a>) values for
<i class="command">expr</i> are 0 if the expression evaluates nonzero and
non-null, 1 if the expression evaluates to 0 or null, and 2 if the
expression is invalid.
</p>

<dl>
<a name="IXT-36-3334" /><a name="IXT-36-3335" /><a name="IXT-36-3336" /><dt><i><em class="emphasis">Arithmetic operators</em></tt></i></dt>
<dd>
Use these to produce mathematical expressions whose results are
printed:
</p>

<dl>
<dt><tt class="literal">+</tt></dt>
<dd>
<a name="IXT-36-3337" />Add
<em class="replaceable"><tt>arg2</em> to <em class="replaceable">arg1</tt></em>.
</p>
</dd>


<dt><tt class="literal">-</tt></dt>
<dd>
<a name="IXT-36-3338" /><tt class="literal">Subtract</tt>
<tt><em class="replaceable"><tt>arg2</em></tt> from <tt><em class="replaceable">arg1</tt></em></tt>.
</p>
</dd>


<dt><tt class="literal">*</tt></dt>
<dd>
<a name="IXT-36-3339" />Multiply the
arguments.
</p>
</dd>


<dt><tt class="literal">/</tt></dt>
<dd>
<a name="IXT-36-3340" />Divide
<tt><em class="replaceable"><tt>arg1</em></tt> by <tt><em class="replaceable">arg2</tt></em></tt>.
</p>
</dd>


<dt><tt class="literal">%</tt></dt>
<dd>
<a name="IXT-36-3341" /><a name="IXT-36-3342" />Take
the <a name="IXT-36-3343" />remainder when
<em class="replaceable"><tt>arg1</tt></em> is divided by
<em class="replaceable"><tt>arg2</tt></em> (modulus).
</p>
</dd>

</dl>

<p>Addition and subtraction are evaluated last, unless they are grouped
inside parentheses. The symbols <tt class="literal">*</tt>,
<tt class="literal">(</tt>, and <tt class="literal">)</tt> have meaning to the
shell, so they must be escaped (preceded by a backslash or enclosed
in quotes).
</p>
</dd>


<a name="IXT-36-3344" /><a name="IXT-36-3345" /><a name="IXT-36-3346" /><dt><i><em class="emphasis">Relational operators</em></tt></i></dt>
<dd>
Use these to compare two arguments. Arguments can also be words, in
which case comparisons assume a <tt class="literal">&lt;</tt> z and A
<tt class="literal">&lt;</tt> Z. If the comparison statement is true,
<i class="command">expr</i> writes 1 to <b class="emphasis-bold">standard
output</b> (<a href="ch43_01.htm#upt3-CHP-43-SECT-1">Section 43.1</a>); if false, it writes
0. The symbols <tt class="literal">&gt;</tt> and <tt class="literal">&lt;</tt>
must be escaped.
</p>

<dl>
<dt><tt class="literal">=</tt></dt>
<dd>
<a name="IXT-36-3347" />Are the arguments equal?
</p>
</dd>


<dt><tt class="literal">!=</tt></dt>
<dd>
<a name="IXT-36-3348" />Are the arguments different?
</p>
</dd>


<dt><tt class="literal">&gt;</tt></dt>
<dd>
<a name="IXT-36-3349" /> <a name="IXT-36-3350" />Is
<em class="replaceable"><tt>arg1</tt></em> greater than
<em class="replaceable"><tt>arg2</tt></em>?
</p>
</dd>


<dt><tt class="literal">&gt;=</tt></dt>
<dd>
<a name="IXT-36-3351" />Is
<tt><em class="replaceable"><tt>arg1</tt></em></tt> greater than or equal to
<tt><em class="replaceable"><tt>arg2</tt></em></tt>?
</p>
</dd>


<dt><tt class="literal">&lt;</tt></dt>
<dd>
<a name="IXT-36-3352" /> <a name="IXT-36-3353" />Is
<em class="replaceable"><tt>arg1</tt></em> less than
<em class="replaceable"><tt>arg2</tt></em>?
</p>
</dd>


<dt><tt class="literal">&lt;=</tt></dt>
<dd>
<a name="IXT-36-3354" />Is
<tt><em class="replaceable"><tt>arg1</tt></em></tt> less than or equal to
<tt><em class="replaceable"><tt>arg2</tt></em></tt>?
</p>
</dd>

</dl>
</dd>


<a name="IXT-36-3355" /><a name="IXT-36-3356" /><dt><i><em class="emphasis">Logical operators</em></tt></i></dt>
<dd>
Use these to compare two <a name="IXT-36-3357" />arguments. Depending on the values, the
result written to standard output can be
<em class="replaceable"><tt>arg1</tt></em> (or some portion of it),
<em class="replaceable"><tt>arg2</tt></em>, or 0. The symbols
<tt class="literal">|</tt> and <tt class="literal">&amp;</tt> must be escaped.
</p>

<dl>
<dt><tt class="literal">|</tt></dt>
<dd>
<a name="IXT-36-3358" /> <a name="IXT-36-3359" />Logical OR; if
<tt><em class="replaceable"><tt>arg1</tt></em></tt> has a nonzero (and non-null) value,
the output is <tt><em class="replaceable"><tt>arg1</tt></em></tt>; otherwise, the output
is <tt><em class="replaceable"><tt>arg2</tt></em></tt>.
</p>
</dd>


<dt><tt class="literal">&amp;</tt></dt>
<dd>
<a name="IXT-36-3360" /><a name="IXT-36-3361" />Logical AND; if both
<em class="replaceable"><tt>arg1</em> and <em class="replaceable">arg2</tt></em>
have a nonzero (and non-null) value, the output is
<em class="replaceable"><tt>arg1</tt></em>; otherwise, the output is 0.
</p>
</dd>


<dt><i>:</i></dt>
<dd>
<a name="IXT-36-3362" />Sort of like <b class="emphasis-bold">grep</b> (<a href="ch13_01.htm#upt3-CHP-13-SECT-1">Section 13.1</a>);
<tt><em class="replaceable"><tt>arg2</tt></em></tt> is a <b class="emphasis-bold">regular
expression</b> (<a href="ch32_04.htm#upt3-CHP-32-SECT-4">Section 32.4</a>) to search for in
<tt><em class="replaceable"><tt>arg1</tt></em></tt>. If the
<tt><em class="replaceable"><tt>arg2</tt></em></tt> pattern is enclosed in <tt class="literal">\(
\)</tt>, the output is the portion of
<tt><em class="replaceable"><tt>arg1</tt></em></tt> that matches; otherwise, the output
is simply the number of characters that match. A pattern match always
applies to the beginning of the argument (the <b class="emphasis-bold">^
symbol</b> (<a href="ch32_05.htm#upt3-CHP-32-SECT-5">Section 32.5</a>) is assumed by
default).
</p>
</dd>

</dl>
</dd>

</dl>
</div>
<a name="upt3-CHP-36-SECT-21.2" /><div class="sect2">
<h3 class="sect2">36.21.2. Examples</h3>

<p><a name="IXT-36-3363" />Division happens first; output is 10:
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr 5 + 10 / 2</b></tt></pre></blockquote>

<p>Addition happens first; output is 7 (truncated from 7.5):</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr \( 5 + 10 \) / 2</b></tt></pre></blockquote>

<p>Add 1 to variable <em class="emphasis">i</em></tt>; this is how variables are
incremented in Bourne shell scripts:
</p>

<blockquote><pre class="code"><tt class="userinput"><b>i=`expr "$i" + 1`</b></tt></pre></blockquote>

<p><a name="IXT-36-3364" />Output 1 (true) if variable
<em class="emphasis">a</em></tt> is the string
"hello":
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr "$a" = hello</b></tt></pre></blockquote>

<p>Output 1 (true) if variable <em class="emphasis">b</em></tt> plus 5 equals 10
or more:
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr "$b" + 5 \&gt;= 10</b></tt></pre></blockquote>

<p>In the examples below, variable <em class="emphasis">p</em></tt> is the string
"version.100". This command returns
the number of characters in <em class="emphasis">p</em></tt>:
</p>

<a name="IXT-36-3365" /><blockquote><pre class="code">$ <tt class="userinput"><b>expr "$p" : '.*'</b></tt>           <i class="lineannotation">Output is 11</i></pre></blockquote>

<p>Match all characters and print them:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr "$p" : '\(.*\)'</b></tt>       <i class="lineannotation">Output is "version.100"</i></pre></blockquote>

<p>Output the number of lowercase letters matched:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr "$p" : '[a-z]*'</b></tt>       <i class="lineannotation">Output is 7</i></pre></blockquote>

<p>Match a string of lowercase letters:</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr "$p" : '\([a-z]*\)'</b></tt>   <i class="lineannotation">Output is "version"</i></pre></blockquote>

<p>Truncate <tt class="literal">$x</tt> if it contains five or more
characters; if not, just output <tt class="literal">$x</tt>. (Logical OR
uses the second argument when the first one is 0 or null, i.e., when
the match fails.)
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>expr "$x" : '\(.....\)'  "$x"</b></tt></pre></blockquote>

<p> <em class="emphasis">-- DG<a name="IXTR3-3447" /> <a name="IXTR3-3448" /></em></tt>
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch36_20.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch36_22.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">36.20. Turn Off echo for "Secret" Answers</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">36.22. Testing Characters in a String with expr</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>