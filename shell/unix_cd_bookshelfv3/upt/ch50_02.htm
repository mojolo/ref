<html><head><title>Tutorial on File and Directory Permissions (Unix Power Tools, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Shelley Powers, Jerry Peek, Tim O'Reilly, Mike Loukides and  " /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00330-7" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX Power Tools, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Unix Power Tools" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Unix Power Tools" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch50_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch50_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">50.2. Tutorial on File and Directory Permissions</h2>

<p><a name="IXT-50-980" /><a name="IXT-50-981" />Regardless
of how much you think you know about file permissions,
there's always something new to learn.
</p>

<p><a name="IXT-50-982" /><a name="IXT-50-983" />There
are three basic attributes for plain file permissions: read, write,
and execute. Read and write permission obviously let you read the
data from a file or write new data to the file. When you have execute
permission, you can use the file as a program or shell script. The
characters used to describe these permissions are
<tt class="literal">r</tt>, <tt class="literal">w</tt>, and <tt class="literal">x</tt>,
for e<em class="emphasis">x</em>ecute.
</p>

<p>Directories use these same permissions, but they have a different
meaning. <a name="IXT-50-984" /><a name="IXT-50-985" /><a name="IXT-50-986" />If a directory has read
permission, you can see what files are in the directory. Write
permission means you can add, remove, or rename files in the
directory. Execute allows you to use the directory name when
accessing files inside that directory. (<a href="ch10_02.htm#upt3-CHP-10-SECT-2">Section 10.2</a> has more information
about what's in a directory.) Let's examine this more closely.
</p>

<p>Suppose you have read access to a directory but
don't have execute access to the files contained in
it. You can still read the directory, or <em class="emphasis">inode</em>
information for that file, as returned by the
<em class="emphasis">stat</em>(2) system call. That is, you can see the
file's name, permissions, size, access times, owner
and group, and number of links. You just cannot read the contents of
the file.
</p>

<p><a name="IXT-50-987" />Write permission in a directory allows you
to change the contents in it. Because the name of the file is stored
in the directory and not the file, <em class="emphasis">write permission in a
directory allows creation, renaming, or deletion of files</em>.
To be specific, if someone has write permission to your home
directory, they can rename or delete your <em class="emphasis">.login</em>
file and put a new file in its place. The permissions of your
<em class="emphasis">.login</em> file do not matter in this regard.
Someone can rename a file even if they can't read
the contents of a file. (See <a href="ch50_09.htm#upt3-CHP-50-SECT-9">Section 50.9</a>.)
</p>

<p>Execute permission on a directory is sometimes called
<a name="IXT-50-988" /><a name="IXT-50-989" /> <a name="IXT-50-990" />search permission. If a directory
gives you execute but not read permission, you can use any file in
that directory; however, you <em class="emphasis">must</em> know the name.
You cannot look inside the directory to find out the names of the
files. Think of this type of directory as a black box. You can throw
filenames at this directory, and sometimes you find a file, sometimes
you don't. (See <a href="ch50_10.htm#upt3-CHP-50-SECT-10">Section 50.10</a>.) 
</p>

<a name="upt3-CHP-50-SECT-2.1" /><div class="sect2">
<h3 class="sect2">50.2.1. User, Group, and World</h3>

<p><a name="IXT-50-991" />All
<a name="IXT-50-992" /><a name="IXT-50-993" /><a name="IXT-50-994" /> <a name="IXT-50-995" />files have an owner and group
associated with them. There are three sets of read/write/execute
permissions: one set for the user or owner of the file, one set for
the <b class="emphasis-bold">group</b> (<a href="ch49_06.htm#upt3-CHP-49-SECT-6">Section 49.6</a>) of the file, and one set for everyone else.
These permissions are determined by nine bits in the
<a name="IXT-50-996" />inode information and are represented by
the characters <tt class="literal">rwxrwxrwx</tt> in an <em class="emphasis">ls
-l</em><a name="IXT-50-997" /> listing:<a href="#FOOTNOTE-134">[134]</a>
</p><blockquote class="footnote"> <a name="FOOTNOTE-134" /><p> [134]On some Unix
systems, <em class="emphasis">ls -l</em> produces an eight-column listing
without the group name (here, <tt class="literal">books</tt>). Use
<em class="emphasis">ls -lg</em> to get the listing format shown
here.</p> </blockquote>

<blockquote><pre class="code">% <tt class="userinput"><b>ls -l</b></tt>
drwxr-xr-x  3 jerry   books      512 Feb 14 11:31 manpages
-rw-r--r--  1 jerry   books    17233 Dec 10  2001 misc.Z
-rwxr-xr-x  1 tim     books      195 Mar 29 18:55 myhead</pre></blockquote>

<p>The first character in the <em class="emphasis">ls -l</em> listing
<b class="emphasis-bold">specifies the type of file</b> (<a href="ch09_13.htm#upt3-CHP-9-SECT-13">Section 9.13</a>). The first three of the nine permissions
characters that follow specify the user; the middle three, the group;
and the last three, the world. If the permission is not true, a dash
is used to indicate lack of privilege. If you want to have a data
file that you can read or write but don't want
anyone else to access, the permissions would be
<tt class="literal">rw-------</tt>.
</p>

<p><a name="IXT-50-998" /> <a name="IXT-50-999" />An easier way to specify these nine bits is
with three octal digits instead of nine characters. (<a href="ch01_17.htm#upt3-CHP-1-SECT-17">Section 1.17</a> has diagrams of permission bits and explains
how to write permissions as an octal number.) The order is the same,
so the above permissions can be described by the octal number 600.
The first number specifies the owner's permission.
The second number specifies the group's permission.
The last number specifies permission to everyone who is not the owner
or not in the group of the file [although permissions
don't apply to the <b class="emphasis-bold">superuser</b> (<a href="ch01_18.htm#upt3-CHP-1-SECT-18">Section 1.18</a>), who
can do anything to any file or directory.
 <em class="emphasis">-- JP</em>].
</p>

<p>This last point is subtle. When testing for permissions, the system
looks at the groups in order. If you are denied permission, Unix does
not examine the next group. Consider the case of a file that is owned
by user <em class="emphasis">jo</em>, is in the group
<em class="emphasis">guests</em>, and has the permissions
<tt class="literal">-----xrwx</tt>, or 017 in octal. This has the result
that user <em class="emphasis">jo</em> cannot use the file, anyone in
group <em class="emphasis">guests</em> can execute the program, and
everyone else besides <em class="emphasis">jo</em> and
<em class="emphasis">guests</em> can read, write, and execute the program.
<a name="IXT-50-1000" /><a name="IXT-50-1001" />This is not a very common set of
permissions, but some people use a <b class="emphasis-bold">similar
mechanism</b> (<a href="ch49_07.htm#upt3-CHP-49-SECT-7">Section 49.7</a>) to deny one group
of users from accessing or using a file. In the above case,
<em class="emphasis">jo</em> cannot read or write the file she owns. She
could use the <b class="emphasis-bold">chmod</b>
(<a name="IXT-50-1002" /><a href="ch50_05.htm#upt3-CHP-50-SECT-5">Section 50.5</a>) command
to grant herself permission to read the file. However, if the file
was in a directory owned by someone else, and the directory did not
give <em class="emphasis">jo</em> read or search permission, she would not
be able to find the file to change its permission.
</p>

<p>The above example is an extreme case. Most of the time permissions
fall into four cases:
</p>

<ol><li>
<p><a name="IXT-50-1003" /><a name="IXT-50-1004" />The information is personal. Many people
have a directory or two in which they store information they do not
wish to be public. Mail should probably be confidential, and all of
your mailbox files should be in a directory with permissions of 700,
denying everyone but yourself and the superuser read access to your
letters. (See <a href="ch07_05.htm#upt3-CHP-7-SECT-5">Section 7.5</a>.)
</p>
</li><li>
<p><a name="IXT-50-1005" />The
information is not personal, yet no one should be able to modify the
information. Most of my directories are set up this way, with the
permissions of 755.
</p>
</li><li>
<p><a name="IXT-50-1006" />The files are managed by a team
of people. This means group-write permission, or directories with the
mode 775.
</p>
</li><li>
<p>In the previous case, for confidential projects, you may want to deny
access to people outside the group. In this case, make directories
with mode 770.
</p>
</li></ol>
<p>You could just create a directory with the proper permissions and put
the files inside the directory, hoping the permissions of the
directory will "protect" the files
in the directory. This is not adequate. Suppose you had a directory
with permissions 755 and a file with permissions 666 inside the
directory. Anyone could change the contents of this file because the
world has <a name="IXT-50-1007" /><a name="IXT-50-1008" />search access on the directory and write
access to the file.
</p>

<p><img src="figs/www.gif" alt="Figure " width="25" /> Go to <a href="http://examples.oreilly.com/upt3">http://examples.oreilly.com/upt3</a> for more information on: umask.csh, umask.sh</p>

<p>What is needed is a mechanism to prevent any new file from having
<a name="IXT-50-1009" />world-write access. This mechanism
exists with the <a name="IXT-50-1010" /><i class="command">umask</i> command. If
you consider that a new directory would get permissions of 777, and
that new files would get permissions of 666, the
<i class="command">umask</i> command specifies permissions to
"take away" from all new files. To
"subtract" world-write permission
from a file, 666 must have 002
"subtracted" from the default value
to get 664. To subtract group and world write, 666 must have 022
removed to leave 644 as the permissions of the file. These two values
of <em class="emphasis">umask</em> are so common that it is useful to have
some <b class="emphasis-bold">aliases</b> (<a href="ch49_04.htm#upt3-CHP-49-SECT-4">Section 49.4</a>) defined:
</p>

<blockquote><pre class="code">alias open umask 002
alias shut umask 022</pre></blockquote>

<p>With these two values of <em class="emphasis">umask</em>, new directories
will have permissions of 775 or 755. Most people have a
<em class="emphasis">umask</em> value of one of these two values.
</p>

<p><a name="IXT-50-1011" />In a friendly work group, people tend
to use the <em class="emphasis">umask</em> of 002, which allows others in
your group to make changes to your files. Someone who uses the mask
of 022 will cause grief to others working on a project. Trying to
compile a program is frustrating when someone else owns files that
you must delete but can't. You can rename files if
this is the case or ask the system administrator for help.
</p>

<p><a name="IXT-50-1012" />Members of a team who normally use
a default umask of 022 should find a means to change the mask value
when working on the project (or else risk flames from your fellow
workers!). Besides the <i class="command">open</i> alias above, some
people have an alias that changes directories and sets the mask to
group-write permission:
</p>

<blockquote><pre class="code">alias proj "cd /usr/projects/proj;umask 002"</pre></blockquote>

<p>This isn't perfect, because people forget to use
aliases. You could have a special <i class="command">cd</i> alias and a
private shell file in each project directory that sets the
<em class="emphasis">umask</em> when you <i class="command">cd</i> there.
Other people could have similar files in the project directory with
different names. <a href="ch31_13.htm#upt3-CHP-31-SECT-13">Section 31.13</a> shows how.
</p>

<p>Still another method is to run <b class="emphasis-bold">find</b>
(<a name="IXT-50-1013" /><a href="ch09_01.htm#upt3-CHP-9-SECT-1">Section 9.1</a>) three times a day and search for files owned
by you in the project directory that have the wrong permission:
</p>

<p><tt class="literal">$USER</tt><a href="ch35_05.htm#upt3-CHP-35-SECT-5">Section 35.5</a>, <tt class="literal">xargs</tt><a href="ch28_17.htm#upt3-CHP-28-SECT-17">Section 28.17</a>, <tt class="literal">chmod</tt><a href="ch50_05.htm#upt3-CHP-50-SECT-5">Section 50.5</a></p>

<blockquote><pre class="code">% <tt class="userinput"><b>find /usr/projects -user $USER ! -perm -020 -print | \</b></tt>
<tt class="userinput"><b>xargs chmod g+w</b></tt></pre></blockquote>


<p>You can use the command <b class="emphasis-bold">crontab -e</b>
(<a name="IXT-50-1014" /><a href="ch25_02.htm#upt3-CHP-25-SECT-2">Section 25.2</a>) to
define when to run this command.
</p>

</div>
<a name="upt3-CHP-50-SECT-2.2" /><div class="sect2">
<h3 class="sect2">50.2.2. Which Group is Which?</h3>

<p><a name="IXT-50-1015" /><a name="IXT-50-1016" /><a name="IXT-50-1017" /> <a name="IXT-50-1018" />Since
group-write permission is so important in a team project, you might
be wondering how the group of a new file is determined. The answer
depends on several factors. Before I cover these, you should note
that <a name="IXT-50-1019" />Berkeley and AT&amp;T-based systems
would use different mechanisms to determine the default group.
</p>

<p>Originally Unix required you to specify a new group with the
<i class="command">newgrp</i><a name="IXT-50-1020" /> command. If there was a password for
this group in the
<em class="emphasis">/etc/group</em><a name="IXT-50-1021" /><a name="IXT-50-1022" />
file, and you were not listed as one of the members of the group, you
had to type the password to change your group.
</p>

<p>Berkeley-based versions of Unix would use the
<a name="IXT-50-1023" />current directory to
determine the group of the new file. That is, if the current
directory has <em class="emphasis">cad</em> as the group of the directory,
any file created in that directory would be in the same group. To
change the default group, just change to a different directory.
</p>

<p>Both mechanisms had their good points and bad points. The
Berkeley-based mechanism made it convenient to change groups
automatically. However, there is a fixed limit of groups one could
belong to.
<a name="IXT-50-1024" />SunOS
4 has a limit of 16 groups. Earlier versions had a limit of 8 groups.
</p>

<p>SunOS and <a name="IXT-50-1025" />System V Release 4 support both
mechanisms. The entire disk can be mounted with either the AT&amp;T
or the Berkeley mechanism. If it is necessary to control this on a
directory-by-directory basis, a special bit in the file permissions
is used. If a disk partition is mounted without the Berkeley group
mechanism, a directory with this special bit will make new files have
the same group as the directory. Without the special bit, the group
of all new files depends on the current group of the user.
</p>

<p> <em class="emphasis">-- BB</em></p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch50_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch50_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">50. File Security, Ownership, and Sharing</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">50.3. Who Will Own a New File?</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>