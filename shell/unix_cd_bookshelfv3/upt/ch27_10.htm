<html><head><title>Which One Will the C Shell Use? (Unix Power Tools, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Shelley Powers, Jerry Peek, Tim O'Reilly, Mike Loukides and  " /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00330-7" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX Power Tools, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Unix Power Tools" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Unix Power Tools" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch27_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch27_11.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">27.10. Which One Will the C Shell Use?</h2>

<p>[<a href="ch27_09.htm#upt3-CHP-27-SECT-9">Section 27.9</a> <a name="IXT-27-4866" />shows
<a name="IXT-27-4867" />how to control whether
<i class="command">bash</i> uses a built-in command, a shell function, or
an <a name="IXT-27-4868" /><a name="IXT-27-4869" /><a name="IXT-27-4870" />external command.
The way you do that in the C shell is a little, errr, different.
Chris Torek explains why, for example, <tt class="literal">\rm</tt>
disables an alias for <i class="command">rm</i> and
<tt class="literal">\cd</tt> disables the built-in <i class="command">cd</i>
command. He starts with a fairly complex explanation, then gives some
practical guidelines. At the end is a
"review" that's
easy to follow and fun too.  -- JP]
</p>

<p><a name="IXT-27-4871" /><a name="IXT-27-4872" />The C shell first breaks each
input line into a <em class="emphasis">word vector</em>. It then matches
against aliases. Since <tt class="literal">\rm</tt> does not match
<tt class="literal">rm</tt>, any alias is ignored. Eventually the C shell
fully applies any quoting (since an alias can include quotes, some of
this work must be deferred; since an alias can include multiple
words, more word vector work must be done as well; it all gets rather
hairy).
</p>

<p>The C shell implements quoting by setting the eighth bit (bit 7) of
each byte of a quoted character. Since <tt class="literal">'*'|0x80</tt> [a
character <em class="emphasis">OR</em>ed with 80 hex, a.k.a. 10000000
binary -- <em class="emphasis">JP</em>] is not the same character as
<tt class="literal">'*'</tt>, this prevents filename expansion, further
word breaking, and so on.
</p>

<p>Eventually, the shell has a fully
"parsed" line. It then compares
<tt class="literal">word[0]</tt> [the first word on the command
line -- <em class="emphasis">JP</em>] against all the built-ins. If
there is a match, it runs the corresponding built-in command (and it
is up to that command to expand any remaining words; for instance,
<tt class="literal">ls *</tt> in a directory containing only the file
<em class="emphasis">-l</em> produces a long listing, but <tt class="literal">jobs
*</tt> produces a usage message). If not, the shell performs
globbing on the current word list, producing a new word list, and
then:
</p>

<ol><li>
<p>Strips the eighth bit of each byte of each word</p>
</li><li>
<p><em class="emphasis">exec</em>( )s the resulting command.</p>
</li></ol>
<p>This means that <tt class="literal">\cd</tt> not only bypasses any alias,
but also reaches the built-in scanner as:
</p>

<blockquote><pre class="code">'c'|0x80, 'd', '\0'</pre></blockquote>

<p>which does not match the built-in command:</p>

<blockquote><pre class="code">'c', 'd', '\0'</pre></blockquote>

<p>and so does not run the <i class="command">cd</i> builtin. It is later
stripped, and the shell looks for an external program called
<i class="command">cd</i>.
</p>

<p>If you want to avoid alias substitution but not built-in matching,
you can replace:
</p>

<blockquote><pre class="code">\cd foo    <i class="lineannotation">or</i>   \rm foo</pre></blockquote>

<p>with:</p>

<blockquote><pre class="code">''cd foo   <i class="lineannotation">or</i>   ""rm foo</pre></blockquote>

<p>These do not match the aliases -- during alias scanning they have
quote pairs in front of them -- but they do match any builtin
because the quotes have by then been stripped (setting bit 7 of all
the characters contained between the two quotes, here none).
</p>

<p>Incidentally, since alias expansion occurs early, you can do some
peculiar things with it:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>[</b></tt>
Missing ].            <i class="lineannotation"> . . . on some systems, there is a command named [, sometimes standalone,
                       and sometimes symlinked to test.</i>
% <tt class="userinput"><b>alias [ echo foo</b></tt>
% <tt class="userinput"><b>[</b></tt>
foo                             <i class="lineannotation"> . . . alias expansion occurs before globbing</i>

% <tt class="userinput"><b>unalias [</b></tt>
unalias: Missing ].             <i class="lineannotation"> . . . unalias globs its arguments!</i>

% <tt class="userinput"><b>unalias \[</b></tt>
% <tt class="userinput"><b>alias unalias echo foo</b></tt>
unalias: Too dangerous to alias that.             <i class="lineannotation"> . . . the C shell attempts caution...</i>

% <tt class="userinput"><b>alias \unalias echo foo</b></tt>
% <tt class="userinput"><b>alias</b></tt>
unalias   (echo foo)
% <tt class="userinput"><b>unalias unalias</b></tt>
foo unalias                     <i class="lineannotation"> . . . but fails!</i>

% <tt class="userinput"><b>''unalias unalias</b></tt>
% <tt class="userinput"><b>alias</b></tt>
%                               <i class="lineannotation"> . . . Fortunately, there is an exit.</i></pre></blockquote>

<a name="ch27-8-fm2xml" /><blockquote><b>NOTE:</b> 
On some systems, there is a command named [, sometimes standalone,
and sometimes symlinked to <em class="filename">test</em>.
</p>
</blockquote>

<p> <em class="emphasis">-- CT</em></p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch27_09.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch27_11.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">27.9. Which One Will bash Use?</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">27.11. Is It "2&gt;&amp;1 file" or "&gt; file 2&gt;&amp;1"? Why?</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>