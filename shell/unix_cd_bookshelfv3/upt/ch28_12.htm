<html><head><title>Multiline Commands, Secondary Prompts (Unix Power Tools, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Shelley Powers, Jerry Peek, Tim O'Reilly, Mike Loukides and  " /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00330-7" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX Power Tools, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Unix Power Tools" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Unix Power Tools" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch28_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch28_13.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">28.12. Multiline Commands, Secondary Prompts</h2>

<p><a name="IXT-28-4656" /><a name="IXT-28-4657" /><a name="IXT-28-4658" /><a name="IXT-28-4659" />All shells support multiline
commands. In Bourne-type shells, a newline following an open quote
(<tt class="literal">'</tt> or <tt class="literal">"</tt>), pipe symbol
(<tt class="literal">|</tt>), or backslash (<tt class="literal">\</tt>) will not
cause the command to be executed. Instead, you'll
get a <a name="IXT-28-4660" /><a name="IXT-28-4661" />secondary prompt (from the
<em class="emphasis">PS2</em> shell variable, set to
<tt class="literal">&gt;</tt> by default), and you can continue the command
on the next line. For example, to send a quick <b class="emphasis-bold">write</b> (<a href="ch01_21.htm#upt3-CHP-1-SECT-21">Section 1.21</a>) message
without making the other user wait for you to type the message, try
this:
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>echo "We're leaving in 10 minutes. See you downstairs." |</b></tt>
&gt; <tt class="userinput"><b>write joanne</b></tt></pre></blockquote>

<p>In the C shells, you can continue a line by <b class="emphasis-bold">typing a backslash (\) before the newline</b>
(<a href="ch27_13.htm#upt3-CHP-27-SECT-13">Section 27.13</a>). In <i class="command">tcsh</i>,
you'll see a secondary prompt, a question mark
(<tt class="literal">?</tt>), on each continued line. The original
<i class="command">csh</i> doesn't prompt in this case.
</p>

<p><a name="IXT-28-4662" />Obviously, this is a convenience if
you're typing a long command line. It is a minor
feature and one easily overlooked; however, it makes it much easier
to use a program like <i class="command">sed</i> (<a href="ch34_01.htm#upt3-CHP-34-SECT-1">Section 34.1</a>) from the
command line. For example, if you know you chronically make the typos
"mvoe" (for
"move") and
"thier" (for
"their"), you might be inspired to
type the following command:
</p>
<p><tt class="literal">nroff -ms</tt><a href="ch03_21.htm#upt3-CHP-3-SECT-21">Section 3.21</a>, <tt class="literal">lp</tt><a href="ch45_02.htm#upt3-CHP-45-SECT-2">Section 45.2</a> 
</p>
<blockquote><pre class="code">$ <tt class="userinput"><b>sed '</b></tt>
&gt; <tt class="userinput"><b>s/mvoe/move/g</b></tt>
&gt; <tt class="userinput"><b>s/thier/their/g' myfile | nroff -ms | lp</b></tt></pre></blockquote>

<p>More importantly, the ability to issue multiline commands lets you
use the shell's programming features interactively
from the command line. In both the Bourne and C shells, multiline
programming constructs automatically generate a secondary prompt
(<tt class="literal">&gt;</tt> in Bourne shells and <tt class="literal">?</tt> in
C shells) until the construct is completed. This is how our favorite
programming constructs for non-programmers, the <b class="emphasis-bold">for and foreach loops</b> <a name="IXT-28-4663" /> <a name="IXT-28-4664" />(<a href="ch28_09.htm#upt3-CHP-28-SECT-9">Section 28.9</a>), work. While
a simple loop could be saved into a <b class="emphasis-bold">shell
script</b> (<a href="ch01_08.htm#upt3-CHP-1-SECT-8">Section 1.8</a>), it is often even
easier to use it interactively.
</p>

<p>Here's an example with
<i class="command">zsh</i><a name="IXT-28-4665" />, which
makes secondary prompts that show the names of the construct(s)
it's continuing. This <i class="command">for</i> loop
prints files from the current directory. If a filename ends with
<em class="emphasis">.ps</em>, it's sent straight to the
<em class="emphasis">ps</em> printer. Filenames ending with
<em class="emphasis">.tif</em> are sent through <b class="emphasis-bold">netpbm</b> (<a href="ch45_19.htm#upt3-CHP-45-SECT-19">Section 45.19</a>) filters,
then to the <em class="emphasis">ps</em> printer.
</p>

<p><tt class="literal">case</tt> <a href="ch35_10.htm#upt3-CHP-35-SECT-10">Section 35.10</a>, <tt class="literal">echo</tt><b class="emphasis-bold"><a href="ch27_05.htm#upt3-CHP-27-SECT-5">Section 27.5</a></b></p>

<blockquote><pre class="code">zsh% <tt class="userinput"><b>for file in *</b></tt>
for&gt; <tt class="userinput"><b>do case "$file" in</b></tt>
for case&gt; <tt class="userinput"><b>*.ps) lpr -Pps "$file" ;;</b></tt>
for case&gt; <tt class="userinput"><b>*.tif) tifftopnm "$file" | pnmtops | lpr -Pps ;;</b></tt>
for case&gt; <tt class="userinput"><b>*) echo "skipping $file" ;;</b></tt>
for case&gt; <tt class="userinput"><b>esac</b></tt>
for&gt; <tt class="userinput"><b>done</b></tt>
skipping README
  ...
zsh%</pre></blockquote>

<p><i class="command">zsh</i>'s multiline editing makes it
easy to go back and edit that multiline nested construct. In other
shells, you might consider using a throwaway script or copying and
pasting with a mouse if you have one.
</p>

<p><em class="emphasis">--TOR and JP</em></p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch28_11.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch28_13.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">28.11. Repeating a Time-Varying Command</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">28.13. Here Document Example #1: Unformatted Form Letters</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>