<html><head><title>Shell Lockfile (Unix Power Tools, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Shelley Powers, Jerry Peek, Tim O'Reilly, Mike Loukides and  " /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00330-7" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX Power Tools, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Unix Power Tools" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Unix Power Tools" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch36_26.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch37_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">36.27. Shell Lockfile</h2>

<p><a name="upt3-IDXTERM-6037" /> <a name="upt3-IDXTERM-6038" /> <a name="upt3-IDXTERM-6039" />Here's
an efficient and <a name="upt3-IDXTERM-6040" />portable
way to create a lockfile from a shell script.<a href="#FOOTNOTE-117">[117]</a> It's also
an interesting demonstration of the way that Unix umasks
<a name="IXT-36-3434" />and <b class="emphasis-bold">file permissions</b> (<a href="ch50_02.htm#upt3-CHP-50-SECT-2">Section 50.2</a>) are handled.
</p><blockquote class="footnote"> <a name="FOOTNOTE-117" /><p> [117]Greg
Ubben sent this idea.</p> </blockquote>

<p>A <em class="emphasis">lockfile</em> can be used when a particular program
might be run more than once at the same time and you need to be sure
that only one instance of the program can do something (modify some
file, access a printer, etc.). To really do this right, the program
needs to both test for the lockfile and create it (if it
doesn't exist) in one
<em class="emphasis">atomic</em><a name="IXT-36-3435" /> operation. If
the test-and-set operation isn't atomic -- for
instance, if a program tests for the lock file in one command and
then creates the lock file in the next
command -- there's a chance that another
user's program could do <em class="emphasis">its</em>
test at the precise moment between the first
program's (non-atomic) test and set operations. The
technique in this article lets you make a lockfile atomically from a
shell script.
</p>

<a name="ch36-8-fm2xml" /><blockquote><b>NOTE:</b> 
This technique doesn't work for scripts run as the
superuser (<em class="emphasis">root</em>). It depends on the fact that a
standard user can't write a file without write
permisson. But <em class="emphasis">root</em> can write
<em class="emphasis">any</em> file, whether it has write permission or
not. If there's a chance that
<em class="emphasis">root</em> might run your script, you might want to
add a test of the UID -- by running the <i class="command">id</i>
command, for instance -- and be sure that the UID
isn't 0 (the superuser's).
</p>
</blockquote>

<p>Let's say you have a script called
<i class="command">edmaster</i>; it edits a master configuration file
named <em class="emphasis">config</em>. To be sure that two users
can't modify the <em class="emphasis">config</em> file at
the same time, the first <i class="command">edmaster</i> checks whether
the lockfile exists. If the lockfile doesn't exist,
<i class="command">edmaster</i> creates it and modifies the
<em class="emphasis">config</em> file. When it's done
editing, it removes the lockfile. If someone tries to run a second
<i class="command">edmaster</i> process, it sees the lockfile from the
first <i class="command">edmaster</i>, waits, and checks every few
seconds to see if the lockfile is gone. Once the first
<i class="command">edmaster</i> removes the lockfile, the second
<i class="command">edmaster</i> can create the lockfile and do its
editing of <em class="emphasis">config</em>. (Note that some
editors -- for instance,
<i class="command">nvi-1.79</i><a name="IXT-36-3436" /><a name="IXT-36-3437" /> under Linux -- automatically get a
write and/or read lock before you to edit a file.)
</p>

<p><a name="IXT-36-3438" /><a name="IXT-36-3439" />Here are
pieces of a script that check the lock, create it, and (later) remove
it:
</p>

<p><tt class="literal">2&gt;</tt> <a href="ch36_16.htm#upt3-CHP-36-SECT-16">Section 36.16</a>, <tt class="literal">/dev/null</tt> <a href="ch43_12.htm#upt3-CHP-43-SECT-12">Section 43.12</a>, <tt class="literal">set</tt> <a href="ch35_25.htm#upt3-CHP-35-SECT-25">Section 35.25</a></p>




<blockquote><pre class="code"># set name of this program's lockfile:
myname=`basename $0`
LOCKFILE=/tmp/lock.$myname
   ...
# Loop until we get a lock:
until (umask 222; echo $$ &gt;$LOCKFILE) 2&gt;/dev/null   # test &amp; set

do
   # Optional message - show lockfile owner and creation time:
   set x `ls -l $LOCKFILE`
   echo "Waiting for user $4 (working since $7 $8 $9)..."

   sleep 5
done

# Do whatever we need exclusive access to do...
   ...
rm -f $LOCKFILE            # unlock</pre></blockquote>

<p>If another user tried to run <i class="command">edconfig</i>, and
<em class="emphasis">jpeek</em> had run <i class="command">edconfig</i> first,
she might see:
</p>

<blockquote><pre class="code">% <tt class="userinput"><b>edconfig</b></tt>
Waiting for user jpeek (working since Aug 23 14:05)...
   <i class="lineannotation">...a 5-second pause</i>
Waiting for user jpeek (working since Aug 23 14:05)...
   <em class="replaceable"><tt>another 5-second pause...</tt></em>
   <i class="lineannotation">...then jpeek finishes and she can edit the file.</i></pre></blockquote>

<p><a name="IXT-36-3440" /><a name="IXT-36-3441" />How does it work? Almost all the
action is in the first line of the loop. A umask of 222 creates files
that are read-only (mode <tt class="literal">r--r--r--</tt>). Because the
<em class="emphasis">umask 222</em> command is run in a <b class="emphasis-bold">subshell</b> (<a href="ch24_04.htm#upt3-CHP-24-SECT-4">Section 24.4</a>), it
affects only the lockfile that's created in the
subshell at the top of the loop. The rest of the shell script keeps
its normal umask. And if the redirection fails (because the lock file
exists), only the subshell will abort -- not the parent shell
running the script.
</p>

<p>If the lockfile already exists (because another process has created
it), the loop executes <tt class="literal">sleep 5</tt>; five seconds
later, it tries to create the lock. If the lockfile exists, it will
be read-only -- so the command <tt class="literal">echo $$
&gt;$LOCKFILE</tt> will return a nonzero status. A nonzero
status is what keeps an <b class="emphasis-bold">until loop</b>
(<a name="IXT-36-3442" /><a href="ch35_15.htm#upt3-CHP-35-SECT-15">Section 35.15</a>) running.
Once the other process (which has the lock) removes the lockfile, the
<i class="command">echo</i> command in the subshell writes the
shell's process ID number into the lockfile, and the
<i class="command">until</i> loop terminates.
</p>

<p>But if the lockfile is read-only, how can it ever be created?
That's the other interesting part of this technique.
The umask applies to the file only as it's created;
if the file doesn't exist, the umask
doesn't apply to it (yet) and the file can be
created. In fact, you can create a file with mode 000 by typing:
</p>

<blockquote><pre class="code">$ <tt class="userinput"><b>(umask 666; echo hi &gt; afile)</b></tt>
$ <tt class="userinput"><b>ls -l afile</b></tt>
----------  1 jpeek   wheel   3 Aug 23 14:08 afile
$ <tt class="userinput"><b>touch afile</b></tt>
-rw-rw-r--  1 jpeek   wheel   3 Aug 23 14:10 afile</pre></blockquote>

<p><em class="emphasis"><a name="IXTR3-3454" /><a name="IXTR3-3455" /> <a name="IXTR3-3456" /> <a name="IXTR3-3457" /> --JP<a name="IXTR3-3458" /> <a name="IXTR3-3459" /></em>
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch36_26.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch37_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">36.26. Outputting Text to an X Window</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">37. Shell Script Debugging and Gotchas</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>