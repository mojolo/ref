<html><head><title>Emacs Features: A Laundry List (Unix Power Tools, 3rd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Shelley Powers, Jerry Peek, Tim O'Reilly, Mike Loukides and  " /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00330-7" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="UNIX Power Tools, 3rd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Unix Power Tools" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Unix Power Tools" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch19_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">19.2. Emacs Features: A Laundry List</h2>

<p><a name="IXT-19-5958" /><a name="IXT-19-5959" />Here's the list we
promised -- a list of our favorite features:
</p>

<dl>
<a name="IXT-19-5960" /><a name="IXT-19-5961" /><dt><i>Windows</i></dt>
<dd>
Emacs is a "windowed editor."
Before anyone heard of the X Window System or the Macintosh, Emacs
had the ability to divide a terminal's screen into
several "windows," allowing you to
do different things in each one. You can edit a different file in
each window or read mail in one window, answer mail in another, issue
shell commands in a third, and so on.
</p>


<p>Now that we all have nice workstations with mice and other crawly
things for navigating around a bitmapped screen, why do you care?
First, you may not have a bitmapped screen, and even if you have one
in the office, you may not at home. Second, I still find Emacs
preferable to most "modern" window
systems because I <a name="IXT-19-5962" /><a name="IXT-19-5963" />don't have
to use a mouse. If I want to create another window, I just type
CTRL-x 2 (which splits the current window, whatever it is, into two);
if I want to work in another window, I just type CTRL-x o; if I want
to delete a window, I type CTRL-x 0. Is this faster than reaching for
my mouse and moving it around? You bet. Particularly since my mouse
is hidden under a pile of paper. (Of course, it's
hidden because I hardly ever need it.) Once you've
created a window, it's just as easy to start editing
a new file, initiate a shell session, and so on. Third, even though
you're using a windowing system, you may not have a
lot of screen real estate available. By having a split Emacs screen,
all editing can be done in one window, leaving enough room for other
applications, such as the Mozilla web browser, to be open. Whether
you're developing web pages or just reading Slashdot
while "working,"
you'll appreciate the free space on the screen. It
isn't uncommon for Emacs users to always have Emacs
open on their desktops.
</p>
</dd>


<dt><i>Shells</i></dt>
<dd>
<a name="IXT-19-5964" /><a name="IXT-19-5965" />You can start an interactive shell within
any Emacs window; just type ESC-x <tt class="literal">shell</tt>, and
you'll see your familiar shell prompt.
It's easy to see why this is so useful.
It's trivial to return to earlier comands, copy
them, and edit them. Even more important, you can easily take the
output of a command and copy it into a text file that
you're editing -- obviously an extremely useful
feature when you're writing a book like this. Emacs
also lets you issue commands that operate on the contents of a window
or a selected region within a window. Another benefit to doing shell
work directly in Emacs is that every word that appears in that shell
buffer is available for <b class="emphasis-bold">command
completions</b> (<a name="IXT-19-5966" /><a href="ch19_06.htm#upt3-CHP-19-SECT-6">Section 19.6</a>). So if you're creating a
small shell script that has to reference a long directory name, being
able to autocomplete that name is an invaluable feature.
</p>


<p>In fact, there are many filesystem maintenance tasks with which Emacs
can help you. You can view and manipulate
<a name="IXT-19-5967" /><a name="IXT-19-5968" />directories and files with
<a name="IXT-19-5969" />Dired
mode, which can be activated by typing ESC-x dired.
You'll be asked which directory you want to view
(the current directory is the default). Do you want to remove a file
that starts with a hyphen, but <i class="command">rm</i> complains that
your file is not a valid option? Start Emacs in Dired mode, select
the file, and type <tt class="literal">D</tt>. Emacs will ask you for
confirmation about the proposed deletion. Want to
<a name="IXT-19-5970" />delete a bunch of
files that can't be easily described with wildcards?
In dired mode, select each file with <tt class="literal">d</tt>, then
remove them all with ESC-x
<tt class="literal">dired-do-flagged-delete</tt>.
</p>
</dd>


<a name="IXT-19-5971" /><a name="IXT-19-5972" /><a name="IXT-19-5973" /><dt><i>Keyboard macros and advanced editing features</i></dt>
<dd>
<a name="IXT-19-5974" />Emacs
lets you define "keyboard
macros" -- and sequences of
<a name="IXT-19-5975" />commands
that can be executed automatically. This is similar to <b class="emphasis-bold">vi's map</b> (<a href="ch18_02.htm#upt3-CHP-18-SECT-2">Section 18.2</a>) facility, with one extra twist: Emacs
actually executes the commands while you're defining
the macro; <i class="command">vi</i> expects you to figure out what you
need to do, type it in without any feedback, and hope that the macro
doesn't do anything hostile when you edit it. With
Emacs, it's much easier to get the macro right. You
can see what it's going to do as
you're defining it, and if you make a mistake, you
can correct it immediately.
</p>


<p>To create a macro, you first need to tell Emacs that it needs to
remember the next sequence of keystrokes by typing
<a name="IXT-19-5976" />CTRL-x (. Now perform the desired
actions. To end the macro recording, type CTRL-x ). To execute the
most recently defined macro, type CTRL-x e. If you make a mistake
when recording the marco, type <a name="IXT-19-5977" />CTRL-g to cancel out
of the entire operation, and begin recording the macro again.
</p>

<p>Even if you don't create your own macros, Emacs
provides a rich set of
<a name="IXT-19-5978" />text- editing features that often
<em class="emphasis">do what you mean</em></tt>. For instance, Emacs allows
users to make rectangluar text cuts. This is very useful for removing
leading <a name="IXT-19-5979" />whitespace from a series of lines. To
make the cut, you must first define the starting point of the
rectangle to be cut. Position the cursor in Emacs to the upper-left
corner of the area to be excised. Then mark the area with CTRL-SPACE.
Move the cursor down to the last line of the area to be removed and
then over to right as far as is desired. This is the lowest and
rightmost corner of the rectangle. Now remove the area with the key
sequence CTRL-x r k.
</p></dd>


<dt><i>Editing modes</i></dt>
<dd>
<a name="IXT-19-5980" /><a name="IXT-19-5981" /> <a name="IXT-19-5982" />Emacs has a large number of special
<a name="IXT-19-5983" /> <a name="IXT-19-5984" /><a name="IXT-19-5985" />editing modes that provide context-sensitive
help while you're writing. For example, if
you're writing a <a name="IXT-19-5986" />C program, the C mode will help you to
observe conventions for indentation and commenting. It automatically
lines up braces for you and tells you when parentheses are
unbalanced. In X Windows, Emacs will even do syntax highlighting for
you. <a name="IXT-19-5987" />Perl programmers get
two editing modes to choose from, perl-mode and cperl-mode. Based on
the file extension, Emacs will figure out which mode you want. (The
default and simplest mode is called Fundamental.) You can enter a new
mode by typing ESC- x and then the name of the mode. Emacs also
integrates well with the perl
<a name="IXT-19-5988" />debugger (ESC-x
<tt class="literal">perldb</tt>) so that you can step through your running
code in the editor. Emacs also supports many
<a name="IXT-19-5989" /> <a name="IXT-19-5990" /><a name="IXT-19-5991" />version-control systems including RCS and
CVS. Checking out a file from RCS is as simple as typing CTRL-x v v.
After you have made your edits, check in the file with CTRL-x v v.
That's not a typo; Emacs can figure out the
<em class="emphasis">right thing to do</em> with your file because it
remembers the last version-control state. Pretty cool. There are
special modes for virtually every programming language
I've ever heard of. There are also special modes for
HTML, <i class="command">troff</i>, T<sub class="subscript">E</sub>X, outlines,
stick figures, etc. For any kind of programming, Emacs is the
Integrated Development Environment of choice for many users.
</p>
</dd>


<dt><i>Mail, news, FTP, and HTTP</i></dt>
<dd>
<a name="IXT-19-5992" /><a name="IXT-19-5993" />Although I often use
Emacs' mail facility as an example,
I'm not personally fond of it. However, if you
really like working within the Emacs environment, you should try it.
Sending mail from Emacs (ESC-x <tt class="literal">mail</tt>) is convenient
if you are already editing the file you wish to send. You can simply
copy and paste your work into the mail buffer and send it along with
CTRL-c CTRL-c. You can even add Cc: and Reply-to: fields to the
message just by adding them to the mail buffer directly under the To:
field.
</p>


<p>Emacs also has a <a name="IXT-19-5994" /> <a name="IXT-19-5995" /><a name="IXT-19-5996" />Usenet client called GNUS (ESC-x
<tt class="literal">gnus</tt>) that has quite a following. What editor
would be complete without an integrated
<a name="IXT-19-5997" /> <a name="IXT-19-5998" /><a name="IXT-19-5999" /> <a name="IXT-19-6000" />FTP client?
Certainly not Emacs. There are two ways to access FTP in Emacs. The
first is to type ESC-x <tt class="literal">ftp</tt>. This gives you a
shell-like ftp client. While this is nice, Emacs provides an even
slicker way to FTP files. <a name="IXT-19-6001" />Ange-ftp mode allows Emacs users to open
<a name="IXT-19-6002" />remote files almost as if they were
local. To open a remote file or directory, simple type CTRL-x CTRL-f.
However, you must specify the filename with a leading slash and your
remote username followed by <tt class="literal">@</tt> and followed again
by the ftp hostname, a colon, and the full path you wish to retrieve.
For example, if I wished to edit the file
<em class="filename">index.html</em></tt> as user <tt class="literal">edit</tt> on my
web server, I would use the filename<em class="filename">
/edit@www.nowhere.com:/home/html/htdocs/index.html</em></tt>.
</p>

<p>To extend the last example a bit, Emacs even has a
<a name="IXT-19-6003" />web-browser mode so that you could look
at the web page you just edited! In truth, lynx is still king of the
ASCII web browsers, but the Emacs <a name="IXT-19-6004" />W3 mode is coming along. It
doesn't normally come with Emacs, so
you're going to have to look on the Web for it. It
has very good integration with <a name="IXT-19-6005" />XEmacs (ne&#232; Lucent Emacs) and
can even display images. Speaking of the Web,
there's a nice Emacs feature called
<a name="IXT-19-6006" />webjump (ESC-x <tt class="literal">webjumb</tt>)
that will make a currently opened Web browser such as Netscape go to
a new URL. Webjump comes with a list a predefined URLs, which can be
expanded, of course. One of those URLs is Yahoo. When that site is
selected, webjump will ask you for a query term to submit. After
hitting return, the Yahoo search results will appear in a browser
window. Again, it's a nice shortcut.
</p>
</dd>


<dt><i>Customization</i></dt>
<dd>
<a name="IXT-19-6007" /><a name="IXT-19-6008" /><a name="IXT-19-6009" />Emacs is the most customizable
tool I've ever seen. Customization is based on the
LISP programming language, so you need to learn some LISP before you
can work with it much. However, once you know LISP, you can do
virtually anything. <a name="IXT-19-6010" />For example, you could write a complete
spreadsheet program within Emacs -- which means that you could use
your normal Emacs commands to edit the spreadsheet and incorporate it
(in whole or in part) into your documents. In fact, several Emacs
spreadsheet modes exist, but their quality and functionality vary
wildly. And, because of the FSF's General Public
License, virtually all special-purpose packages are available for
free.
</p>
</dd>

</dl>

<p><em class="emphasis">--ML and JJ</em></p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch19_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch19_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">19. GNU Emacs</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">19.3. Customizations and How to Avoid Them</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>