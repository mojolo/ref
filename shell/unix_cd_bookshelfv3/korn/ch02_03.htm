<html><head><title>Emacs Editing Mode (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.3. Emacs Editing Mode</h2>

<p>
<a name="korn2-IDXTERM-302" />
<a name="IXT-2-287160" />
If you are an Emacs user, you will find it most useful to
think of emacs editing mode as a simplified
Emacs with a single, one-line window.
All of the basic commands are available for cursor motion, cut and paste,
and search.
</p>

<a name="korn2-CHP-2-SECT-3.1" /><div class="sect2">
<h3 class="sect2">2.3.1. Basic Commands</h3>

<p>
<a name="korn2-IDXTERM-304" />
<a name="korn2-IDXTERM-305" />
<a name="IXT-2-287161" />
<a name="IXT-2-287162" />

Emacs-mode uses control keys for the most basic editing functions.
If you aren't familiar with Emacs,
you can think of these as extensions of the rudimentary
"erase" character (usually backspace or DEL) that Unix provides
through its interface to users' terminals.
In fact, emacs-mode figures out what
your erase character is and uses that as its delete-backward key.
For the sake of consistency, we'll assume your erase character is
DEL from now on; if it is CTRL-H or something else, you will need to
make a mental substitution.
The most basic control-key commands are shown in
<a href="ch02_03.htm#korn2-CHP-2-TABLE-1">Table 2-1</a>.

</p>

<a name="korn2-CHP-2-TABLE-1" /><h4 class="objtitle">Table 2-1. Basic emacs-mode commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Description</th>
</tr>




<tr>
<td>CTRL-B</td>
<td>Move backward one character (without deleting)</td>
</tr>

<tr>
<td>CTRL-F</td>
<td>Move forward one character</td>
</tr>

<tr>
<td>DEL</td>
<td>Delete one character backward</td>
</tr>

<tr>
<td>CTRL-D</td>
<td>Delete one character forward</td>
</tr>

<tr>
<td>CTRL-Y</td>
<td>Retrieve ("yank") last item deleted</td>
</tr>


</table><p>

<blockquote><b>WARNING:</b> 

<a name="IXT-2-287163" />

Remember that typing CTRL-D when your command line is
empty may log you off!
</p>
</blockquote>

<p>
<a name="IXT-2-287164" />
<a name="IXT-2-287165" />
<a name="IXT-2-287166" />
<a name="IXT-2-287167" />
The basic finger habits of emacs-mode are easy to learn, but
they do require that you assimilate a couple of concepts that
are peculiar to the Emacs editor.
</p>

<p>
<a name="IXT-2-287168" />
<a name="IXT-2-287169" />

The first of these is the use of CTRL-B and CTRL-F for backward
and forward cursor motion.
These keys have the advantage of being
obvious mnemonics, but many people would rather use the arrow
keys that are on just about every keyboard nowadays.
<a name="IXT-2-287170" />
</p>

<p>
<a name="IXT-2-287171" />
Unfortunately,
emacs-mode doesn't use the arrow keys,<a href="#FOOTNOTE-22">[22]</a>
because the codes that they
transmit to the computer aren't completely standardized;
emacs-mode was designed to work on the widest variety
of terminals possible without the heavy-duty
customization that the full Emacs needs.
Just about the only hardware requirements of emacs-mode
are that the SPACE character overwrite the character
on top of which it is typed, and that BACKSPACE moves to
the left without overwriting the current character.
</p><blockquote class="footnote">
<a name="FOOTNOTE-22" /><p> [22]
In fact,
as described in <a href="appb_01.htm">Appendix B</a>,
starting with <em class="emphasis">ksh93h</em>,
if your terminal
uses ANSI-standard escape sequences for the arrow keys, you 
can use them.
</p>
</blockquote>

<p>
<a name="IXT-2-287172" />


In emacs-mode,
the <em class="emphasis">point</em> (sometimes
also called <em class="emphasis">dot</em>) is an imaginary place just to
the left of the character the cursor is on.
In the command descriptions
in <a href="ch02_03.htm#korn2-CHP-2-TABLE-1">Table 2-1</a>,
some say "forward" while others say "backward."
Think of forward as "to the right of point" and backward as
"to the left of point."
</p>

<?troff .Nd 10?>

<p>
For example, let's say you type in a line and, instead of typing
ENTER, you type CTRL-B and hold it down so that it repeats.
The cursor will move to the left
until it is over the first character on the line, like this:
</p>

<p>
<blockquote><pre class="code">
$ <span class="emphasis-reverse">f</span><tt class="userinput"><b>grep -l Bob &lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
<a name="IXT-2-287173" />

Now the cursor is on the <tt class="literal">f</tt>, and point is at the beginning of the
line, just before the <tt class="literal">f</tt>.
If you type DEL, nothing will happen because there are no characters
to the left of point. However, if you press CTRL-D (the "delete character
forward" command) you will delete the first letter:
</p>

<p>
<blockquote><pre class="code">
$ <span class="emphasis-reverse">g</span><tt class="userinput"><b>rep -l Bob &lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
Point is still at the beginning of the line.
If this were the desired command, you could
hit ENTER now and run it; you don't need to move the cursor
back
to the end of the line. However, if you wanted to, you could type
CTRL-F repeatedly to get there:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -l Bob &lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
At this point, typing CTRL-D wouldn't do anything, but hitting DEL would erase
the final <tt class="literal">s</tt>. If you type DEL and decide you want the <tt class="literal">s</tt>
back again, just press CTRL-Y to yank it back.
If you think this example is silly, you're right in this particular case,
but bear in mind that CTRL-Y undoes the last delete command
of any kind, including the delete-word and delete-line
commands that we will see shortly.<a href="#FOOTNOTE-23">[23]</a>

<a name="IXTR3-75" />
</p><blockquote class="footnote">
<a name="FOOTNOTE-23" /><p> [23]
Emacs users should note that this usage of CTRL-Y is different
from the full editor, which doesn't save character deletes.
</p>
</blockquote>


<p>
If you make multiple deletes in sequence, CTRL-Y brings back everything that you've
deleted.  Its memory goes back to the last keystroke that wasn't a delete; the
deletes don't have to be of the same type.
For example, if you type DEL SPACE DEL SPACE CTRL-D CTRL-K,
typing CTRL-Y retrieves the result of the last three operations but not
the first delete.
<a name="IXTR3-76" />

</p>

</div>

<a name="korn2-CHP-2-SECT-3.2" /><div class="sect2">
<h3 class="sect2">2.3.2. Word Commands</h3>

<p>
<a name="korn2-IDXTERM-321" />

The basic commands are really all you need to get around a
command line, but a set of more advanced commands lets you do
it with fewer keystrokes. These commands operate on <em class="emphasis">words</em>
rather than on single characters; emacs-mode defines a word to be
a sequence of one or more alphanumeric characters or underscores.
(For the rest of this discussion, it will help to think of the
underscore as a letter, even though it really isn't.)
</p>

<p>
The word commands are shown in
<a href="ch02_03.htm#korn2-CHP-2-TABLE-2">Table 2-2</a>.
Whereas the basic
commands are all single characters, the
word commands consist of two keystrokes,
ESC followed by a letter. You will notice that
the command ESC <em class="emphasis">X</em>, where <em class="emphasis">X</em> is any letter,
often does for a word what CTRL-<em class="emphasis">X</em> does for a single character.
The multiplicity of choices for delete-word-backward arises from
the fact that your erase character could be<?troff .ne 10?> either CTRL-H or DEL.
<a name="korn2-IDXTERM-322" />

</p>

<a name="korn2-CHP-2-TABLE-2" /><h4 class="objtitle">Table 2-2. Emacs-mode word commands</h4><table border="1" cellpadding="3">

<tr>
<th>Command</th>
<th>Description</th>
</tr>




<tr>
<td>ESC b</td>
<td>Move one word backward</td>
</tr>

<tr>
<td>ESC f</td>
<td>Move one word forward</td>
</tr>

<tr>
<td>ESC DEL, ESC h, ESC CTRL-H</td>
<td>Delete one word backward</td>
</tr>

<tr>
<td>ESC d</td>
<td>Delete one word forward</td>
</tr>


</table><p>

<p>
To return to our example: if we type ESC b, point moves back
a word. Since <tt class="literal">/</tt> is not an alphanumeric character,
emacs-mode stops there:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -l Bob &lt; ~pete/wk/</b></tt><span class="emphasis-reverse">n</span><tt class="userinput"><b>ames</b></tt>
</pre></blockquote>
</p>

<p>
The cursor is on the <tt class="literal">n</tt> in <em class="emphasis">names</em>, and point is between the
<tt class="literal">/</tt> and
the <tt class="literal">n</tt>. Now let's say we want to change the <em class="emphasis">-l</em> option's
argument of this command
from <em class="emphasis">Bob</em> to <em class="emphasis">Dave</em>.
We need to move back on the command line,
so we type ESC b two more times. This gets us here:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -l Bob &lt; ~</b></tt><span class="emphasis-reverse">p</span><tt class="userinput"><b>ete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
If we type ESC b again, we end up at the beginning of <em class="emphasis">Bob</em>:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -l </b></tt><span class="emphasis-reverse">B</span><tt class="userinput"><b>ob &lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
Why? Remember that a word is defined as a sequence of alphanumeric
characters only; therefore <tt class="literal">&lt;</tt> is not a word, and the next word
in the backward direction is <em class="emphasis">Bob</em>. We are now in the right position
to delete <em class="emphasis">Bob</em>, so we type ESC d and get:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -l </b></tt><tt class="userinput"><b>&lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
Now we can type in the desired argument:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -l Dave</b></tt><tt class="userinput"><b>&lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
<a name="IXT-2-287174" />

The CTRL-Y "undelete" command will retrieve an entire word, instead of
a character, if a word was the last thing deleted.
<a name="IXTR3-77" />

</p>
</div>

<a name="korn2-CHP-2-SECT-3.3" /><div class="sect2">
<h3 class="sect2">2.3.3. Line Commands</h3>

<p>
<a name="korn2-IDXTERM-325" />


There are still more efficient ways of moving around a command
line in emacs-mode. A few commands deal with the entire line;
they are shown in
<a href="ch02_03.htm#korn2-CHP-2-TABLE-3">Table 2-3</a>.
</p>

<a name="korn2-CHP-2-TABLE-3" /><h4 class="objtitle">Table 2-3. Emacs-mode line commands</h4><table border="1" cellpadding="3">


<tr>
<th>Command</th>
<th>Description</th>
</tr>



<tr>
<td>CTRL-A</td>
<td>Move to beginning of line</td>
</tr>

<tr>
<td>CTRL-E</td>
<td>Move to end of line</td>
</tr>

<tr>
<td>CTRL-K</td>
<td>Delete ("kill") forward to end of line</td>
</tr>

<tr>
<td>CTRL-C</td>
<td>Capitalize character after point</td>
</tr>


</table><p>

<p>
<a name="IXT-2-287175" />
<a name="IXT-2-287176" />
<a name="IXT-2-287177" />
<a name="IXT-2-287178" />

CTRL-C is often the "interrupt" key that Unix provides through
its interface to your terminal. If this is the case, CTRL-C
in emacs-mode will erase the entire line, as if CTRL-A and
CTRL-K were pressed.
On systems where the interrupt key is set to something else (often DEL),
CTRL-C capitalizes the current character.
</p>

<p>
Using CTRL-A, CTRL-E, and CTRL-K
should be straightforward. Remember that CTRL-Y will always
undelete the last thing deleted, whether that was from a single
delete command or several delete commands in a row. If you use CTRL-K, that
could be quite a few characters.
<a name="IXTR3-78" />
</p>

</div>

<a name="korn2-CHP-2-SECT-3.4" /><div class="sect2">
<h3 class="sect2">2.3.4. Moving Around in the History File</h3>

<p>
<a name="korn2-IDXTERM-331" />
<a name="IXT-2-287179" />
<a name="IXT-2-287180" />


Now we know how to get around the command line efficiently
and make changes. But that doesn't address the original issue
of recalling previous commands by accessing the history
file. Emacs-mode has several commands for doing this, summarized in
<a href="ch02_03.htm#korn2-CHP-2-TABLE-4">Table 2-4</a>.
<a name="IXT-2-287181" />
<a name="IXT-2-287182" />
<a name="IXT-2-287183" />


</p>

<a name="korn2-CHP-2-TABLE-4" /><h4 class="objtitle">Table 2-4. Emacs-mode commands for moving through the history file</h4><table border="1" cellpadding="3">


<tr>
<th>Command</th>
<th>Description</th>
</tr>



<tr>
<td>CTRL-P</td>
<td>Move to previous line</td>
</tr>

<tr>
<td>CTRL-N</td>
<td>Move to next line</td>
</tr>

<tr>
<td>CTRL-R</td>
<td>Search backward</td>
</tr>

<tr>
<td>ESC &lt;</td>
<td>Move to first line of history file</td>
</tr>

<tr>
<td>ESC &gt;</td>
<td>Move to last line of history file</td>
</tr>


</table><p>

<p>
CTRL-P is by far the one you will use most often -- it's
the "I made a mistake; let me go back and fix it" key.
You can use it as many times as you wish to scroll back
through the history file. If you want to get back to the
last command you entered, you can hold down CTRL-N until the Korn shell
beeps at you, or just type ESC &gt;.
As an example, you hit ENTER to run the command above, but
you get an error message telling you that your option letter
was incorrect. You want to change it without retyping the
whole thing.
First, you would type CTRL-P to recall<?troff .ne 10?> the bad command. You get it
back with point at the end:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -l Dave &lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
After CTRL-A, ESC f, two CTRL-Fs, and CTRL-D, you have:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>grep -</b></tt><tt class="userinput"><b>Dave &lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
You decide to try <em class="emphasis">-s</em> instead of <em class="emphasis">-l</em>,
so you type <tt class="literal">s</tt> and hit ENTER.
You get the same error message, so you give up and
look it up in the manual.
You find out that the command you want
is <em class="emphasis">fgrep</em> -- not <em class="emphasis">grep</em> -- after all.
You sigh heavily and go back
and find the <em class="emphasis">fgrep</em> command you typed in an hour ago.

To do this, you type CTRL-R; whatever was on the line disappears
and is replaced by <tt class="literal">^R</tt>.  Then type <tt class="literal">fgrep</tt>, and you see this:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>^Rfgrep</b></tt>
</pre></blockquote>
</p>

<p>
Hit ENTER, and the shell searches backwards through the history
file for a line containing "fgrep". If it doesn't find one, it
beeps. But if it finds one, it
displays it, and your "current line" will be that line (i.e.,
you will be somewhere in the middle of the history file, not
at the end as usual):
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>fgrep -l Bob &lt; ~pete/wk/names</b></tt>
</pre></blockquote>
</p>

<p>
Typing CTRL-R without an argument (i.e., just CTRL-R followed by ENTER)
causes the shell to repeat your last backward search.
If you try the <em class="emphasis">fgrep</em> command by hitting ENTER again,
two things
happen. First, of course, the command runs. Second,
the executed command line is entered into the history file at the end,
and your "current line" will be at the end as well. You will
no longer be in the middle of the history file.

</p>

<p>
CTRL-P and CTRL-R are clearly the most important emacs-mode commands
that deal with the history file, and you might use CTRL-N occasionally.
<a name="IXTR3-79" />
The others are less useful, and we suspect that they were
included mainly for compatibility with the full Emacs editor.
</p>

<p>
<a name="IXT-2-287186" />
<a name="IXT-2-287187" />
<a name="IXT-2-287188" />

Emacs users should also note that the full editor's "deluxe"
search capabilities, such as incremental and regular expression
search, are not available in the Korn shell's emacs-mode -- with one
minor exception: if you use CTRL-R and precede your search string with
a ^ (caret character), it matches only commands that have the
search string at the beginning of the line.
<a name="IXTR3-80" />

</p>
</div>

<a name="korn2-CHP-2-SECT-3.5" /><div class="sect2">
<h3 class="sect2">2.3.5. Filename and Variable Completion and Expansion</h3>

<p>
<a name="IXT-2-287189" />
<a name="IXT-2-287190" />
<a name="IXT-2-287191" />

One of the most powerful (and typically underused) features
of emacs-mode is its <em class="emphasis">filename completion</em> facility, inspired
by similar features in the full Emacs editor, the C shell,
and (originally) the old DEC TOPS-20 operating system.
</p>

<p>
The premise behind
filename completion is that when you need to type a filename, you
should not have to type more than is necessary to
identify the file unambiguously.
This is an excellent feature; there is an analogous one in vi-mode.
We recommend that you get it under your fingers, since it will save
you quite a bit of typing.
</p>

<p>
<a name="IXT-2-287192" />

There are three commands in emacs-mode that relate to filename
completion. The most important is TAB.
(Emacs users will find this familiar; it is
the same as minibuffer completion with the TAB key.)
When you type in a word of text followed by TAB, the Korn shell
attempts to complete the name of a file in the current directory.
Then one of four things can happen:
</p>

<ol>

<li><p>
If there is no file whose name begins with the word, the shell
beeps and nothing further happens.
</p></li>

<li><p>
If there is exactly one way to complete the filename, and the file
is a regular file, the shell types the rest of the filename and
follows it with a space so you can type in more command arguments.
</p></li>

<li><p>
If there is exactly one way to complete the filename, and the file
is a directory, the shell completes the filename and follows
it with a slash.
</p></li>

<li><p>
If there is more than one way to complete the filename,
the shell completes out to the longest common prefix among
the available choices.
</p></li>

</ol>

<p>
For example, assume you have a directory with
the files <em class="emphasis">program.c</em> and <em class="emphasis">problem.c</em>. You want to compile
the first of these by typing <tt class="literal">cc program.c</tt>. You type
<tt class="literal">cc pr</tt> followed by TAB. This is an ambiguous prefix,
since the prefix "pro" is common to both filenames, so the shell
only completes out to <tt class="literal">cc pro</tt>.  You need to type more letters
to disambiguate, so you type <tt class="literal">g</tt> and hit TAB again. Then the shell
completes out to "<tt class="literal">cc program.c</tt> ", leaving the extra space for you
to type in other filenames or options.
</p>

<p>
<a name="IXT-2-287193" />


<a name="korn2-IDXTERM-347" />

A related command is ESC <tt class="literal">*</tt>, which expands the prefix to all
possible choices. ESC <tt class="literal">*</tt> acts like the standard
<tt class="literal">*</tt> shell wildcard character except that it expands the choices
for you to see and does not execute the command. In the previous
example, if you type ESC <tt class="literal">*</tt> instead of TAB,
the shell will expand
to "<tt class="literal">cc problem.c program.c</tt> ".
If you type ESC <tt class="literal">=</tt> instead of
ESC <tt class="literal">*</tt>,
you will see a numbered list of expansions printed to standard error.
</p>


<p>

Starting with <em class="emphasis">ksh93m</em>, the ESC = command accepts a numeric
prefix.  When a prefix is provided, the shell treats it as the number of one
of the commands shown by a previous ESC = listing and completes the filename.
(An example is provided
later in this chapter where the vi-mode version of this command is described.)
<a name="IXTR3-81" />
</p>

<p>
<a name="IXT-2-287194" />

When TAB, ESC <tt class="literal">*</tt>, and ESC <tt class="literal">=</tt> are used on the first
word of the command line, they expand aliases, functions, and commands.
This very useful feature is known as <em class="emphasis">command completion</em>.
</p>

<p>
For backwards compatibility with <em class="emphasis">ksh88</em>
and versions of <em class="emphasis">ksh93</em> prior to <em class="emphasis">ksh93h</em>,
you may instead type ESC ESC for filename and command completion.
<a name="IXTR3-82" />
</p>

<p>
Starting with <em class="emphasis">ksh93l</em>,
the editing modes understand <em class="emphasis">ksh</em> quoting rules;
expansions are ignored inside quotes.  However,
if you have typed a leading quote but no closing quote yet, the completion
commands do work.
In addition, all three expansions work on variable names as well.
(Variables are discussed in <a href="ch04_01.htm">Chapter 4</a>.)
When <em class="emphasis">ksh</em> sees either a <tt class="literal">$</tt> or
<tt class="literal">"$</tt> and part of a variable name, you may use any of the
three expansions to see which variable names match what you've typed.
</p>

</div>

<a name="korn2-CHP-2-SECT-3.6" /><div class="sect2">
<h3 class="sect2">2.3.6. Miscellaneous Commands</h3>

<p>
<a name="korn2-IDXTERM-351" />
<a name="korn2-IDXTERM-352" />

Several miscellaneous commands complete emacs editing mode;
they are shown in
<a href="ch02_03.htm#korn2-CHP-2-TABLE-5">Table 2-5</a>.

<a name="IXTR3-83" />


</p>

<a name="korn2-CHP-2-TABLE-5" /><h4 class="objtitle">Table 2-5. Emacs-mode miscellaneous commands</h4><table border="1" cellpadding="3">




<tr>
<th>Command</th>
<th>Description</th>
</tr>



<tr>
<td>CTRL-J</td>
<td>Same as ENTER.</td>
</tr>

<tr>
<td>CTRL-L</td>
<td>Redisplay the line.</td>
</tr>

<tr>
<td>CTRL-M</td>
<td>Same as ENTER.</td>
</tr>

<tr>
<td>CTRL-O</td>
<td>Same as ENTER, then display next line in history file.</td>
</tr>

<tr>
<td>CTRL-T</td>
<td><p>
Transpose the characters on either side
of point.
This is like
GNU Emacs.<a href="#FOOTNOTE-24">[24]</a>
</p></td>
</tr>

<tr>
<td>CTRL-U</td>
<td>Repeat the following command four times.</td>
</tr>

<tr>
<td>CTRL-V</td>
<td>Print the version of the Korn shell.</td>
</tr>

<tr>
<td>CTRL-W</td>
<td><p>
Delete ("wipe") all characters between point and "mark." "Mark" is
discussed later in this section.
</p></td>
</tr>

<tr>
<td>CTRL-X CTRL-E</td>
<td><p>
Invoke an editor -- usually the <em class="emphasis">emacs</em> program -- on the
current command.
</p></td>
</tr>

<tr>
<td>CTRL-X CTRL-X</td>
<td>Exchange point and mark.</td>
</tr>

<tr>
<td>CTRL-[</td>
<td>Same as ESC (most keyboards).</td>
</tr>

<tr>
<td>CTRL-] <em class="emphasis">x</em></td>
<td><p>
Search forward on current line for <em class="emphasis">x</em>,
where <em class="emphasis">x</em> is any character.
</p></td>
</tr>

<tr>
<td>CTRL-@</td>
<td>Set mark at point.</td>
</tr>

<tr>
<td>ESC c</td>
<td>Change word after point to all capital letters.</td>
</tr>

<tr>
<td>ESC l</td>
<td>Change word after point to all lowercase letters.</td>
</tr>

<tr>
<td>ESC p</td>
<td><p>
Save all characters between point and mark as if they were deleted.
</p></td>
</tr>

<tr>
<td>ESC .</td>
<td>Insert last word in previous command line after point.</td>
</tr>

<tr>
<td>ESC _</td>
<td>Same as previous entry.</td>
</tr>

<tr>
<td>ESC CTRL-] <em class="emphasis">x</em></td>
<td>Search backward for <em class="emphasis">x</em>, where <em class="emphasis">x</em> is any character.</td>
</tr>

<tr>
<td>ESC SPACE</td>
<td>Set mark at point.</td>
</tr>

<tr>
<td>ESC #</td>
<td><p>
Prepend <tt class="literal">#</tt> (comment character) to the line and
send it to the history file;
useful for saving a command to be executed later without having to
retype it.
If the line already starts with a <tt class="literal">#</tt>, remove the leading
<tt class="literal">#</tt> and any other comment characters that follow newlines in a
multi-line command.
</p></td>
</tr>


</table><p>
<a name="FOOTNOTE-24" /><p> [24]
<a name="IXT-2-287195" />
<a name="IXT-2-287196" />
<a name="IXT-2-287197" />
<a name="IXT-2-287198" />
<a name="IXT-2-287199" />
<a name="IXT-2-287200" />
<a name="IXT-2-287201" />
<a name="IXT-2-287202" />
<a name="IXT-2-287203" />
<a name="IXT-2-287204" />
<a name="IXT-2-287205" />
<a name="IXT-2-287206" />
<a name="IXT-2-287207" />
<a name="IXT-2-287208" />
<a name="IXT-2-287209" />

This is a difference from <em class="emphasis">ksh88</em>,
which transposes two characters to the right of point and moves point forward
by one.
CTRL-T behaves slightly
differently if you put <tt class="literal">set -o gmacs</tt>
(instead of <tt class="literal">emacs</tt>)
in your <em class="emphasis">.profile</em>. In this case, it transposes
the two characters to the left of point, leaving point unmoved.
This is the only difference between emacs and gmacs modes;
the latter conforms to the once-popular James Gosling version
of the Emacs editor (a.k.a. Unipress Emacs, now no longer available).
</p>
</blockquote>

<p>

<a name="IXT-2-287210" />

Several of these commands may clash with terminal interface
control keys on your system. CTRL-U is the default key for
"kill line" on most versions of Unix.
Modern Unix systems use CTRL-V and CTRL-W as default
settings for the "quote next character" and "word erase"
terminal interface functions, respectively. CTRL-V is particularly
confusing, since it is meant to override other terminal
interface control keys but has no effect on emacs-mode commands.
However, emacs-mode works by directly interpreting every character you type,
so the <em class="emphasis">stty</em> settings are largely ignored.
<a name="IXT-2-287211" />


<a name="IXT-2-287212" />
<a name="korn2-IDXTERM-372" />
</p>

<p>
A few miscellaneous commands are worth discussing, even though they may
not be among the most useful emacs-mode commands.
</p>

<p>
CTRL-O is useful for repeating a sequence of commands you have
already entered. Just go back to the first command in the sequence
and press CTRL-O instead of ENTER. This executes the command
and brings up the next command in the history file. Press CTRL-O
again to enter this command and bring up the next one. Repeat this
until you see the last command in the sequence; then just hit ENTER.
</p>

<p>
CTRL-U, if it doesn't perform the line-delete function of your
system's terminal interface, repeats the next command
four times.
If you type CTRL-U twice, the repeat factor becomes 16; for 3 CTRL-Us it's
64; and so on.
CTRL-U is possibly most useful when navigating through your history
file. If you want to recall a command that you entered a while
ago, you could type CTRL-U CTRL-P to go back through the history file
four lines at a time;
you could think of this as a "fast rewind" through your command
history.
</p>

<p>
Another possible use of CTRL-U is when you want to
go from one end of a long pathname to the other. Unlike vi-mode,
emacs-mode does not have a concept of "word" that is flexible enough
to distinguish between pathnames and filename components.
The emacs-mode word
motion commands (ESC b and ESC f) move through a pathname
only one component at a time, because emacs-mode treats the slash as
a word separator. You can use CTRL-U to help get around this limitation.
If you have a line that looks like this:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>ls -l /a/very/long/pathname/filename</b></tt>
</pre></blockquote>
</p>

<p>
and you need to go back and change "very" to "really",
you can type CTRL-U ESC b and your cursor will end up here:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>ls -l /a/</b></tt><span class="emphasis-reverse">v</span><tt class="userinput"><b>ery/long/pathname/filename</b></tt>
</pre></blockquote>
</p>

<p>
Then you can make the change. First, get rid of "very" by
typing CTRL-U CTRL-D:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>ls -l /a/</b></tt><span class="emphasis-reverse">/</span><tt class="userinput"><b>long/pathname/filename</b></tt>
</pre></blockquote>
</p>

<p>
Then insert the new text:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>ls -l /a/really</b></tt><span class="emphasis-reverse">/</span><tt class="userinput"><b>long/pathname/filename</b></tt>
</pre></blockquote>
</p>

<p>
Judicious use of CTRL-U can save you a few keystrokes, but considering
the small amount of information you manipulate when you edit
command lines, it's probably not an incredibly vital feature.
Often, holding down a key to repeat it is just
as effective as CTRL-U. Because you'll probably have to
use the <em class="emphasis">stty</em> command to
redefine the
terminal driver's line erase key before you can use CTRL-U, it's
probably better to do without it.
<a name="IXTR3-84" />

</p>

<p>
<a name="IXT-2-287213" />
<a name="IXT-2-287214" />
<a name="IXT-2-287215" />
<a name="IXT-2-287216" />
<a name="IXT-2-287217" />

The mark mentioned in the explanation of CTRL-W should be familiar
to Emacs users, but its function in emacs-mode is
a subset of that in the full editor.
Emacs-mode keeps track of the place at which the last delete operation
was performed (whether it was a character, word, line, or whatever);
this place is called the <em class="emphasis">mark</em>. If nothing has been deleted
on the current line, the mark defaults to the beginning of the line.
You can also set the mark to where your cursor is by typing ESC SPACE
(or, alternatively, CTRL-@). CTRL-X CTRL-X (CTRL-X hit twice) causes the Korn shell to swap point and mark,
i.e., to move your cursor to where the mark is and reset mark to
where your cursor was before you typed CTRL-X CTRL-X.
</p>

<p>
The mark concept is not extremely useful because
of the small amount of "distance" to travel in command lines.
But if you ever have to make a series of changes in the same
place in a line, CTRL-X CTRL-X will take you back there. In
the previous example, if you wanted to change "really" to
"monumentally", one<?troff .ne 10?> way would be to type CTRL-X CTRL-X to return
to the beginning of "really":
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>ls -l /a/</b></tt><span class="emphasis-reverse">r</span><tt class="userinput"><b>eally/long/pathname/filename</b></tt>
</pre></blockquote>
</p>

<p>
Then you could type ESC d to delete "really" and make the change.
Of course, you could do this faster by typing ESC DEL
instead of CTRL-X CTRL-X and ESC d.
<a name="IXTR3-85" />
<a name="IXTR3-86" />

</p>

<p>
<a name="IXT-2-287218" />
<a name="IXT-2-287219" />
Of the case-changing commands,
ESC l (letter ell) is useful when you hit the CAPS LOCK key by accident and
don't notice it immediately. Since all-caps words aren't used
too often in the Unix world, you may not use ESC c very often.
</p>

<p>
If it seems like there are too many synonyms for ENTER,
bear in mind that CTRL-M is actually the same (ASCII) character as
ENTER, and that CTRL-J is actually the same as newline, which Unix
usually accepts in lieu of ENTER anyway.
</p>

<p>
ESC <tt class="literal">.</tt> and ESC _ are useful if you want to run several commands
on a given file. The usual Unix convention is that a filename
is the last argument to a command. Therefore you can save typing
by just entering each command followed by SPACE and then typing
ESC <tt class="literal">.</tt> or ESC _.  For example, say you want to examine a file
using <em class="emphasis">more</em>, so you type:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>more myfilewithaverylongname</b></tt>
</pre></blockquote>
</p>

<p>
Then you decide you want to print it, using the print command
<em class="emphasis">lp</em>. You can avoid typing the very long name by typing
<tt class="literal">lp</tt> followed by a space and then
ESC <tt class="literal">.</tt> or ESC _; the Korn shell
inserts <em class="emphasis">myfilewithaverylongname</em> for you.
</p>

<p>
If you're a real Emacs expert and the
built-in mode just isn't working for you, use CTRL-X CTRL-E
to invoke the <em class="emphasis">emacs</em> editor program on your command
line.  When you exit the editor, if you actually made changes to the file,
the shell executes the final command line.

<a name="IXTR3-87" />
<a name="IXTR3-88" />

</p>

</div>

<a name="korn2-CHP-2-SECT-3.7" /><div class="sect2">
<h3 class="sect2">2.3.7. Macro Expansion with Aliases</h3>

<p>
<a name="IXT-2-287220" />
<a name="IXT-2-287221" />

As you become accustomed to using emacs-mode, you may find that there
are sequences of commands that you execute over and over again.
Typing these commands repeatedly is difficult and time-wasting.
It is better to define a <em class="emphasis">macro</em> for them.
A macro is a short name that, when entered, expands into the full
sequence of commands.
</p>

<p>
The Korn shell provides a macro facility, using the alias mechanism
(described in the next chapter),
that lets you set up a sequence of commands and then invoke that sequence
with a single emacs-mode command.
It works as follows: if you define an alias named _<em class="emphasis">x</em>,
where <em class="emphasis">x</em> is a letter, then when you type ESC <em class="emphasis">x</em>,
emacs-mode expands the alias, and reads it as input.  The alias value may
contain regular text, emacs-mode commands, or both.
</p>

<p>
For example, suppose that you want a command to capitalize the first
letter of the current word.  You could define an alias as follows:
</p>

<blockquote><pre class="code">
alias _C='^[b^C'            <i class="lineannotation">Value is ESC b CTRL-C</i>
</pre></blockquote>

<p>
Now, whenever you type ESC C, the shell moves to the beginning of the current word
(ESC b), and then capitalizes the current letter (CTRL-C).
</p>

<blockquote><pre class="code">
$ <tt class="userinput"><b>print here is a word</b></tt>     <i class="lineannotation">Type ESC C</i>
$ <tt class="userinput"><b>print here is a W</b></tt><span class="emphasis-reverse">o</span><tt class="userinput"><b>rd</b></tt>
</pre></blockquote>

<p>
<a name="IXTR3-89" />
</p>

</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.2. The History File</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.4. Vi Editing Mode</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>