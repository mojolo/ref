<html><head><title>The hist Command (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">2.5. The hist Command</h2>



<p>
<a name="korn2-IDXTERM-506" />
<a name="IXT-2-287308" />
<a name="IXT-2-287309" />

<em class="emphasis">hist</em> is a shell built-in command<a href="#FOOTNOTE-31">[31]</a>
that provides
a superset of the C shell history mechanism. You can use it
to examine the most recent commands you entered, to edit
one or more commands with your favorite "real" editor, and to
run old commands with changes without having to type the entire
command in again. We'll look at each of these uses.
</p><blockquote class="footnote">
<a name="FOOTNOTE-31" /><p> [31]
In <em class="emphasis">ksh88</em>, this command is called <em class="emphasis">fc</em>,
for "fix command."  <em class="emphasis">ksh93</em> provides a built-in alias
for <em class="emphasis">fc</em> to <em class="emphasis">hist</em>, for those who are used
to using the <em class="emphasis">fc</em> command.
Recent versions also have <em class="emphasis">fc</em> as a built-in command that
behaves identically to <em class="emphasis">hist</em>; this is because POSIX requires
that this command be built-in.
</p>
</blockquote>

<p>
<a name="korn2-IDXTERM-509" />
The <em class="emphasis">-l</em> option for <em class="emphasis">hist</em> lists previous commands. It takes
arguments that refer to commands in the history file.
Arguments can be numbers or alphanumeric strings; numbers refer to the
commands in the history file, while strings refer to the most recent
command beginning with the string.
<em class="emphasis">hist</em> treats arguments in a rather complex way:
</p>

<ul>

<li><p>
If you give two arguments, they serve as the first and last
commands to be shown.
</p></li>

<li><p>
If you specify one number argument,
only the command with that number is shown.
</p></li>

<li><p>
With a single string argument, <em class="emphasis">hist</em> searches for the most recent command starting
with that string and shows you everything from that command to the
most recent command.
</p></li>

<li><p>
If you specify no arguments, you will see the last 16
commands you entered. Thus, <tt class="literal">hist -l</tt> by itself is equivalent to the
C shell <em class="emphasis">history</em> command, and indeed the Korn shell defines a
built-in alias <em class="emphasis">history</em> as:
</p>

<p>
<blockquote><pre class="code">
alias history='hist -l'
</pre></blockquote>
</p>

<p>
As you will find out in <a href="ch03_01.htm">Chapter 3</a>,
this means that you can type <tt class="literal">history</tt> and the Korn shell will run the
command <tt class="literal">hist -l</tt>.
</p></li>
</ul>

<p>
A few examples should make these options clearer. Let's say you
logged in and entered these commands:
</p>

<p>
<blockquote><pre class="code">
ls -l
more myfile
vi myfile
wc -l myfile
pr myfile | lp -h
</pre></blockquote>
</p>

<p>
If you type <tt class="literal">hist -l</tt> (or <tt class="literal">history</tt>)
with no arguments, you will see the above list with
command numbers, as in:
</p>

<p>
<blockquote><pre class="code">
1       ls -l
2       more myfile
3       vi myfile
4       wc -l myfile
5       pr myfile | lp -h
</pre></blockquote>
</p>

<p>
The option <em class="emphasis">-n</em> suppresses the line numbers. If you want to see only
commands 2 through 4, type <tt class="literal">hist -l 2 4</tt>. If you want to see only the
<em class="emphasis">vi</em> command, type <tt class="literal">hist -l 3</tt>. To see everything from the
<em class="emphasis">vi</em> command up to the present, type <tt class="literal">hist -l v</tt>. Finally,
if you want to see commands between <em class="emphasis">more</em> and <em class="emphasis">wc</em>,
you can type <tt class="literal">hist -l m w</tt>,
<tt class="literal">hist -l m 4</tt>, <tt class="literal">hist -l 2 4</tt>, etc.
</p>

<p>
Negative history numbers indicate values relative to the current command number.
For example, <tt class="literal">hist -l -3</tt> shows the 3rd previous command.
A less confusing way to to do this is with the <em class="emphasis">-N</em> option:
<tt class="literal">hist -l -N 3</tt> does the same thing.
This also has the advantage of conforming to the POSIX conventions for options and
arguments.
</p>

<p>
The <em class="emphasis">-l</em> option to <em class="emphasis">hist</em> is not particularly useful,
except as a quick
way of remembering what commands you typed recently.
<a name="IXT-2-287310" />
Use the
<em class="emphasis">history</em> alias if you are an experienced C shell user.
<a name="IXTR3-108" />
</p>

<p>
<a name="korn2-IDXTERM-512" />
The other important option to <em class="emphasis">hist</em> is <em class="emphasis">-e</em> for "edit." This is
useful as an "escape hatch" from vi- and emacs-modes if you
aren't used to either of those editors. You can specify the
pathname of your favorite editor and edit commands from your
history file; then when you have made the changes, the shell
actually executes the new lines.
</p>

<p>
Let's say your favorite editor is a little home-brew gem called
<em class="emphasis">zed</em>. You could edit your commands by typing:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>hist -e /usr/local/bin/zed</b></tt>
</pre></blockquote>
</p>

<p>
This seems like a lot of work just to fix a typo in your
previous command; fortunately, there is a better way.
<a name="IXT-2-287311" />
<a name="IXT-2-287312" />
You can set the environment variable <tt class="literal">HISTEDIT</tt> to the pathname of the
editor you want <em class="emphasis">hist</em> to use.
If you put a line in your <em class="emphasis">.profile</em> or<?troff .ne 10?> environment file
saying:
</p>

<p>
<blockquote><pre class="code">
HISTEDIT=/usr/local/bin/zed
</pre></blockquote>
</p>

<p>
you get <em class="emphasis">zed</em> when you invoke <em class="emphasis">hist</em>.
<tt class="literal">HISTEDIT</tt> defaults to
the old line editor <em class="emphasis">ed</em>,
so that the overall default is also <em class="emphasis">ed</em>.<a href="#FOOTNOTE-32">[32]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-32" /><p> [32]
The default is actually a bit complicated in <em class="emphasis">ksh93</em>.
<tt class="literal">hist -e</tt> runs <tt class="literal">${HISTEDIT:-$FCEDIT}</tt> to edit the command line.
This preserves compatibility with <em class="emphasis">ksh88</em>,
where the variable for the <em class="emphasis">fc</em>
command was, not surprisingly, <tt class="literal">FCEDIT</tt>.
If neither variable is set, you get <em class="emphasis">/bin/ed</em>.
(The <tt class="literal">${HISTEDIT:-$FCEDIT}</tt> construct is explained in
<a href="ch04_01.htm">Chapter 4</a>.  The upshot is to use the editor specified by
the <tt class="literal">HISTEDIT</tt> variable if it's set; otherwise use the value
of the <tt class="literal">FCEDIT</tt> variable.)
</p>
</blockquote>

<p>
<em class="emphasis">hist</em> is usually used to fix a recent command.
Therefore, it handles arguments a bit differently than it does
for the <tt class="literal">hist -l</tt> variation above:
</p>

<ul>

<li><p>
With no arguments, <em class="emphasis">hist</em> loads the editor with the most recent
command.
</p></li>

<li><p>
With a numeric argument, <em class="emphasis">hist</em> loads the editor with the command with that
number.
</p></li>

<li><p>
With a string argument, <em class="emphasis">hist</em> loads the most recent command starting
with that string.
</p></li>

<li><p>
With two arguments to <em class="emphasis">hist</em>, the arguments specify the beginning and end of
a range of commands, as above.
</p></li>
</ul>

<p>
Remember that <em class="emphasis">hist</em> actually runs the command(s) after you
edit them. Therefore, the last-named choice can be dangerous.
The Korn shell attempts to execute all commands in the range
you specify
when you exit your editor. If you have typed in any multiline
constructs (like those we will cover in
<a href="ch05_01.htm">Chapter 5</a>),
the results could be even more dangerous.
<a name="IXT-2-287313" />
Although these might seem like valid ways of generating
"instant shell programs," a far better strategy would be to direct
the output of <tt class="literal">hist -nl</tt> with the same arguments to a file;
then edit that file and execute the commands when you're satisfied
with them:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>hist -nl cp &gt; lastcommands</b></tt>   <i class="lineannotation">List all commands that start with cp into lastcommands</i>
$ <tt class="userinput"><b>vi lastcommands</b></tt>              <i class="lineannotation">Edit lastcommands</i>
$ <tt class="userinput"><b>. lastcommands</b></tt>               <i class="lineannotation">Run the commands in it</i>
</pre></blockquote>
</p>

<p>
In this case, the shell will not try
to execute the file when you leave the editor!
</p>

<p>
<a name="IXT-2-287314" />
<a name="IXT-2-287315" />
There is one final use for <em class="emphasis">hist</em>. If you specify the option <em class="emphasis">-s</em>
(i.e., type <tt class="literal">hist -s</tt>), the Korn shell will skip the editing part
and just run the command(s) specified by the argument(s).
Why is this useful? For one thing, just typing <tt class="literal">hist -s</tt>
causes the previous command to repeat, just like the C shell
<tt class="literal">!!</tt> command. The Korn shell provides the built-in alias <em class="emphasis">r</em> for this,
so that if you type <tt class="literal">r</tt> and hit ENTER, you will repeat
the last command.
</p>

<p>
This form of <em class="emphasis">hist</em> allows yet another type of argument, of the
form <em class="replaceable"><tt>old</em><tt class="literal">=</tt><em class="replaceable">new</tt></em>,
meaning "change occurrences of <em class="emphasis">old</em> in the specified
previous command to <em class="emphasis">new</em> and then run it."
(Unfortunately, you can't get the Korn shell to make this kind of
substitution more than once; it only changes the first occurrence
of <em class="emphasis">old</em> to <em class="emphasis">new</em>.)
For example,
suppose that you are using <em class="emphasis">troff</em> and its preprocessors to work
on a document.<a href="#FOOTNOTE-33">[33]</a>
If you accidentally ran the <em class="emphasis">tbl</em> preprocessor
with this command:
</p><blockquote class="footnote">
<a name="FOOTNOTE-33" /><p> [33]
If so, you're one of a rare breed!
</p>
</blockquote>

<p>
<blockquote><pre class="code">
tbl ch2.tr | troff -ms -Tps &gt; ch2.ps
</pre></blockquote>
</p>

<p>
but you needed to run <em class="emphasis">eqn</em>, you can redo it by typing
<tt class="literal">hist -s tbl=eqn</tt>. (You could also
use the alias, <tt class="literal">r tbl=eqn</tt>.) This command would then run:
</p>

<p>
<blockquote><pre class="code">
eqn ch2.tr | troff -ms -Tps &gt; ch2.ps
</pre></blockquote>
</p>

<p>
The Korn shell prints the modified command before running it.
<a name="IXTR3-109" />
<a name="IXTR3-110" />
</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch02_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_06.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">2.4. Vi Editing Mode</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2.6. Finger Habits</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>