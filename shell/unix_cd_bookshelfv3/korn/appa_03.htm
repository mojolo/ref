<html><head><title>The IEEE 1003.2 POSIX Shell Standard (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="appa_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">A.3. The IEEE 1003.2 POSIX Shell Standard</h2>

<p>
<a name="korn2-IDXTERM-2057" />
<a name="IXT-A-286898" />


There have been many attempts to standardize Unix.
Hardware companies' monolithic attempts at market
domination, fragile industry coalitions, marketing failures,
and other such
efforts are the stuff of history -- and the stuff of frustration.
</p>

<p>

Only one standardization effort has not been tied to 
commercial interests: the Portable Operating System
Interface, known as POSIX. This effort started in 1981 with the
<em class="emphasis">/usr/group</em> (now UniForum) Standards Committee, which
produced the <em class="emphasis">/usr/group Standard</em> three years later.

The list of contributors grew.  Eventually, the effort to create
a formal standard moved under the umbrella of
the Institute of Electrical and Electronic Engineers (IEEE)
and the International Organization for Standardization (ISO).
</p>

<p>

The first POSIX standard was published in 1988 and revised in 1996. This one,
called IEEE Standard 1003.1, covered low-level issues at the system 
call level. IEEE Standard 1003.2,
covering the shell, utility programs, 
and user interface issues, was ratified in September 1992
after a six-year effort.
In September 2001, a joint revision of both standards was
approved.  The new standard, covering all the material in the
two earlier separate documents, is known as IEEE Standard 1003.1-2001.
<a name="IXTR3-3" />
</p>

<p>
The POSIX standards were never meant to be rigid and absolute.
The committee members certainly weren't about to put guns
to the heads of operating system implementers and force them
to adhere. Instead, the standards are designed to be flexible
enough to allow for both coexistence of similar available software,
so that existing code isn't in danger of obsolescence, 
and the addition of new features, so that vendors have the incentive
to innovate. In other words, they are
supposed to be the kind of third-party standards that vendors might
actually be interested in following.
</p>

<p>
As a result, most Unix vendors currently comply with
both standards.
The Korn
shell is no exception; it is intended to be 100%
POSIX-compliant.
It pays to be familiar with what's in the standard if you
want to write code that is portable to different systems.
</p>

<p>
<a name="IXT-A-286899" />

The shell part of the standard describes utilities that must be present on all
systems, and others that are optional, depending upon the nature of the
system. One such option is the User Portability Utilities option,
which defines standards for interactive shell use and interactive
utilities like the <em class="emphasis">vi</em> editor.
The standard -- on the order of 2000 pages -- is available through 
the IEEE; for information, contact the IEEE:
</p>

<blockquote><pre class="code">
IEEE Customer Service
445 Hoes Lane, PO Box 1331
Piscataway, NJ 08855-1331
(800) 678-IEEE (United States and Canada)
(732) 981-0060 (international/local)
(732) 981-9667 (fax)
</pre></blockquote>

<p><em class="email">customer.service@ieee.org</em><br>
<a href="http://www.standards.ieee.org/catalog/ordering.html">http://www.standards.ieee.org/catalog/ordering.html</a></p>


<p>
The committee members had two motivating factors to weigh
when they designed the shell standard.  

On the one hand,
the design had to accomodate, as much as possible,
existing shell code written under various Bourne-derived 
shells (the Version 7, System V, BSD, and Korn shells).
These shells are different in several extremely subtle ways,
most of which have to do with the ways certain syntactic
elements interact with each other.
</p>

<p>
It must have been 
quite difficult and tedious to spell out these differences, let
alone to reach compromises among them. Throw in biases
of some committee members towards particular shells, and you might
understand why it took six years to ratify the first 1003.2
standard and another five years to merge the two standards.
</p>

<p>
On the other hand, the shell design had to serve as a standard
on which to base future shell implementations. This implied
goals of simplicity, clarity, and precision -- objectives that seem
especially elusive in the context of the above problems.
</p>

<p>
The designers found one way of ameliorating this dilemma:
they decided that the standard should include not only the
features included in the shell, but also those explicitly
omitted and those included but with unspecified
functionality. The latter category allows some of
the existing shells' innovations to "sneak through" without
becoming part of the standard, while listing omitted features
helps programmers determine which features in existing
shell scripts won't be portable to future shells.
</p>

<p>

The POSIX standard is primarily based on the System V Bourne shell.
Therefore you should
assume that Korn shell features that aren't present in 
the Bourne shell also aren't included in the POSIX standard.
</p>

<p>

However, the Korn shell did contribute a few of its features to 
the POSIX standard, including:
</p>

<ul>

<li><p>

<tt class="literal">$((</tt>...<tt class="literal">))</tt> syntax for arithmetic expressions.
</p></li>


<li><p>

<tt class="literal">$(</tt>...<tt class="literal">)</tt> syntax for command substitution, except
that the <tt class="literal">$(&lt;</tt> <em class="replaceable"><tt>filename</tt></em><tt class="literal">)</tt>
shorthand for
<tt class="literal">$(cat</tt> <em class="replaceable"><tt>filename</tt></em><tt class="literal">)</tt> isn't supported.
</p></li>


<li><p>

Tilde expansion (originally derived from the C shell).
</p></li>

</ul>

<p>
The following Korn shell features are left
"unspecified" in the standard, meaning that their syntax
is acceptable but their functionality is not standardized:
</p>

<ul>

<li><p>

The <tt class="literal">((</tt>...<tt class="literal">))</tt> syntax for arithmetic conditionals.
The arithmetic test operators introduced in <a href="ch05_01.htm">Chapter 5</a>
(e.g., <em class="emphasis">-eq</em>, <em class="emphasis">-lt</em>), however, are included.
</p></li>


<li><p>

The <tt class="literal">[[</tt>...<tt class="literal">]]</tt> syntax for conditional tests.
The external <em class="emphasis">test</em> or <tt class="literal">[</tt>...<tt class="literal">]</tt>
utility should be used instead.
The Korn shell's version of <em class="emphasis">test</em> is POSIX-compliant when
used with no more than three arguments.
(It also complies with four arguments, if the first argument is <tt class="literal">!</tt>.)
</p></li>


<li><p>

The syntax for defining functions that this book uses.
The other syntax shown in <a href="ch04_01.htm">Chapter 4</a> (<em class="replaceable"><tt>fname</tt></em><tt class="literal">()</tt> instead of 
<tt class="literal">function</tt> <em class="replaceable"><tt>fname</tt></em>) is supported,
with what we described as "POSIX semantics;"
see below.
</p></li>

<li><p>

The <tt class="literal">select</tt> control structure.
</p></li>

<li><p>

Signal numbers are only allowed if
the numbers for certain key signals
(INT, TERM, and a few others) are the same as on 
the most important historical versions of Unix. In general,
shell scripts should use symbolic names for signals.
</p></li>

</ul>

<p>
The POSIX standard supports functions, but the 
semantics are weaker than the Korn shell's
<tt class="literal">function</tt>-style functions: functions do not have local
traps or options, and it is not possible to define local
variables.
(For this reason, <em class="emphasis">ksh93</em> has two different syntaxes
for defining functions, with different semantics.)
</p>

<p>

Code blocks (<tt class="literal">{</tt>...<tt class="literal">; }</tt>) are
supported. For maximum portability, when you want literal
curly braces, you should quote them
(for reasons too complicated to go into here).
</p>


<p>
The POSIX standard introduced the following features, which are
different from traditional Bourne shell behavior. <em class="emphasis">ksh93</em>
supports them all:
</p>

<ul>

<li><p>

The command lookup order has been changed to allow 
certain built-in commands to be overridden by functions -- since
aliases aren't included in the standard.
Built-in commands are divided into two
sets by their positions in the command lookup order:
some are processed before functions, some after.
Specifically, the built-in commands
<em class="emphasis">break</em>, <em class="emphasis">:</em> (do nothing), 
<em class="emphasis">continue</em>, <tt class="literal">.</tt> (dot), <em class="emphasis">eval</em>,
<em class="emphasis">exec</em>, <em class="emphasis">exit</em>, 
<em class="emphasis">export</em>, <em class="emphasis">readonly</em>, <em class="emphasis">return</em>,
<em class="emphasis">set</em>, <em class="emphasis">shift</em>, 
<em class="emphasis">trap</em>, and <em class="emphasis">unset</em> take priority over functions.
</p></li>


<li><p>
A new built-in command, <em class="emphasis">command</em>, allows you to 
use built-in commands other than the above even if there
are functions of the same name.<a href="#FOOTNOTE-148">[148]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-148" /><p> [148]
But note that it's <em class="emphasis">not</em> a special built-in!
Design by committee shows through here.
</p>
</blockquote></li>


<li><p>

A new keyword, <tt class="literal">!</tt>, takes the logical
"not" of a command's exit status: if <em class="emphasis">command</em> returns
exit status 0, <tt class="literal">!</tt> <em class="replaceable"><tt>command</tt></em> returns 1;
if <em class="emphasis">command</em>
returns a non-zero value,
<tt class="literal">!</tt> <em class="replaceable"><tt>command</tt></em> returns 0.

<tt class="literal">!</tt> can be used with 
<tt class="literal">&amp;&amp;</tt>, <tt class="literal">||</tt>, and parentheses (for nested subshells)
to create logical combinations of exit statuses in conditionals.
</p></li>


<li><p>

The command <tt class="literal">unset -v</tt> is used instead of <tt class="literal">unset</tt>
(without an option) to remove the definition of a variable.
This provides a better syntactic match with <tt class="literal">unset -f</tt>,
for unsetting functions.
</p></li>

</ul>

<p>
Finally, because the POSIX standard is meant to promote
shell script portability, it explicitly avoids mention of
features that only apply to interactive shell use -- including
aliases, editing modes, control keys, and so on. The User Portability
Utilities option
covers these.  

It also avoids mentioning certain key
implementation issues: in particular, there is no
requirement that multitasking be used for background jobs,
subshells, etc.

This was done to allow portability to
non-multitasking systems like MS-DOS, so that, for example,
the MKS Toolkit (see later in this appendix) can be POSIX compliant.

<a name="IXTR3-4" />


</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="appa_02.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="appa_04.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">A.2. The 1988 Korn Shell</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">A.4. dtksh</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>
