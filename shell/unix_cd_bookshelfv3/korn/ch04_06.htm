<html><head><title>Command Substitution (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch04_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">4.6. Command Substitution</h2>

<p>
<a name="korn2-IDXTERM-942" />
From the discussion so far, we've
seen two ways of getting values into variables: by assignment
statements and by the user supplying them as command-line
arguments (positional parameters). There is another way:
<em class="emphasis">command substitution</em>, which allows you to use the
standard output of a command as if it were the value of a variable.
You will soon see how powerful this feature is.
</p>

<p>
The syntax of command substitution is:
<a name="IXT-4-287571" />
<a name="IXT-4-287572" />
<a name="IXT-4-287573" />
<a name="IXT-4-287574" />
</p>

<p>
<blockquote><pre class="code">
$(<em class="emphasis">Unix command</em>)
</pre></blockquote>
</p>

<p>
The command inside the parenthesis is run, and
anything the command writes to standard output (and
to standard error) is returned as
the value of the expression.
These constructs can be nested, i.e., the Unix command
can contain command substitutions.
</p>

<p>

Here are some simple examples:
</p>

<ul>

<li><p>
The value of <tt class="literal">$(pwd)</tt> is the current directory
(same as the environment variable <tt class="literal">$PWD</tt>).
</p></li>

<li><p>
The value of <tt class="literal">$(ls)</tt> is the names of all files in the
current directory, separated by newlines.
</p></li>

<li><p>
<a name="IXT-4-287575" />
<a name="IXT-4-287576" />

To find out detailed information about a command if you don't
know where its file resides, type
<tt class="literal">ls -l $(whence -p</tt> <em class="replaceable"><tt>command</tt></em><tt class="literal">)</tt>.
The <em class="emphasis">-p</em> option forces <em class="emphasis">whence</em> to do a pathname lookup
and not consider keywords, built-ins, etc.
</p></li>

<li><p>
<a name="IXT-4-287577" />
To get the contents of a file into a variable, you can use
<em class="replaceable"><tt>varname</em><tt class="literal">=$(&lt;</tt> <em class="replaceable">filename</tt></em><tt class="literal">)</tt>.
<tt class="literal">$(cat</tt> <em class="replaceable"><tt>filename</tt></em><tt class="literal">)</tt>
will do the same thing, but
the shell catches the former as a built-in shorthand and
runs it more efficiently.
</p></li>

<li><p>

If you want to edit (with Emacs) every chapter of your book
on the Korn shell that has the phrase "command substitution,"
assuming that your chapter files all begin with <em class="emphasis">ch</em>, you could type:
</p>

<p>
<blockquote><pre class="code">
emacs $(grep -l 'command substitution' ch*.xml)
</pre></blockquote>
</p>

<p>
The <em class="emphasis">-l</em> option to
<em class="emphasis">grep</em> prints only the names of files
that contain matches.
</p></li>
</ul>

<p>
<a name="IXT-4-287578" />
Command substitution, like variable expansion, is done
within double quotes.
(Double quotes inside the command substitution are not affected
by any enclosing double quotes.)
Therefore, our rule in <a href="ch01_01.htm">Chapter 1</a> and <a href="ch03_01.htm">Chapter 3</a> about using single quotes for strings unless they contain variables
will now be extended: "When in doubt, use single quotes, unless
the string contains variables, or command substitutions, in which
case use double quotes."
</p>

<p>
(For backwards compatibility,
the Korn shell supports the original Bourne shell (and C shell) command substituion notation
using backquotes: <tt class="literal">`</tt>...<tt class="literal">`</tt>.  However, it
is considerably harder to use than <tt class="literal">$(</tt>...<tt class="literal">)</tt>,
since quoting and nested command substitutions require careful escaping.
We don't use the backquotes in any of the programs in this book.)
</p>

<p>
You will undoubtedly think of many ways to use command
substitution as you gain experience with the Korn shell.
One that is a bit more complex than those mentioned previously relates
to a customization task that we
saw
in <a href="ch03_01.htm">Chapter 3</a>: personalizing your prompt string.
</p>

<p>
<a name="korn2-IDXTERM-951" />
<a name="IXT-4-287579" />
Recall that you can personalize your prompt string by assigning a value to the variable
<tt class="literal">PS1</tt>. If you are on a network of computers, and you use different
machines from time to time, you may find it handy to have the
name of the machine you're on in your prompt string.
<a name="IXT-4-287580" />
Most modern versions of Unix have the command <em class="emphasis">hostname</em>(1), which
prints the network name of the machine you are on to standard output.
(If you do not have this command, you may have a similar one like
<em class="emphasis">uname</em>.) This command enables you to get the machine name into
your prompt string by putting a line like this in your
<em class="emphasis">.profile</em> or environment file:
</p>

<p>
<blockquote><pre class="code">
PS1="$(hostname) $ "
</pre></blockquote>
</p>

<p>
(Here, the second dollar sign does not need to be preceded by a backslash.
If the character after the <tt class="literal">$</tt> isn't special to the shell,
the <tt class="literal">$</tt> is included literally in the string.)
For example, if your machine had the name <tt class="literal">coltrane</tt>, then this
statement would set your prompt string to
"<tt class="literal">coltrane $</tt> ".
<a name="IXTR3-211" />
</p>

<p>
Command substitution helps us with the solution to the next
programming task,
<a href="ch04_06.htm#korn2-CHP-4-SIDEBAR-4">Task 4-4</a>,
which relates to the album database in <a href="ch04_05.htm#korn2-CHP-4-SIDEBAR-1">Task 4-1</a>.
</p>

<a name="korn2-CHP-4-SIDEBAR-4" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Task 4-4</h4>

<p>
<a name="IXT-4-287581" />
<a name="IXT-4-287582" />

The file used in <a href="ch04_05.htm#korn2-CHP-4-SIDEBAR-1">Task 4-1</a> is actually a report derived from
a bigger table of data about albums. This table consists of several
columns, or <em class="emphasis">fields</em>, to which
a user refers by names like "artist," "title," "year," etc.
The columns are separated by vertical bars (<tt class="literal">|</tt>, the same as the Unix
pipe character).
To deal with individual columns in the table,
field names need to be converted to field numbers.
</p>

<p>
Suppose there is a shell function called <em class="emphasis">getfield</em> that
takes the field name as argument and writes the corresponding
field number on the standard output. Use this routine to help
extract a column from the data table.
</p>

</td></tr></table><p></blockquote>

<p>
<a name="korn2-IDXTERM-957" />
The <em class="emphasis">cut</em>(1) utility is a natural for this task.
<em class="emphasis">cut</em> is a data filter: it extracts columns from tabular data.<a href="#FOOTNOTE-62">[62]</a>
If you supply the numbers of columns you want to extract from the input,
<em class="emphasis">cut</em> prints only those columns on the standard output.
Columns can be character positions or -- relevant in this example -- fields
that are separated by TAB characters or other delimiters.
</p><blockquote class="footnote">
<a name="FOOTNOTE-62" /><p> [62]
<a name="IXT-4-287583" />
<a name="IXT-4-287584" />

Some very old BSD-derived systems don't have <em class="emphasis">cut</em>, but you
can use <em class="emphasis">awk</em> instead.  Whenever you see a command
of the form <tt class="literal">cut -f</tt><em class="replaceable"><tt>N</tt></em> <tt class="literal">-d</tt><em class="replaceable">C
filename</em>, use this instead: <tt class="literal">awk -F</tt><em class="replaceable"><tt>C</em> <tt class="literal">'{ print $</tt><em class="replaceable">N</em> <tt class="literal">}'</tt> <em class="replaceable">filename</tt></em>.
</p>
</blockquote>

<p>
Assume that the data table in our task is a file called
<em class="emphasis">albums</em> and that it looks like this:
</p>

<p>
<blockquote><pre class="code">
Coltrane, John|Giant Steps|Atlantic|1960|Ja
Coltrane, John|Coltrane Jazz|Atlantic|1960|Ja
Coltrane, John|My Favorite Things|Atlantic|1961|Ja
Coltrane, John|Coltrane Plays the Blues|Atlantic|1961|Ja
...
</pre></blockquote>
</p>

<p>
Here is how we would use <em class="emphasis">cut</em> to extract the fourth
(year) column:
</p>

<p>
<blockquote><pre class="code">
cut -f4 -d\| albums
</pre></blockquote>
</p>

<p>
<a name="IXT-4-287585" />
The <em class="emphasis">-d</em> argument is used to specify the character
used as field delimiter (TAB is the default).
The vertical bar must be backslash-escaped so that the
shell doesn't try to interpret it as a pipe.
</p>

<p>
From this line of code and the <em class="emphasis">getfield</em> routine, we can
easily derive the solution to the task. Assume that
the first argument to <em class="emphasis">getfield</em> is the name
of the field the user wants to extract. Then the solution is:
</p>

<p>
<blockquote><pre class="code">
fieldname=$1
cut -f$(getfield $fieldname) -d\| albums
</pre></blockquote>
</p>

<p>
If we ran this script with the argument <tt class="literal">year</tt>, the output would be:
</p>

<p>
<blockquote><pre class="code">
1960
1960
1961
1961
...
</pre></blockquote>
</p>

<a name="IXTR3-212" />
<p>
<a href="ch04_06.htm#korn2-CHP-4-SIDEBAR-5">Task 4-5</a> is
another small task that makes use of <em class="emphasis">cut</em>.
</p>

<a name="korn2-CHP-4-SIDEBAR-5" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Task 4-5</h4>

<p>
<a name="IXT-4-287586" />
<a name="IXT-4-287587" />

Assume that you are logged into a large server or mainframe
that supports many simultaneous users.
Send a mail message to everyone who is currently logged in.
</p>

</td></tr></table><p></blockquote>
<p>
<a name="IXT-4-287588" />
The command
<em class="emphasis">who</em>(1) tells you who is logged in (as well as which
terminal they're on and when they logged in). Its
output looks like this:
</p>

<p>
<blockquote><pre class="code">
billr      console      May 22 07:57
fred       tty02        May 22 08:31
bob        tty04        May 22 08:12
</pre></blockquote>
</p>

<p>
The fields are separated by spaces, not TABs.
<a name="IXT-4-287589" />
Since we need the first
field, we can get away with using a space as the field separator
in the <em class="emphasis">cut</em> command. (Otherwise we'd have to use the option
to <em class="emphasis">cut</em> that uses character columns
instead of fields.)
To provide a space character as an argument
on a command line, you can surround it by quotes:
</p>

<p>
<blockquote><pre class="code">
who | cut -d' ' -f1
</pre></blockquote>
</p>

<p>
With the above <em class="emphasis">who</em> output, this command's output would
look like this:
</p>

<p>
<blockquote><pre class="code">
billr
fred
bob
</pre></blockquote>
</p>

<p>
This leads directly to a solution to the task. Just type:
</p>

<p>
<blockquote><pre class="code">
mail $(who | cut -d' '  -f1)
</pre></blockquote>
</p>

<p>
The command <tt class="literal">mail billr fred bob</tt> will run and then you can type your message.
</p>

<p>
<a href="ch04_06.htm#korn2-CHP-4-SIDEBAR-6">Task 4-6</a>
is another task that shows how useful command pipelines can be
in command substitution.
</p>

<a name="korn2-CHP-4-SIDEBAR-6" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Task 4-6</h4>

<a name="IXT-4-287590" />


The <em class="emphasis">ls</em> command gives you pattern-matching capability
with wildcards, but it doesn't allow you to select files by
<em class="emphasis">modification date</em>. Devise a mechanism that lets you do this.
</p>

</td></tr></table><p></blockquote>

<p>

This task was inspired by the feature of the OpenVMS operating system
that lets you specify files by date with <em class="emphasis">BEFORE</em> and <em class="emphasis">SINCE</em>
parameters.

</p>

<p>
Here is a function that allows you to list all files that were
last modified on the date you give as argument. Once again, we
choose a function for speed reasons. No pun is intended
by the function's name:
</p>

<p>
<blockquote><pre class="code">
function lsd {
    date=$1
    ls -l | grep -i "^.\{41\}$date" | cut -c55-
}
</pre></blockquote>
</p>

<p>
<a name="IXT-4-287591" />
This function depends on the column layout of the <tt class="literal">ls -l</tt> command.
In particular, it depends on dates starting in column 42 and
filenames starting in column 55. If this isn't the case in your
version of Unix, you will need to adjust the column numbers.<a href="#FOOTNOTE-63">[63]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-63" /><p> [63]
For example, <tt class="literal">ls -l</tt> on GNU/Linux has dates starting in
column 43 and filenames starting in column 57.
</p>

</blockquote>

<p>
<a name="IXT-4-287592" />
<a name="IXT-4-287593" />

We use the <em class="emphasis">grep</em> search utility to match the date given
as argument (in the form <em class="emphasis">Mon</em> <em class="emphasis">DD</em>,
e.g., <tt class="literal">Jan 15</tt> or
<tt class="literal">Oct  6</tt>, the latter having two spaces) to the output
of <tt class="literal">ls -l</tt>.
(The regular expression argument to <em class="emphasis">grep</em> is quoted with
double quotes, in order to perform the variable substitution.)
This gives us a long listing of only those files
whose dates match the argument. The <em class="emphasis">-i</em> option to <em class="emphasis">grep</em>
allows you to use all lowercase letters in the month name, while
the rather fancy argument means, "Match any line that contains 41
characters followed by the function argument."

For example, typing
<tt class="literal">lsd 'jan 15'</tt> causes <em class="emphasis">grep</em> to search for lines
that match any 41 characters followed by <tt class="literal">jan 15</tt>
(or <tt class="literal">Jan 15</tt>).
</p>

<p>
<a name="IXT-4-287594" />
The output of <em class="emphasis">grep</em> is piped through
our ubiquitous friend <em class="emphasis">cut</em> to retrieve just the filenames.
The argument to <em class="emphasis">cut</em> tells it to extract characters in column
55 through the end of the line.
</p>

<p>
With command substitution, you can use this function with <em class="emphasis">any</em>
command that accepts filename arguments. For example, if you want
to print all files in your current directory that were last modified
today, and today is January 15, you could type:
</p>

<p>
<blockquote><pre class="code">
lp $(lsd 'jan 15')
</pre></blockquote>
</p>

<p>
The output of <em class="emphasis">lsd</em> is on multiple lines (one for each
filename), but because the variable <tt class="literal">IFS</tt>
(see earlier in this chapter) contains newline by default, the shell
uses newline to separate words in <em class="emphasis">lsd</em>'s output,
just as it normally does with space and TAB.
<a name="IXTR3-213" />
</p>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch04_05.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch04_07.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">4.5. String Operators</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">4.7. Advanced Examples: pushd and popd</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>
