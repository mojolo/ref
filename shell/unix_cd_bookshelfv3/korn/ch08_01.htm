<html><head><title>Process Handling (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>


<h1 class="chapter">Chapter 8. Process Handling</h1>
<div class="htmltoc"><h4 class="tochead">Contents:</h4><p>
<a href="ch08_01.htm#sect1">Process IDs and Job Numbers</a><br />
<a href="ch08_02.htm">Job Control</a><br />
<a href="ch08_03.htm">Signals</a><br />
<a href="ch08_04.htm">trap</a><br />
<a href="ch08_05.htm">Coroutines</a><br />
<a href="ch08_06.htm">Shell Subprocesses and Subshells</a><br /></p></div><p>
<a name="IXT-8-287998" />
<a name="IXT-8-287999" />
<a name="IXT-8-288000" />

The Unix operating system built its reputation on a small number of
concepts, all of which are simple yet powerful. We've seen most of
them by now: standard input/output, pipes, text-filtering
utilities, the tree-structured filesystem, and so on. Unix also
gained notoriety as the first small-computer<a href="#FOOTNOTE-112">[112]</a>
operating system to
give each user control over more than one process.
<a name="korn2-IDXTERM-1577" />
<a name="IXT-8-288001" />

We call this capability <em class="emphasis">user-controlled multitasking</em>.
</p><blockquote class="footnote">
<a name="FOOTNOTE-112" /><p> [112]
The PDP-11 systems on which Unix first became popular were
considered small for the time.
</p>
</blockquote><p>
If Unix is the only operating system that you're familiar with,
you might be surprised to learn that several other major operating
systems have been sadly lacking in this area.

<a name="IXT-8-288002" />
<a name="IXT-8-288003" />
<a name="IXT-8-288004" />

For example,
Microsoft's MS-DOS, for IBM PC compatibles, has no multitasking at all,
let alone user-controlled multitasking.
IBM's own VM/CMS system for large mainframes handles multiple
users but gives them only one process each.
Compaq's OpenVMS has user-controlled multitasking,
but it is limited and difficult to use.

<a name="IXT-8-288005" />
<a name="IXT-8-288006" />
<a name="IXT-8-288007" />
<a name="IXT-8-288008" />

The latest generation of
small-computer operating systems, such as Apple's
Macintosh OS X (which is BSD-based)
and Microsoft's Windows (Windows 95 and later), finally include
user-controlled multitasking at the operating system level.
<a name="IXTR3-328" />
</p><p>
But if you've gotten this far in this book, you probably don't think
that multitasking is a big deal.

You're probably used to the idea
of running a process in the background by putting an ampersand (<tt class="literal">&amp;</tt>) at the end
of the command line.

You have also seen the idea of a shell subprocess in <a href="ch04_01.htm">Chapter 4</a>, when we showed how shell scripts run.
</p><p>
In this chapter, we cover most of the Korn shell's features that
relate to multitasking and process handling in general. We say "most"
because some of these features are,
like the file descriptors we saw
in <a href="ch07_01.htm">Chapter 7</a>, of interest only to low-level systems
programmers.
</p><p>
We start out by looking at certain important primitives for
identifying processes and for controlling them during login sessions and
within shell scripts. Then we move out to a higher-level
perspective, looking at ways to get processes to communicate with each
other.
<a name="IXT-8-288009" />

The Korn shell's coroutine facility is the most
sophisticated interprocess communication scheme that we'll examine;
we also look in more detail at concepts we've already seen, like
pipes and shell subprocesses.
</p><p>
Don't worry about getting bogged down in low-level technical details
about Unix. We provide only the technical information that is
necessary to explain higher-level features, plus a few other tidbits
designed to pique your curiosity.
<a name="IXT-8-288010" />
If you are interested in finding out
more about these areas, refer to your Unix Programmer's Manual or
a book on Unix internals that pertains to your version of Unix.
</p><p>
We strongly recommend that you try out the examples in this chapter.
The behavior of code that involves multiple processes is not as easy
to understand on paper as most of the other examples in this book.
</p><div class="sect1"><a name="korn2-CHP-8-SECT-1" />
<h2 class="sect1"><a name="sect1" />8.1. Process IDs and Job Numbers</h2>

<p>
<a name="korn2-IDXTERM-1589" />
Unix gives all processes numbers, called <em class="emphasis">process IDs</em>, when they
are created.

You will notice that, when you run a command in the background
by appending <tt class="literal">&amp;</tt> to it, the shell responds with a line that looks like
this:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>fred &amp;</b></tt>
[1]     2349
</pre></blockquote>
</p>

<p>
In this example, 2349 is the process ID for the <em class="emphasis">fred</em> process.
<a name="korn2-IDXTERM-1590" />
<a name="korn2-IDXTERM-1591" />

The <tt class="literal">[1]</tt> is a <em class="emphasis">job number</em> assigned by the shell (not the
operating system).

What's the difference? Job numbers refer to
background processes that are currently running under your shell,
while process IDs refer to all processes currently running on the
entire system, for all users. The term <em class="emphasis">job</em> basically refers to a
command line that was invoked from your login shell.
</p>

<p>
If you start up additional background jobs while the first one
is still running, the shell numbers them 2, 3, etc. For example:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>bob &amp;</b></tt>
[2]     2367
$ <tt class="userinput"><b>dave | george &amp;</b></tt>
[3]     2382
</pre></blockquote>
</p>

<p>
Clearly, 1, 2, and 3 are easier to remember than 2349, 2367, and 2382!
<a name="IXTR3-329" />

</p>

<?troff .Nd 10?>

<p>

The shell includes job numbers in messages it prints when a
background job completes, like this:
</p>

<p>
<blockquote><pre class="code">
[1] +  Done                     fred &amp;
</pre></blockquote>
</p>

<p>
We'll explain what the plus sign means soon.
<a name="IXT-8-288011" />
If the job exits with nonzero status (see <a href="ch05_01.htm">Chapter 5</a>), the shell
includes the exit status in parentheses:
</p>

<p>
<blockquote><pre class="code">
[1] +  Done(1)                  fred &amp;
</pre></blockquote>
</p>

<p>
The shell prints other types of messages when certain abnormal things
happen to background jobs; we'll see these later in this chapter.
</p>
</div>

<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch07_03.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch08_02.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">7.3. Command-Line Processing</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">8.2. Job Control</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
      </map>

</body></html>