<html><head><title>typeset (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">6.5. typeset</h2>

<p>
<a name="korn2-IDXTERM-1349" />
The final Korn shell feature that relates to the kinds of values
that variables can hold is the <em class="emphasis">typeset</em> command.
If you are a programmer, you might guess that <em class="emphasis">typeset</em>
is used to specify the <em class="emphasis">type</em> of a variable (integer, string,
etc.); you'd be partially right.
</p>

<p>
<em class="emphasis">typeset</em> is a rather ad hoc collection of things that
you can do to variables that restrict the kinds of values they can take.
Operations are specified by options to <em class="emphasis">typeset</em>; the basic syntax is:
<a name="IXT-6-287837" />

</p>

<p>
<blockquote><pre class="code">
typeset <em class="replaceable"><tt>option varname</em>[=<em class="replaceable">value</tt></em>]
</pre></blockquote>
</p>

<p>
Here, <em class="emphasis">option</em> is an option letter preceded
with a hyphen or plus sign.  Options can be combined and multiple
<em class="emphasis">varname</em>s can be used.  If you leave out
<em class="emphasis">varname</em>, the shell prints a list of variables for
which the given option is turned on.
</p>

<p>
The available options break down into two basic categories:
</p>

<ol>

<li><p>
String formatting operations, such as right- and left-justification,
truncation, and letter case control
</p></li>

<li><p>
Type and attribute functions that are of primary interest to advanced
programmers
</p></li>
</ol>

<a name="korn2-CHP-6-SECT-5.1" /><div class="sect2">
<h3 class="sect2">6.5.1. Local Variables in Functions</h3>

<p>

<a name="korn2-IDXTERM-1351" />
<a name="korn2-IDXTERM-1352" />
<em class="emphasis">typeset</em> without options has an important meaning:
if a <em class="emphasis">typeset</em> statement
is used inside a function definition, the variables involved
all become <em class="emphasis">local</em> to that function (in addition to any
properties they may take on as a result of <em class="emphasis">typeset</em> options).
The ability to define
variables that are local to "subprogram" units (procedures,
functions, subroutines, etc.) is necessary for writing
large programs, because it helps keep subprograms independent of
the main program and of each other.
</p>

<blockquote><b>NOTE:</b> 

Local variable names are restricted to simple identifiers.
When <em class="emphasis">typeset</em> is used with a compound variable
name (i.e., one that contains periods),
that variable is automatically global, even if the
<em class="emphasis">typeset</em> statement occurs inside the body
of a function.
</p>
</blockquote>

<p>
If you just want to declare a variable local to a function,
use <em class="emphasis">typeset</em> without any options. For example:
</p>

<p>
<blockquote><pre class="code">
function afunc {
    typeset diffvar
    samevar=funcvalue
    diffvar=funcvalue
    print "samevar is $samevar"
    print "diffvar is $diffvar"
}

samevar=globvalue
diffvar=globvalue
print "samevar is $samevar"
print "diffvar is $diffvar"
afunc
print "samevar is $samevar"
print "diffvar is $diffvar"
</pre></blockquote>
</p>

<p>
This code prints the following:
</p>

<p>
<blockquote><pre class="code">
samevar is globvalue
diffvar is globvalue
samevar is funcvalue
diffvar is funcvalue
samevar is funcvalue
diffvar is globvalue
</pre></blockquote>
</p>

<p>
<a href="ch06_05.htm#korn2-CHP-6-FIG-1">Figure 6-1</a>
shows this graphically.
</p>

<a name="korn2-CHP-6-FIG-1" /><div class="figure"><img src="figs/ksh2.0601.gif" alt="Figure 6-1" width="374" /></div><h4 class="objtitle">Figure 6-1. Local variables in functions</h4>

<p>
You will see several additional examples of local variables
within functions in <a href="ch09_01.htm">Chapter 9</a>.
<a name="IXTR3-290" />
<a name="IXTR3-291" />
<a name="IXTR3-292" />

</p>
</div>

<a name="korn2-CHP-6-SECT-5.2" /><div class="sect2">
<h3 class="sect2">6.5.2. String Formatting Options</h3>

<p>
<a name="korn2-IDXTERM-1356" />
Now let's look at the various options to <em class="emphasis">typeset</em>.
<a href="ch06_05.htm#korn2-CHP-6-TABLE-6">Table 6-6</a>
lists the string formatting options;
the first three take an optional numeric argument.
</p>

<a name="korn2-CHP-6-TABLE-6" /><h4 class="objtitle">Table 6-6. Typeset string formatting options</h4><table border="1" cellpadding="3">




<tr>
<th>Option</th>
<th>Operation</th>
</tr>




<tr>
<td><tt class="literal">-L</tt><em class="replaceable"><tt>n</tt></em></td>
<td><p>
Left-justify. Remove leading spaces; if <em class="emphasis">n</em>
is given, fill with spaces or truncate on right to length <em class="emphasis">n</em>.
</p></td>
</tr>

<tr>
<td><tt class="literal">-R</tt><em class="replaceable"><tt>n</tt></em></td>
<td><p>
Right-justify. Remove trailing spaces; if <em class="emphasis">n</em>
is given, fill with spaces or truncate on left to length <em class="emphasis">n</em>.
</p></td>
</tr>

<tr>
<td><tt class="literal">-Z</tt><em class="replaceable"><tt>n</tt></em></td>
<td><p>
If used with <tt class="literal">-R</tt>, add leading 0's instead of
spaces if needed.
If used with <tt class="literal">-L</tt>, strips leading 0's.
By itself, acts the same as <tt class="literal">-RZ</tt>.
</p></td>
</tr>

<tr>
<td><tt class="literal">-l</tt></td>
<td>Convert letters to lowercase.</td>
</tr>

<tr>
<td><tt class="literal">-u</tt></td>
<td>Convert letters to uppercase.</td>
</tr>


</table><p>

<p>
Here are a few simple examples. Assume that the variable <tt class="literal">alpha</tt>
is assigned the letters of the alphabet, in alternating case, surrounded
by three spaces on each side:
</p>

<p>
<blockquote><pre class="code">
alpha="   aBcDeFgHiJkLmNoPqRsTuVwXyZ   "
</pre></blockquote>
</p>

<p>
<a href="ch06_05.htm#korn2-CHP-6-TABLE-7">Table 6-7</a>
shows some <em class="emphasis">typeset</em> statements and their resulting values
(assuming that each of the statements are run "independently").

</p>

<a name="korn2-CHP-6-TABLE-7" /><h4 class="objtitle">Table 6-7. Examples of typeset string formatting options</h4><table border="1" cellpadding="3">

<tr>
<th>Statement</th>
<th>Value of v</th>
</tr>




<tr>
<td><tt class="literal">typeset -L v=$alpha</tt></td>
<td><tt class="literal">"aBcDeFgHiJkLmNoPqRsTuVwXyZ      "</tt></td>
</tr>

<tr>
<td><tt class="literal">typeset -L10 v=$alpha</tt></td>
<td><tt class="literal">"aBcDeFgHiJ"</tt></td>
</tr>

<tr>
<td><tt class="literal">typeset -R v=$alpha</tt></td>
<td><blockquote><pre class="code">"      aBcDeFgHiJkLmNoPqRsTuVwXyZ"</pre></blockquote></td>
</tr>

<tr>
<td><tt class="literal">typeset -R16 v=$alpha</tt></td>
<td><tt class="literal">"kLmNoPqRsTuVwXyZ"</tt></td>
</tr>

<tr>
<td><tt class="literal">typeset -l v=$alpha</tt></td>
<td><blockquote><pre class="code">"   abcdefghijklmnopqrstuvwxyz   "</pre></blockquote></td>
</tr>

<tr>
<td><tt class="literal">typeset -uR5 v=$alpha</tt></td>
<td><tt class="literal">"VWXYZ"</tt></td>
</tr>

<tr>
<td><tt class="literal">typeset -Z8 v="123.50"</tt></td>
<td><tt class="literal">"00123.50"</tt></td>
</tr>


</table><p>

<p>
When you run <em class="emphasis">typeset</em> on an existing
variable, its effect is <em class="emphasis">cumulative</em> with whatever <em class="emphasis">typeset</em>s
may have been used previously. This has the obvious exceptions:
</p>

<ul>

<li><p>
A <tt class="literal">typeset -u</tt> undoes a <tt class="literal">typeset -l</tt>, and vice versa.
</p></li>

<li><p>
A <tt class="literal">typeset -R</tt> undoes a <tt class="literal">typeset -L</tt>, and vice versa.
</p></li>

<li><p>
You may not combine <tt class="literal">typeset -l</tt> and
<tt class="literal">typeset -u</tt> with some of the numeric attributes,
such as <tt class="literal">typeset -E</tt>.
Note, though, that <tt class="literal">typeset -ui</tt> creates unsigned
integers.
</p></li>

<li><p>
<tt class="literal">typeset -A</tt> and <tt class="literal">typeset -n</tt>
(associative array and nameref, respectively) are not cumulative.
</p></li>

</ul>

<p>
<a name="IXT-6-287838" />

You can turn off <em class="emphasis">typeset</em> options explicitly by typing
<tt class="literal">typeset +</tt><em class="replaceable"><tt>o</tt></em>,
where <em class="emphasis">o</em> is the option you turned on before.
Of course, it is hard to imagine scenarios where you would want to
turn multiple <em class="emphasis">typeset</em> formatting options on and off over
and over again; you usually set a <em class="emphasis">typeset</em>
option on a given variable only once.
</p>

<p>
An obvious application for the <em class="emphasis">-L</em> and <em class="emphasis">-R</em> options
is one in which you need fixed-width output. The most ubiquitous source
of fixed-width output in the Unix system is reflected in
<a href="ch06_05.htm#korn2-CHP-6-SIDEBAR-3">Task 6-3</a>.
</p>




<a name="korn2-CHP-6-SIDEBAR-3" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Task 6-3</h4>

<p>
<a name="IXT-6-287839" />

Pretend that <em class="emphasis">ls</em> doesn't do multicolumn output;
write a shell script that does it.
</p>

</td></tr></table><p></blockquote>
<p>
For the sake of simplicity, we'll assume further that our
version of Unix is an ancient one, in which filenames
are limited to 14 characters.<a href="#FOOTNOTE-87">[87]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-87" /><p> [87]
We don't know of any modern Unix systems that still have this restriction.
But applying it here considerably simplifies the programming problem.
</p>
</blockquote>

<p>
Our solution to this task relies on many of the concepts we
have seen earlier in this chapter.
<a name="IXT-6-287840" />
<a name="IXT-6-287841" />
<a name="IXT-6-287842" />
It also relies on the fact
that <tt class="literal">set -A</tt> (for constructing arrays) can be combined
with command substitution in an interesting way: each word
(separated by spaces, TABs, or newlines) becomes an element of the array.
For example, if the file <em class="emphasis">bob</em> contains 50 words, the array <tt class="literal">fred</tt> has 50 elements after the statement:
</p>

<p>
<blockquote><pre class="code">
set -A fred $(&lt; bob)
</pre></blockquote>
</p>

<p>
Our strategy is to get the names of all files in the
given directory into an array variable.
<a name="IXT-6-287843" />
<a name="IXT-6-287844" />

We use an arithmetic <tt class="literal">for</tt> loop
as we saw earlier in this chapter,
to get each filename into a variable whose length has been set
to 14. We print that variable in five-column format, with two spaces
between each column (for a total of 80 columns), using a counter
to keep track of columns. Here is the code:
<a name="IXT-6-287845" />
</p>

<p>
<blockquote><pre class="code">
set -A filenames $(ls $1)
typeset -L14 fname
let numcols=5

for ((count = 0; count &lt; ${#filenames[*]} ; count++)); do
    fname=${filenames[count]}
    print -rn "$fname  "
    if (( (count+1) % numcols == 0 )); then
        print           # newline
    fi
done

if (( count % numcols != 0 )); then
    print
fi
</pre></blockquote>
</p>

<p>
The first line sets up the array <tt class="literal">filenames</tt> to contain
all the files in the directory given by the first argument (the current
directory by default).
<a name="IXTR3-293" />

The <em class="emphasis">typeset</em> statement sets up the variable <tt class="literal">fname</tt> to
have a fixed width of 14 characters.
The next
line initializes
<tt class="literal">numcols</tt> to the number of columns per line.
</p>

<p>
<a name="IXT-6-287846" />
<a name="IXT-6-287847" />
<a name="IXT-6-287848" />

The arithmetic <tt class="literal">for</tt> loop iterates once for every element in <tt class="literal">filenames</tt>.
In the body of the loop, the first line assigns the next array element
to the fixed-width variable.

The <em class="emphasis">print</em> statement prints the
latter followed by two spaces; the <em class="emphasis">-n</em> option
suppresses <em class="emphasis">print</em>'s final newline.
</p>

<p>
<a name="IXT-6-287849" />
<a name="IXT-6-287850" />

Then there is the
<tt class="literal">if</tt> statement, which determines when to start the next line. It checks the <em class="emphasis">remainder</em> of <tt class="literal">count + 1</tt> divided by
<tt class="literal">$numcols</tt> -- remember that dollar signs aren't necessary within
a <tt class="literal">$((</tt>...<tt class="literal">))</tt>
construct -- and if the result is 0, it's time to output a newline
via a <em class="emphasis">print</em> statement without arguments. Notice that even though
<tt class="literal">$count</tt> increases by 1 with every iteration of the loop, the
remainder goes through a cycle of 1, 2, 3, 4, 0, 1, 2, 3, 4, 0, ...
</p>

<p>
After the loop, an <tt class="literal">if</tt> construct outputs a final newline if
necessary, i.e., if the <tt class="literal">if</tt> within the loop didn't just do it.
</p>

<p>
We can also use <em class="emphasis">typeset</em> options to clean up the code for
our <em class="emphasis">dosmv</em> script (<a href="ch05_02.htm#korn2-CHP-5-SIDEBAR-4">Task 5-3</a>), which translates filenames
in a given directory from MS-DOS to Unix format. The code for
the script is:
</p>

<p>
<blockquote><pre class="code">
for filename in ${1:+$1/}* ; do
    newfilename=$(print $filename | tr '[A-Z]' '[a-z]')
    newfilename=${newfilename%.}
    # subtlety: quote value of $newfilename to do string comparison,
    # not regular expression match
    if [[ $filename != "$newfilename" ]]; then
        print "$filename -&gt; $newfilename"
        mv $filename $newfilename
    fi
done
</pre></blockquote>
</p>

<p>
<a name="IXT-6-287851" />
<a name="IXT-6-287852" />

We can replace the call to <em class="emphasis">tr</em> in the <tt class="literal">for</tt> loop with
one to <tt class="literal">typeset -l</tt> before the loop:
</p>

<p>
<blockquote><pre class="code">
typeset -l newfilename
for filename in ${1:+$1/}* ; do
    newfilename=${filename%.}
    # subtlety: quote value of $newfilename to do string comparison,
    # not regular expression match
    if [[ $filename != "$newfilename" ]]; then
        print "$filename -&gt; $newfilename"
        mv $filename $newfilename
    fi
done
</pre></blockquote>
</p>

<p>
This way, the translation to lowercase letters is done automatically
each time a value is assigned to <tt class="literal">newfilename</tt>. Not only is this
code cleaner, but it is
also more efficient, because the extra
processes created by <em class="emphasis">tr</em> and command substitution are eliminated.
<a name="IXTR3-294" />
</p>

</div>

<a name="korn2-CHP-6-SECT-5.3" /><div class="sect2">
<h3 class="sect2">6.5.3. Type and Attribute Options</h3>

<p>
<a name="korn2-IDXTERM-1374" />
The other options to <em class="emphasis">typeset</em> are of more use to advanced
shell programmers who are "tweaking" large scripts. These options
are listed in
<a href="ch06_05.htm#korn2-CHP-6-TABLE-8">Table 6-8</a>.

<a name="IXT-6-287853" />
<a name="IXT-6-287854" />
<a name="IXT-6-287855" />

<a name="IXT-6-287856" />
<a name="IXT-6-287857" />

</p>

<a name="korn2-CHP-6-TABLE-8" /><h4 class="objtitle">Table 6-8. Typeset type and attribute options</h4><table border="1" cellpadding="3">




<tr>
<th>Option</th>
<th>Operation</th>
</tr>




<tr>
<td><tt class="literal">-A</tt></td>
<td><p>
Create an associative array.
</p></td>
</tr>

<tr>
<td><tt class="literal">-E</tt><em class="replaceable"><tt>n</tt></em></td>
<td><p>
Represent the variable internally as a double-precision floating-point number;
improves the
efficiency of floating-point arithmetic. If <em class="emphasis">n</em> is given, it is
the number of significant figures to use in output.
Large numbers print in scientific notation:
[-]<em class="emphasis">d.ddd</em><b class="emphasis-bold">e</b>&#177;<em class="emphasis">dd</em>.
Smaller numbers print in regular notation:
[-]<em class="emphasis">ddd</em>.<em class="emphasis">ddd</em>.
</p></td>
</tr>

<tr>
<td><tt class="literal">-F</tt><em class="replaceable"><tt>n</tt></em></td>
<td><p>
Represent the variable internally as a double-precision floating-point number;
improves the
efficiency of floating-point arithmetic. If <em class="emphasis">n</em> is given, it is
the number of decimal places to use in output.
All values print in regular notation:
[-]<em class="emphasis">ddd</em>.<em class="emphasis">ddd</em>.
</p></td>
</tr>

<tr>
<td><tt class="literal">-H</tt></td>
<td><p>
On non-Unix systems, Unix-style filenames are converted into the
format appropriate for the local system.
</p></td>
</tr>

<tr>
<td><tt class="literal">-i</tt><em class="replaceable"><tt>n</tt></em></td>
<td><p>
Represent the variable internally as an integer;
improves the
efficiency of integer arithmetic.
If <em class="emphasis">n</em> is given, it is the
base used for output.
The default base is 10.
</p></td>
</tr>

<tr>
<td><tt class="literal">-n</tt></td>
<td><p>
Create a nameref variable
(see <a href="ch04_01.htm">Chapter 4</a>).
</p></td>
</tr>

<tr>
<td><tt class="literal">-p</tt></td>
<td><p>
When used by itself, prints <tt class="literal">typeset</tt> statements
that describe the attributes of each of the
shell's variables that have attributes set.
With additional options, only prints those variables that have the corresponding
attribute set.
Intended for dumping the shell's state into a file that can later be sourced
by a different shell to recreate the original shell's state.
</p></td>
</tr>

<tr>
<td><tt class="literal">-r</tt></td>
<td><p>
Make the variable read-only: forbid assignment to it and disallow
it from being <em class="emphasis">unset</em>.
The built-in command <em class="emphasis">readonly</em> does the same thing,
but <em class="emphasis">readonly</em> cannot be used for local variables.
</p></td>
</tr>

<tr>
<td><tt class="literal">-t</tt></td>
<td><p>
"Tags" the variable.
The list of tagged variables is available from <em class="emphasis">typeset +t</em>.
This option is obsolete.
</p></td>
</tr>

<tr>
<td><tt class="literal">-ui</tt><em class="replaceable"><tt>n</tt></em></td>
<td><p>
Represent the variable internally as an <em class="emphasis">unsigned</em> integer.
This is discussed further in <a href="appb_01.htm">Appendix B</a>.
If <em class="emphasis">n</em> is given, it is the
base used for output.
The default base is 10.<a href="#FOOTNOTE-88">[88]</a>
</p></td>
</tr>

<tr>
<td><tt class="literal">-x</tt></td>
<td><p>
This does the same thing as the <em class="emphasis">export</em> command,
but <em class="emphasis">export</em> cannot be used for local variables.
</p></td>
</tr>

<tr>
<td><tt class="literal">-f</tt></td>
<td><p>
Refer to function names only;
see <a href="ch06_05.htm#korn2-CHP-6-SECT-5.4">Section 6.5.4</a>, later in this chapter.
</p></td>
</tr>


</table><p>
<a name="FOOTNOTE-88" /><p> [88]
This feature is only in <em class="emphasis">ksh93m</em> and newer.
</p>
</blockquote>

<p>
<a name="IXT-6-287858" />
<a name="IXT-6-287859" />
<a name="IXT-6-287860" />

The <em class="emphasis">-i</em> option is the most useful. You can put it in a script
when you are done writing and debugging it to make arithmetic
run a bit faster, though the speedup will be apparent only
if your script does a <em class="emphasis">lot</em> of arithmetic. The more readable
<em class="emphasis">integer</em> is a built-in alias for <tt class="literal">typeset -i</tt>, so that
<tt class="literal">integer x=5</tt> is the same as <tt class="literal">typeset -i x=5</tt>.
Similarly, the word <em class="emphasis">float</em> is a predefined alias
for <tt class="literal">typeset -E</tt>.<a href="#FOOTNOTE-89">[89]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-89" /><p> [89]
C, C++, and Java programmers may find the choice of the word "float"
to be suprising, since internally the shell uses double-precision floating point.
We theorize that the name "float" was chosen since its meaning is
more obvious to the nonprogrammer than the word "double."
</p>
</blockquote>

<p>

<a name="IXT-6-287861" />
<a name="IXT-6-287862" />

The <em class="emphasis">-r</em> option is useful for setting up "constants" in shell
scripts; constants are like variables except that you can't change
their values once they have been initialized. Constants allow you
to give names to values even if you don't want them changed;
it is considered good programming practice to use named constants in
large programs.
</p>

<p>
The solution to <a href="ch06_05.htm#korn2-CHP-6-SIDEBAR-3">Task 6-3</a> contains a good candidate for
<tt class="literal">typeset -r</tt>: the variable <tt class="literal">numcols</tt>, which specifies
the number of columns in the output. Since <tt class="literal">numcols</tt> is an
integer, we could also use the <em class="emphasis">-i</em> option, i.e., replace
<tt class="literal">let numcols=5</tt> with <tt class="literal">typeset -ri numcols=5</tt>. If we were
to try assigning another value to <tt class="literal">numcols</tt>, the shell would
respond with the error message <tt class="literal">ksh: numcols: is read only</tt>.
<a name="IXTR3-295" />
</p>






<p>
These options are also useful without arguments,
i.e., to see which variables exist that have those options turned on.
</p>
</div>


<a name="korn2-CHP-6-SECT-5.4" /><div class="sect2">
<h3 class="sect2">6.5.4. Function Options</h3>

<p>

<a name="IXT-6-287866" />
<a name="IXT-6-287867" />

The <em class="emphasis">-f</em> option has various suboptions, all of which relate to
functions. These are listed in
<a href="ch06_05.htm#korn2-CHP-6-TABLE-9">Table 6-9</a>.

<a name="IXT-6-287868" />
<a name="IXT-6-287869" />


</p>

<a name="korn2-CHP-6-TABLE-9" /><h4 class="objtitle">Table 6-9. Typeset function options</h4><table border="1" cellpadding="3">




<tr>
<th>Option</th>
<th>Operation</th>
</tr>




<tr>
<td><tt class="literal">-f</tt></td>
<td>With no arguments, prints all function definitions.</td>
</tr>

<tr>
<td><tt class="literal">-f</tt> <em class="replaceable"><tt>fname</tt></em></td>
<td>Prints the definition of function <em class="emphasis">fname</em>.</td>
</tr>

<tr>
<td><tt class="literal">+f</tt></td>
<td>Prints all function names.</td>
</tr>

<tr>
<td><tt class="literal">-ft</tt></td>
<td>Turns on trace mode for named function(s). (<a href="ch09_01.htm">Chapter 9</a>)</td>
</tr>

<tr>
<td><tt class="literal">+ft</tt></td>
<td>Turns off trace mode for named function(s). (<a href="ch09_01.htm">Chapter 9</a>)</td>
</tr>

<tr>
<td><tt class="literal">-fu</tt></td>
<td>Defines given name(s) as autoloaded function(s). (<a href="ch04_01.htm">Chapter 4</a>)</td>
</tr>


</table><p>

<p>
Two of these have built-in aliases that are more mnemonic:
<em class="emphasis">functions</em>
(note the <em class="emphasis">s</em>)
is an alias for <tt class="literal">typeset -f</tt> and
<em class="emphasis">autoload</em> is an alias for <tt class="literal">typeset -fu</tt>.
<a name="IXTR3-296" />
</p>

<p>
<a name="IXT-6-287870" />
<a name="IXT-6-287871" />
Finally, if you type <tt class="literal">typeset</tt> with no arguments, you will see
a list of
all variables that have attributes set
(in no discernible
order), preceded by the
appropriate keywords for whatever <em class="emphasis">typeset</em> options are
turned on. For example, typing <em class="emphasis">typeset</em> in an uncustomized
shell gives you a listing of most of the shell's built-in variables
and their attributes that looks like this:

</p>

<p>
<blockquote><pre class="code">
export HISTFILE
integer TMOUT
export FCEDIT
export _AST_FEATURES
export TERM
HISTEDIT
PS2
PS3
integer PPID
export MAIL
export LOGNAME
export EXINIT
integer LINENO
export PATH
integer HISTCMD
export _
export OLDPWD
export PWD
float precision 3 SECONDS
export SHELL
integer RANDOM
export HOME
export VISUAL
export MANPATH
export EDITOR
export ENV
export HISTSIZE
export USER
export LANG
export MORE
integer OPTIND
integer MAILCHECK
export CDPATH
readonly namespace .sh
</pre></blockquote>
</p>

<p>
Here is the output of <tt class="literal">typeset -p</tt>:
</p>

<blockquote><pre class="code">
typeset -x HISTFILE
typeset -i TMOUT
typeset -x FCEDIT
typeset -x _AST_FEATURES
typeset -x TERM
typeset -x ASIS_DIR
typeset HISTEDIT
typeset PS2
typeset PS3
typeset -i PPID
typeset -x MAIL
typeset -x LOGNAME
typeset -x EXINIT
typeset -i LINENO
typeset -x PATH
typeset -i HISTCMD
typeset -x _
typeset -x OLDPWD
typeset -x PWD
typeset -F 3 SECONDS
typeset -x SHELL
typeset -i RANDOM
typeset -x HOME
typeset -x VISUAL
typeset -x MANPATH
typeset -x EDITOR
typeset -x ENV
typeset -x HISTSIZE
typeset -x USER
typeset -x LANG
typeset -x MORE
typeset -i OPTIND
typeset -i MAILCHECK
typeset -x CDPATH
typeset -r .sh
</pre></blockquote>

<p>
The following command saves the values and attributes of all
the shell's variables for later reuse:
<a name="IXTR3-297" />
<a name="IXTR3-298" />
</p>

<blockquote><pre class="code">
{ set ; typeset -p ;} &gt; varlist
</pre></blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch06_04.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch07_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">6.4. Arrays</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">7. Input/Output and Command-Line Processing</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>