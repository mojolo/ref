<html><head><title>Special Characters and Quoting (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">1.9. Special Characters and Quoting</h2>

<p>
<a name="korn2-IDXTERM-217" />
<a name="IXT-1-287101" />
<a name="IXT-1-287102" />
<a name="IXT-1-287103" />

The characters <tt class="literal">&lt;</tt>, <tt class="literal">&gt;</tt>,
<tt class="literal">|</tt>, and <tt class="literal">&amp;</tt>
are four examples of <em class="emphasis">special characters</em> that have
particular meanings to the shell. The wildcards we saw
earlier in this chapter (<tt class="literal">*</tt>, <tt class="literal">?</tt>,
and <tt class="literal">[</tt>...<tt class="literal">]</tt>)
are also special characters.
</p>

<p>
<a href="ch01_09.htm#korn2-CHP-1-TABLE-6">Table 1-6</a>
gives indications
of the meanings of all special characters within shell command
lines only. Other characters have special meanings in specific situations,
such as the regular expressions and
string-handling operators we'll see in
<a href="ch03_01.htm">Chapter 3</a> and
<a href="ch04_01.htm">Chapter 4</a>.

<a name="korn2-CHP-1-TABLE-6" /><h4 class="objtitle">Table 1-6. Special characters</h4>
<table border="1" cellpadding="3">
<tr>
<th>Character</th>
<th>Meaning</th>
<th>See chapter</th>
</tr>




<tr>
<td><tt class="literal">~</tt></td>
<td>Home directory</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">`</tt></td>
<td>Command substitution (archaic)</td>
<td>4</td>
</tr>

<tr>
<td><tt class="literal">#</tt></td>
<td>Comment</td>
<td>4</td>
</tr>

<tr>
<td><tt class="literal">$</tt></td>
<td>Variable expression</td>
<td>3</td>
</tr>

<tr>
<td><tt class="literal">&amp;</tt></td>
<td>Background job</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">*</tt></td>
<td>String wildcard</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">(</tt></td>
<td>Start subshell</td>
<td>8</td>
</tr>

<tr>
<td><tt class="literal">)</tt></td>
<td>End subshell</td>
<td>8</td>
</tr>

<tr>
<td><tt class="literal">\</tt></td>
<td>Quote next character</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">|</tt></td>
<td>Pipe</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">[</tt></td>
<td>Start character-set wildcard</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">]</tt></td>
<td>End character-set wildcard</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">{</tt></td>
<td>Start code block</td>
<td>7</td>
</tr>

<tr>
<td><tt class="literal">}</tt></td>
<td>End code block</td>
<td>7</td>
</tr>

<tr>
<td><tt class="literal">;</tt></td>
<td>Shell command separator</td>
<td>3</td>
</tr>

<tr>
<td><tt class="literal">'</tt></td>
<td>Strong quote</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">"</tt></td>
<td>Weak quote</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">&lt;</tt></td>
<td>Input redirect</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">&gt;</tt></td>
<td>Output redirect</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">/</tt></td>
<td>Pathname directory separator</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">?</tt></td>
<td>Single-character wildcard</td>
<td>1</td>
</tr>

<tr>
<td><tt class="literal">%</tt></td>
<td>Job name/number identifier</td>
<td>8</td>
</tr>


</table><p>

<a name="korn2-CHP-1-SECT-9.1" /><div class="sect2">
<h3 class="sect2">1.9.1. Quoting</h3>

<p>
<a name="korn2-IDXTERM-221" />
<a name="IXT-1-287104" />
<a name="IXT-1-287105" />

Sometimes you will want to use special characters literally, i.e.,
without their special meanings.
This is called <em class="emphasis">quoting</em>. If you surround a string of
characters with single quotes, you strip all characters within
the quotes of any special meaning they might have.
</p>

<p>
<a name="korn2-IDXTERM-224" />
The most obvious situation where you might need to quote a string
is with the <em class="emphasis">print</em> command, which just takes its arguments
and prints them to the standard output. What is the point of
this? As you will see in later chapters, the shell does quite
a bit of processing on command lines -- most of which involves
some of the special characters listed in
<a href="ch01_09.htm#korn2-CHP-1-TABLE-6">Table 1-6</a>.
<em class="emphasis">print</em>
is a way of making the result of that processing available on
the standard output.
</p>

<p>
But what if we wanted to print the string,
<tt class="literal">2 * 3 &gt; 5 is a valid
inequality</tt>?  Suppose you typed this:
</p>

<p>
<blockquote><pre class="code">
print 2 * 3 &gt; 5 is a valid inequality.
</pre></blockquote>
</p>

<p>
You would get your shell prompt back, as if nothing happened!
But then there would be a new
file, with the name <em class="emphasis">5</em>, containing "2", the names of all
files in your current directory, and then the string <tt class="literal">3 is a valid
inequality</tt>.  Make sure you understand why.<a href="#FOOTNOTE-16">[16]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-16" /><p> [16]
This should also
teach you something about the flexibility of placing I/O
redirectors anywhere on the command line -- even in places where
they don't seem to make sense.
</p>
</blockquote>

<p>
However, if you type:
</p>

<p>
<blockquote><pre class="code">
print '2 * 3 &gt; 5 is a valid inequality.'
</pre></blockquote>
</p>

<p>
the result is the string, taken literally. You needn't quote
the entire line, just the portion containing special characters
(or characters you think <em class="emphasis">might</em> be special, if you just
want to be sure):
</p>

<p>
<blockquote><pre class="code">
print '2 * 3 &gt; 5' is a valid inequality.
</pre></blockquote>
</p>

<p>
This has exactly the same result.
<a name="IXTR3-60" />
</p>

<p>

<a name="IXT-1-287106" />
<a name="IXT-1-287107" />
<a name="IXT-1-287108" />
<a name="IXT-1-287109" />
<a name="IXT-1-287110" />



Notice that
<a href="ch01_09.htm#korn2-CHP-1-TABLE-6">Table 1-6</a>
lists double quotes (<tt class="literal">"</tt>) as weak quotes.
A string in double quotes is subjected to <em class="emphasis">some</em> of the steps
the shell takes to process command lines, but not all.
(In other words, it treats only some special characters
as special.) You'll
see in later chapters why double quotes are sometimes
preferable; <a href="ch07_01.htm">Chapter 7</a> contains the most comprehensive explanation
of the shell's rules for quoting and other aspects of command-line processing.
For now, though, you should stick to single quotes.
</p>
</div>

<a name="korn2-CHP-1-SECT-9.2" /><div class="sect2">
<h3 class="sect2">1.9.2. Backslash-Escaping</h3>

<p>
<a name="IXT-1-287111" />
<a name="IXT-1-287112" />
<a name="IXT-1-287113" />

Another way to change the meaning of a character is to precede
it with a backslash (<tt class="literal">\</tt>). This is called <em class="emphasis">backslash-escaping</em>
the character. In most cases, when you backslash-escape
a character, you quote it. For example:
</p>

<p>
<blockquote><pre class="code">
print 2 \* 3 \&gt; 5 is a valid inequality.
</pre></blockquote>
</p>

<p>
produces the same results as if you surrounded the string
with single quotes. To use a literal backslash, just
surround it with quotes (<tt class="literal">'\'</tt>)
or, even better, backslash-escape
it (<tt class="literal">\\</tt>).
<a name="IXTR3-61" />
</p>

<p>
<a name="IXT-1-287114" />

Here is a more practical example of quoting special characters.
A few Unix commands take arguments that often include wildcard
characters, which need to be escaped so the shell doesn't
process them first.
The most common such command<?troff .ne 10?> is
<em class="emphasis">find</em>, which searches for files throughout entire directory
trees.
</p>

<p>
To use <em class="emphasis">find</em>, you supply the root of the tree you want to
search and arguments that
describe the characteristics of the file(s) you want to find.
For example, the command
<tt class="literal">find . -name</tt> <em class="replaceable"><tt>string</tt></em> <tt class="literal">-print</tt>
searches the directory
tree whose root is your current directory for files whose names
match the string, and prints their names. (Other arguments allow you to search
by the file's size, owner, permissions, date of last access, etc.)
</p>

<p>
You can use wildcards in the string, but you must quote them,
so that the <em class="emphasis">find</em> command itself can match them against names
of files in each directory it searches. The command
<tt class="literal">find . -name '*.c'</tt> will
match all files whose names end in <tt class="literal">.c</tt> anywhere in
your current directory, subdirectories, sub-subdirectories, etc.
<a name="IXTR3-62" />
<a name="IXTR3-63" />

</p>
</div>

<a name="korn2-CHP-1-SECT-9.3" /><div class="sect2">
<h3 class="sect2">1.9.3. Quoting Quotation Marks</h3>

<p>
<a name="IXT-1-287115" />
<a name="IXT-1-287116" />
<a name="IXT-1-287117" />

You can also use a backslash to include double quotes within
a string. For example:
</p>

<p>
<blockquote><pre class="code">
print \"2 \* 3 \&gt; 5\" is a valid inequality.
</pre></blockquote>
</p>

<p>
produces the following output:
</p>

<p>
<blockquote><pre class="code">
"2 * 3 &gt; 5" is a valid inequality.
</pre></blockquote>
</p>

<p>
Within a double-quoted string, only the double quotes need to be escaped:
</p>

<blockquote><pre class="code">
$ <tt class="userinput"><b>print "\"2 * 3 &gt; 5\" is a valid inequality."</b></tt>
"2 * 3 &gt; 5" is a valid inequality.
</pre></blockquote>

<p>
<a name="IXT-1-287118" />
<a name="IXT-1-287119" />

However, this won't work with single quotes inside
quoted expressions.
For example,
<tt class="literal">print 'Bob\'s hair is brown'</tt> will not
give you <tt class="literal">Bob's hair is brown</tt>. You can get around this
limitation in various ways. First, try eliminating the quotes:
</p>

<p>
<blockquote><pre class="code">
print Bob\'s hair is brown
</pre></blockquote>
</p>

<p>
If no other characters are special (as is the case here),
this works. Otherwise, you can use the following command:
</p>

<p>
<blockquote><pre class="code">
print 'Bob'\''s hair is brown'
</pre></blockquote>
</p>

<p>
That is, <tt class="literal">'\''</tt> (i.e., single quote, backslash, single quote,
single quote) acts like a single quote within a quoted
string. Why? The first <tt class="literal">'</tt> in
<tt class="literal">'\''</tt>
ends the quoted string we started
with <tt class="literal">'Bob</tt>,
the <tt class="literal">\'</tt> inserts a literal single quote,
and the next <tt class="literal">'</tt>
starts another quoted string that ends with the word
"brown".
If you understand this,
you will have no trouble resolving the other bewildering
issues that arise from the shell's often cryptic syntax.
<a name="IXTR3-64" />
</p>

<p>
A somewhat more legible mechanism, specific to <em class="emphasis">ksh93</em>,
is available for cases where you need to quote single quotes.
This is the shell's extended quoting mechanism: <tt class="literal">$'</tt>...<tt class="literal">'</tt>.
This is known in <em class="emphasis">ksh</em> documentation as
<em class="emphasis">ANSI C quoting</em>, since the rules closely resemble those of
ANSI/ISO Standard C.  The full details are provided in <a href="ch07_01.htm">Chapter 7</a>.
Here is how to use ANSI C quoting for the previous example:
</p>

<blockquote><pre class="code">
$ <tt class="userinput"><b>print $'Bob\'s hair is brown'</b></tt>
Bob's hair is brown
</pre></blockquote>
</div>

<a name="korn2-CHP-1-SECT-9.4" /><div class="sect2">
<h3 class="sect2">1.9.4. Continuing Lines</h3>

<p>
<a name="IXT-1-287120" />
<a name="IXT-1-287121" />

A related issue is how to continue
the text of a command beyond a single line on your terminal or workstation
window. The answer is conceptually simple: just quote the
ENTER key. After all, ENTER is really just another character.
</p>

<p>
You can do this in two ways: by ending a line with a backslash
or by not closing a quote mark (i.e., by including ENTER in a quoted
string). If you use the backslash, there must be nothing
between it and the end of the line -- not even spaces or TABs.
</p>

<p>
Whether you use a backslash or a single quote, you are telling
the shell to ignore the special meaning of the ENTER character.
After you press ENTER, the shell understands that you haven't
finished your command line (i.e., since you haven't typed a
"real" ENTER), so it responds with a secondary
prompt, which is <tt class="literal">&gt;</tt> by default, and waits for you to
finish the line. You can continue a line as many times as you wish.
</p>

<p>
For example, if you want the shell to print the first sentence
of Thomas Hardy's <em class="emphasis">The Return of the Native</em>, you can type this:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>print A Saturday afternoon in November was approaching the \</b></tt>
&gt; <tt class="userinput"><b>time of twilight, and the vast tract of unenclosed wild known \</b></tt>
&gt; <tt class="userinput"><b>as Egdon Heath embrowned itself moment by moment.</b></tt>
</pre></blockquote>
</p>

<p>
<a name="IXTR3-65" />
Or you can do it this way:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>print 'A Saturday afternoon in November was approaching the</b></tt>
&gt; <tt class="userinput"><b>time of twilight, and the vast tract of unenclosed wild known</b></tt>
&gt; <tt class="userinput"><b>as Egdon Heath embrowned itself moment by moment.'</b></tt>
</pre></blockquote>
</p>

<p>
There is a difference between the two methods.
The first prints the sentence as one long line.
The second preserves the embedded newlines.  Try both, and you'll see
the difference.
</p>

<p>
<a name="IXTR3-66" />
</p>
</div>

<a name="korn2-CHP-1-SECT-9.5" /><div class="sect2">
<h3 class="sect2">1.9.5. Control Keys</h3>

<p>
<a name="korn2-IDXTERM-248" />
Control keys -- those that
you type by holding down the CONTROL (or CTRL) key and hitting
another key -- are another type of special character. These normally
don't print anything on your screen, but the operating system
interprets a few of them as special commands. You already know
one of them:
<a name="IXT-1-287122" />
ENTER is actually the same as CTRL-M (try it and see).
You have probably also used the BACKSPACE or DEL key to erase
typos on your command line.
</p>

<p>
Actually, many control keys have functions that don't really
concern you -- yet you should know about them for future reference
and in case you type them by accident.
</p>

<p>
Perhaps the most difficult thing about control keys is that they
can differ from system
to system. The usual arrangement is shown in
<a href="ch01_09.htm#korn2-CHP-1-TABLE-7">Table 1-7</a>,
which
lists the control keys that all major modern versions of Unix support.
Note that CTRL-\ and CTRL-| (control-backslash and control-pipe)
are the same character notated two
different ways; the same is true of DEL and CTRL-?.
</p>

<p>
<a name="korn2-IDXTERM-250" />
You can use the <em class="emphasis">stty</em>(1) command to find out what your settings
are and change them if you wish; see <a href="ch08_01.htm">Chapter 8</a> for details.
On modern Unix systems (including GNU/Linux), use <tt class="literal">stty -a</tt> to
see your control-key settings:
</p>

<p>
<blockquote><pre class="code">
$ <tt class="userinput"><b>stty -a</b></tt>
speed 38400 baud; rows 24; columns 80; line = 0;
intr = ^C; quit = ^\; erase = ^H; kill = ^U; eof = ^D; eol = &lt;undef&gt;;
eol2 = &lt;undef&gt;; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W;
lnext = ^V; flush = ^O; min = 1; time = 0;
...
</pre></blockquote>
</p>

<p>
The ^<em class="emphasis">X</em> notation stands for
CTRL-<em class="emphasis">X</em>.
</p>

<a name="korn2-CHP-1-TABLE-7" /><h4 class="objtitle">Table 1-7. Control keys</h4><table border="1" cellpadding="3">





<tr>
<th>Control key</th>
<th>stty name</th>
<th>Function description</th>
</tr>




<tr>
<td>CTRL-C</td>
<td><tt class="literal">intr</tt></td>
<td><p>
Stop current command.
</p></td>
</tr>

<tr>
<td>CTRL-D</td>
<td><tt class="literal">eof</tt></td>
<td><p>
End of input.
</p></td>
</tr>

<tr>
<td>CTRL-\ or CTRL-|</td>
<td><tt class="literal">quit</tt></td>
<td><p>
Stop current command, if CTRL-C doesn't work.
</p></td>
</tr>

<tr>
<td>CTRL-S</td>
<td><tt class="literal">stop</tt></td>
<td><p>
Halt output to screen.
</p></td>
</tr>

<tr>
<td>CTRL-Q</td>
<td><tt class="literal">start</tt></td>
<td><p>
Restart output to screen.
</p></td>
</tr>

<tr>
<td>BACKSPACE or CTRL-H</td>
<td><tt class="literal">erase</tt></td>
<td><p>
Erase last character.  This is the most common setting.
</p></td>
</tr>

<tr>
<td>DEL or CTRL-?</td>
<td><tt class="literal">erase</tt></td>
<td><p>
Erase last character.  This is a common alternative setting.
for the <tt class="literal">erase</tt> character
</p></td>
</tr>

<tr>
<td>CTRL-U</td>
<td><tt class="literal">kill</tt></td>
<td><p>
Erase entire command line.
</p></td>
</tr>

<tr>
<td>CTRL-Z</td>
<td><tt class="literal">susp</tt></td>
<td><p>
Suspend current command (see <a href="ch08_01.htm">Chapter 8</a>).
</p></td>
</tr>

<tr>
<td>CTRL-R</td>
<td><tt class="literal">rprnt</tt></td>
<td><p>
Reprint the characters entered so far.
</p></td>
</tr>


</table><p>

<p>
<a name="IXTR3-67" />
<a name="IXT-1-287123" />
The control key you will probably use most often is CTRL-C, sometimes
called the <em class="emphasis">interrupt</em> key. This stops -- or tries to stop -- the
command that is currently running. You will want to use this when
you enter a command and find that it's taking too long, when you gave it
the wrong arguments by mistake, when you change your mind about wanting to
run it, and so on.
</p>

<p>
<a name="IXT-1-287124" />
Sometimes CTRL-C doesn't work; in that case, if you
really want to stop a job, try CTRL-\.  But don't just type
CTRL-\; always try CTRL-C first!
<a href="ch08_01.htm">Chapter 8</a> explains why in
detail. For now, suffice it to say that CTRL-C gives the running job
more of a chance to clean up before exiting, so that files and
other resources are not left in funny states.
</p>

<p>
<a name="IXT-1-287125" />
We've already seen an example of CTRL-D.
When you are running a command that accepts standard input from
your keyboard, CTRL-D (as the first character on the line) tells the process that your input
is finished -- as if the process were reading a file and it reached the
end of the file.
<em class="emphasis">mail</em> is a utility in which this happens often.
When you are typing in a message, you end by
typing CTRL-D. This tells <em class="emphasis">mail</em> that your message is complete
and ready to be sent. Most utilities that accept standard
input understand CTRL-D as the end-of-input character, though many such
programs accept commands like <tt class="literal">q</tt>, <tt class="literal">quit</tt>, <tt class="literal">exit</tt>, etc.
The shell itself understands CTRL-D as the end-of-input character:
as we saw earlier in this chapter, you can normally end a login session
by typing CTRL-D at the shell prompt. You are just telling the shell
that its command input is finished.
<a name="IXTR3-68" />
</p>

<p>
<a name="IXT-1-287126" />
<a name="IXT-1-287127" />
CTRL-S and CTRL-Q are called flow-control characters.
They represent
an antiquated way of stopping and restarting the flow of output from
one device to another (e.g., from the computer to your terminal)
that was useful when the speed of such output was low.
They are rather obsolete in these days of high-speed local networks
and dialup lines.
In fact, under the latter conditions,
CTRL-S and CTRL-Q are basically a nuisance.
The only thing you really need to know about them is that if your screen
output becomes "stuck," then you may have hit CTRL-S by accident.
Type CTRL-Q to restart the output; any keys you may have hit in
between will then take effect.
</p>

<p>
The final group of control characters gives you rudimentary ways to
edit your command line.
<a name="IXT-1-287128" />
<a name="IXT-1-287129" />
<a name="IXT-1-287130" />
BACKSPACE or CTRL-H
acts as a backspace key (in fact,
some systems use the DEL or CTRL-? keys as "erase" instead of
BACKSPACE);
CTRL-U erases the entire line and lets you start over.
Again, most of these are outmoded.<a href="#FOOTNOTE-17">[17]</a>
Instead of using these, go
to the next chapter and read about the Korn shell's editing
modes, which are among its most exciting features.
<a name="IXTR3-69" />


</p><blockquote class="footnote">
<a name="FOOTNOTE-17" /><p> [17]
Why are so many outmoded control keys still in use?
They have nothing to do with the shell per se;
instead, they are recognized by the <em class="emphasis">tty driver</em>, an old
and hoary part of the operating system's lower depths that
controls input and output to/from your terminal.
It is, in fact, the tty driver that understands CTRL-D and signals
end-of-input to programs reading from the terminal, not the
programs themselves.
</p>
</blockquote>
</div>


<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch01_08.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch02_01.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">1.8. Background Jobs</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">2. Command-Line Editing</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>
