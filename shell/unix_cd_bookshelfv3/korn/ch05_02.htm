<html><head><title>for (Learning the Korn Shell, 2nd Edition)</title><link rel="stylesheet" type="text/css" href="../style/style1.css" />

<meta name="DC.Creator" content="Arnold Robbins and Bill Rosenblatt" /><meta name="DC.Format" content="text/xml" scheme="MIME" /><meta name="DC.Language" content="en-US" /><meta name="DC.Publisher" content="O'Reilly &amp; Associates, Inc." /><meta name="DC.Source" scheme="ISBN" content="0-596-00195-9" /><meta name="DC.Subject.Keyword" content="stuff" /><meta name="DC.Title" content="Learning the Korn Shell, 2nd Edition" /><meta name="DC.Type" content="Text.Monograph" />

</head><body bgcolor="#ffffff">

<img src="gifs/smbanner.gif" usemap="#banner-map" border="0" alt="Book Home" /><map name="banner-map"><area shape="rect" coords="1,-2,616,66" href="index.htm" alt="Book Title" /><area shape="rect" coords="629,-11,726,25" href="jobjects/fsearch.htm" alt="Search this book" /></map>

<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228" /><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr></table></div>



<h2 class="sect1">5.2. for</h2>

<p>
<a name="korn2-IDXTERM-1123" />
The most obvious enhancement we could make to the previous script
is the ability to report on multiple files instead of just one.
Tests like <em class="emphasis">-e</em> and <em class="emphasis">-d</em> only take single
arguments, so we need a way of calling the code once for each file
given on the command line.
</p>

<p>
The way to do this -- indeed, the way to do many things
with the Korn shell -- is with a looping construct.
The simplest and most widely
applicable of the shell's looping constructs is the
<tt class="literal">for</tt> loop.
We'll use <tt class="literal">for</tt> to enhance <em class="emphasis">fileinfo</em> soon.
</p>

<p>

The <tt class="literal">for</tt> loop allows you to repeat a section of code a fixed
number of times. During each time through the code (known as an
<em class="emphasis">iteration</em>), a special variable called a <em class="emphasis">loop variable</em> is
set to a different value; this way each iteration can do something
slightly different.
</p>

<p>
<a name="IXT-5-287689" />
<a name="IXT-5-287690" />

The <tt class="literal">for</tt> loop is somewhat, but not entirely,
similar to its counterparts in conventional languages like C and Pascal.
The chief difference is that the shell's <tt class="literal">for</tt> loop doesn't let
you specify a number of times to iterate or a
range of values over which to iterate; instead, it
only lets you give a fixed list of values. In other words,
with the normal <tt class="literal">for</tt> loop,
you can't do anything like this Pascal-type code, which executes
<em class="emphasis">statements</em> 10 times:
</p>

<p>
<blockquote><pre class="code">
for x := 1 to 10 do
begin
    <em class="replaceable"><tt>statements ...</tt></em>
end
</pre></blockquote>
</p>

<p>
(You need the arithmetic <tt class="literal">for</tt> loop, which we'll see in
<a href="ch06_01.htm">Chapter 6</a>, to do that.)
</p>

<p>
However, the <tt class="literal">for</tt> loop is ideal for working with
arguments on the command line and with sets of
files (e.g., all files in a given directory). We'll look at an
example of each of these.
<a name="IXT-5-287691" />
But first, here is the syntax for the <tt class="literal">for</tt> construct:
</p>

<p>
<blockquote><pre class="code">
for <em class="replaceable"><tt>name</em> [in <em class="replaceable">list</tt></em>]
do
    <em class="replaceable"><tt>statements that can use</tt></em> $name ...
done
</pre></blockquote>
</p>

<p>
<a name="IXT-5-287692" />
<a name="IXT-5-287693" />
<a name="IXT-5-287694" />
The <em class="emphasis">list</em> is a list of names. (If
<tt class="literal">in</tt> <em class="replaceable"><tt>list</tt></em> is omitted,
the list defaults to <tt class="literal">"$@"</tt>, i.e., the quoted list of
command-line arguments, but we always supply the <tt class="literal">in</tt>
<em class="replaceable"><tt>list</tt></em> for the sake of clarity.)  In our
solutions to the following task, we show two simple ways to specify
lists.
</p>

<p>
In <em class="emphasis">ksh93</em> there is an interesting interaction between the
<tt class="literal">for</tt> loop and nameref variables (see <a href="ch04_01.htm">Chapter 4</a>).
If the control variable is a nameref, then each element in the list of names
can be a different shell variable, and the shell assigns the nameref to each
variable in turn.  For example:

<blockquote><pre class="code">
$ <tt class="userinput"><b>first="I am first"</b></tt>                                  <i class="lineannotation">Initialize test variables</i>
$ <tt class="userinput"><b>second="I am in the middle"</b></tt>
$ <tt class="userinput"><b>third="I am last"</b></tt>
$ <tt class="userinput"><b>nameref refvar=first</b></tt>                                <i class="lineannotation">Create nameref</i>
$ <tt class="userinput"><b>for refvar in first second third ; do</b></tt>               <i class="lineannotation">Loop over variables</i>
&gt;   <tt class="userinput"><b>print "refvar -&gt; ${!refvar}, value: $refvar"</b></tt>      <i class="lineannotation">Print referenced var, value</i>
&gt; <tt class="userinput"><b>done</b></tt>
refvar -&gt; first, value: I am first
refvar -&gt; second, value: I am in the middle
refvar -&gt; third, value: I am last
$ <tt class="userinput"><b>print ${!refvar}, $refvar</b></tt>                           <i class="lineannotation">Show final state</i>
third, I am last
</pre></blockquote>
</p>

<p>
The <tt class="literal">for</tt> loop is instrumental
for solving <a href="ch05_02.htm#korn2-CHP-5-SIDEBAR-3">Task 5-2</a>.
</p>

<a name="korn2-CHP-5-SIDEBAR-3" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Task 5-2</h4>

<p>
<a name="IXT-5-287695" />

You work in an environment with several computers in a local network.
Write a shell script that tells you who is logged in
to each machine on the network.
</p>

</td></tr></table><p></blockquote>
<p>
<a name="korn2-IDXTERM-1131" />
The command <em class="emphasis">finger</em>(1) can be used (among other things)
to find the names of users logged into a remote system; the command
<tt class="literal">finger @</tt><em class="replaceable"><tt>systemname</tt></em> does this. Its output depends on
the version of Unix, but it looks something like this:
</p>

<p>
<blockquote><pre class="code">
[motet.early.com]
Trying 127.146.63.17...
-User-    -Full name-       -What- Idle TTY -Console Location-
hildy    Hildegard von Bingen  ksh   2d5h p1  jem.cal (Telnet)
mikes    Michael Schultheiss   csh   1:21 r4  ncd2.cal (X display 0)
orlando  Orlando di Lasso      csh     28 r7  maccala (Telnet)
marin    Marin Marais          mush  1:02 pb  mussell.cal (Telnet)
johnd    John Dowland          tcsh    17 p0  nugget.west.nobis. (X Window)
</pre></blockquote>
</p>

<p>
In this output, <em class="emphasis">motet.early.com</em> is the full network name of the remote
machine.
</p>

<p>
Assume the systems in your network are called <em class="emphasis">fred</em>,
<em class="emphasis">bob</em>, <em class="emphasis">dave</em>, and <em class="emphasis">pete</em>.
Then the following code would do the trick:
</p>

<p>
<blockquote><pre class="code">
for sys in fred bob dave pete
do
    finger @$sys
    print
done
</pre></blockquote>
</p>

<p>
This works no matter which system you are currently logged into.
It prints output for each machine similar to the above, with blank
lines in between.
</p>

<p>
A slightly better solution would be to store the names of the systems
in an environment variable.
This way, if systems are added to your network and you
need a list of their names in more than one script, you need change
them in only one place. If a variable's value is several words separated
by spaces (or TABS), <tt class="literal">for</tt> will treat it as a list of words.
</p>

<p>
Here is the improved solution. First, put lines in your
<em class="emphasis">.profile</em> or environment file
that define the variable <tt class="literal">SYSNAMES</tt> and make
it an environment variable:
</p>

<p>
<blockquote><pre class="code">
SYSNAMES="fred bob dave pete"
export SYSNAMES
</pre></blockquote>
</p>

<p>
Then, the script can look like this:
</p>

<p>
<blockquote><pre class="code">
for sys in $SYSNAMES
do
    finger @$sys
    print
done
</pre></blockquote>
</p>

<p>
<a name="IXTR3-244" />
The foregoing illustrates a simple use of <tt class="literal">for</tt>,
but it's much more common to use <tt class="literal">for</tt> to iterate
through a list of command-line arguments.  To show this, we can
enhance the <em class="emphasis">fileinfo</em> script above to accept
multiple arguments. First, we write a bit of "wrapper" code that does
the iteration:
</p>

<p>
<blockquote><pre class="code">
for filename in "$@" ; do
    finfo $filename
    print
done
</pre></blockquote>
</p>

<p>
Next, we make the original script into a
function called <em class="emphasis">finfo</em>:<a href="#FOOTNOTE-73">[73]</a>

<blockquote><pre class="code">
function finfo {
    if [[ ! -e $1 ]]; then
        print "file $1 does not exist."
        return 1
    fi
    ...
}
</pre></blockquote>
</p><blockquote class="footnote">
<a name="FOOTNOTE-73" /><p> [73]
<a name="IXT-5-287696" />

A function can have the same name as a script; however, this
isn't good programming practice.
</p>
</blockquote>

<p>
The complete script consists of the <tt class="literal">for</tt> loop code and
the above function.
Because the function must be defined
before it can be used,
the function definition must go first,
or else it should be in a directory listed in both
<tt class="literal">PATH</tt> and <tt class="literal">FPATH</tt>.
</p>

<p>
The <em class="emphasis">fileinfo</em> script works as follows: in the <tt class="literal">for</tt> statement,
<tt class="literal">"$@"</tt> is a list of all positional parameters.
For each argument, the body of the loop is run
with <tt class="literal">filename</tt> set to that argument. In other words,
the function <em class="emphasis">fileinfo</em> is called once for
each value of <tt class="literal">$filename</tt> as its first argument (<tt class="literal">$1</tt>).
The call to <em class="emphasis">print</em> after the call to<?troff .ne 10?> <em class="emphasis">fileinfo</em> merely
prints a blank line between sets of information about each file.
</p>

<p>
Given a directory with the same files as the previous example,
typing <tt class="literal">fileinfo *</tt> would produce the following output:
</p>

<p>
<blockquote><pre class="code">
bob is a regular file.
you own the file.
you have read permission on the file.
you have write permission on the file.
you have execute permission on the file.

custom.tbl is a regular file.
you own the file.
you have read permission on the file.
you have write permission on the file.

exp is a directory that you may search.
you own the file.
you have read permission on the file.
you have write permission on the file.

lpst is a regular file.
you do not own the file.
you have read permission on the file.
</pre></blockquote>
</p>

<p>
<a href="ch05_02.htm#korn2-CHP-5-SIDEBAR-4">Task 5-3</a> is a programming task that exploits the other major
use of <tt class="literal">for</tt>.
</p>

<a name="korn2-CHP-5-SIDEBAR-4" /><blockquote><table border="1" cellpadding="6"><tr><td>
<h4 class="objtitle">Task 5-3</h4>

<p>
<a name="IXT-5-287697" />


<a name="korn2-IDXTERM-1135" />

Your Unix system has the ability to transfer files from an MS-DOS system,
but it leaves the MS-DOS filenames intact. Write a script that
translates the filenames in a given directory
from MS-DOS format to a more Unix-friendly format.
</p>

</td></tr></table><p></blockquote>
<p>
Filenames in the old Microsoft MS-DOS system
have the format <em class="emphasis">FILENAME.EXT</em>. <em class="emphasis">FILENAME</em>
can be up to eight characters long;
<em class="emphasis">EXT</em> is an extension that can be up to three characters.
Letters are all uppercase. We want to do the following:
</p>

<ol>

<li><p>
Translate letters from uppercase to lowercase.
</p></li>


<li><p>
If the extension is null, remove the dot.
</p></li>
</ol>

<p>
<a name="korn2-IDXTERM-1136" />
The first tool we will need for this job is the Unix <em class="emphasis">tr</em>(1)
utility, which translates characters on a one-to-one basis.<a href="#FOOTNOTE-74">[74]</a>
Given the arguments <em class="emphasis">charset1</em> and <em class="emphasis">charset2</em>, it
translates characters in the standard input that are members of
<em class="emphasis">charset1</em> into corresponding characters in <em class="emphasis">charset2</em>.
The two sets are ranges of characters enclosed in square brackets
(<tt class="literal">[</tt>...<tt class="literal">]</tt>
in standard regular-expression form in the manner of <em class="emphasis">grep</em>,
<em class="emphasis">awk</em>,
<em class="emphasis">ed</em>, etc.). More to the point, <tt class="literal">tr [A-Z] [a-z]</tt> takes
its standard input, converts uppercase letters to lowercase,
and writes the converted text to the standard output.<a href="#FOOTNOTE-75">[75]</a>
</p><blockquote class="footnote">
<a name="FOOTNOTE-74" /><p> [74]
As we will see in <a href="ch06_01.htm">Chapter 6</a>, it is possible to do
the case translation within the shell, without using an external program.
We'll ignore that fact for now, though.
</p>
</blockquote><blockquote class="footnote">
<a name="FOOTNOTE-75" /><p> [75]
Modern POSIX-compliant systems support <em class="emphasis">locales</em>, which are ways of
using non-ASCII character sets in a portable fashion.
On such a system, the correct invocation of <em class="emphasis">tr</em> is
<tt class="literal">tr '[:upper:]' '[:lower:]'</tt>.
Most long-time Unix users tend to forget this, though.
</p>
</blockquote>

<p>
That takes care of the first step in the translation process.
We can use a Korn shell string operator to handle the second.
Here is the code for a script we'll call <em class="emphasis">dosmv</em>:
</p>

<p>
<blockquote><pre class="code">
for filename in ${1:+$1/}* ; do
    newfilename=$(print $filename | tr '[A-Z]' '[a-z]')
    newfilename=${newfilename%.}
    print "$filename -&gt; $newfilename"
    mv $filename $newfilename
done
</pre></blockquote>
</p>

<p>
The * in the <tt class="literal">for</tt> construct is <em class="emphasis">not</em> the same
as <tt class="literal">$*</tt>. It's a wildcard, i.e., all files in a directory.
</p>

<p>


This script accepts a directory name as argument,
the default being the current directory.

The expression <tt class="literal">${1:+$1/}</tt> evaluates to the
argument (<tt class="literal">$1</tt>) with a slash appended if the argument is
supplied, or the null string if it isn't supplied.
So the entire expression <tt class="literal">${1:+$1/}*</tt> evaluates
to all files in the given directory, or all files in
the current directory if no argument is given.
</p>

<p>
Therefore, <tt class="literal">filename</tt> takes on the value of each filename
in the list. <tt class="literal">filename</tt> gets translated into <tt class="literal">newfilename</tt>
in two steps. (We could have done it in one, but readability would
have suffered.) The first step uses <em class="emphasis">tr</em> in a pipeline within
a command substitution construct. Our old friend <em class="emphasis">print</em>
makes the value of <tt class="literal">filename</tt> the standard input to <em class="emphasis">tr</em>.
<em class="emphasis">tr</em>'s output becomes the value of the command substitution
expression, which is assigned to <tt class="literal">newfilename</tt>. Thus, if
<tt class="literal">$filename</tt> were <tt class="literal">DOSFILE.TXT</tt>,
<tt class="literal">newfilename</tt> would become
<tt class="literal">dosfile.txt</tt>.
<a name="IXTR3-245" />
</p>

<p>

<a name="IXT-5-287698" />
<a name="IXT-5-287699" />
<a name="IXT-5-287700" />


The second step uses one of the shell's pattern-matching operators,
the one that deletes the shortest match it finds at the end of the
string. The pattern here is <tt class="literal">.</tt>, which means a dot at the end of
the string.<a href="#FOOTNOTE-76">[76]</a>
This means that the expression <tt class="literal">${newfilename%.}</tt> will
delete a dot from <tt class="literal">$newfilename</tt> only if it's at the end of
the string; otherwise the expression will leave <tt class="literal">$newfilename</tt>
intact. For example, if <tt class="literal">$newfilename</tt> is <tt class="literal">dosfile.txt</tt>,
it will be untouched, but if it's <tt class="literal">dosfile.</tt>, the expression will
change it to <tt class="literal">dosfile</tt> without the final dot. In either case,
the new value is assigned back to <tt class="literal">newfilename</tt>.
</p><blockquote class="footnote">
<a name="FOOTNOTE-76" /><p> [76]
Unix regular expression mavens should remember that this is
shell wildcard syntax, in which dots are not operators and therefore
do not need to be backslash-escaped.
</p>
</blockquote>

<p>
<a name="IXT-5-287701" />
<a name="IXT-5-287702" />
The last statement in the <tt class="literal">for</tt> loop body does the file
renaming with the standard Unix <em class="emphasis">mv</em>(1) command. Before that,
a <em class="emphasis">print</em> command simply informs the user of what's happening.
</p>

<p>

There is one little problem with this solution: if there are any files in
the given directory that <em class="emphasis">aren't</em> MS-DOS files (in particular,
if there are files whose names don't contain uppercase letters or
don't contain a dot), then the conversion will do nothing to those
filenames and <em class="emphasis">mv</em> will be called with two identical arguments.
<em class="emphasis">mv</em> will complain with the message:
<tt class="literal">mv:</tt> <em class="replaceable"><tt>filename</tt></em> <tt class="literal">and</tt>
<em class="replaceable"><tt>filename</tt></em> <tt class="literal">are identical</tt>.
The solution is very simple: test to see if the filenames are identical:
</p>


<p>
<blockquote><pre class="code">
for filename in ${1:+$1/}* ; do
    newfilename=$(print $filename | tr '[A-Z]' '[a-z]')
    newfilename=${newfilename%.}
    # subtlety: quote value of $newfilename to do string comparison,
    # not regular expression match
    if [[ $filename != "$newfilename" ]]; then
        print "$filename -&gt; $newfilename"
        mv $filename $newfilename
    fi
done
</pre></blockquote>
</p>

<p>
If you are familiar with an operating system other than MS-DOS and Unix,
you may want to test your script-writing prowess at this point by
writing a script that translates filenames from that system's format
into Unix format. Use the above script as a guideline.
<a name="IXTR3-246" />
</p>

<p>

In particular, if you know the OpenVMS operating system from Compaq (nee DEC),
here's a programming challenge:
</p>

<ol>

<li><p>
Write a script called <em class="emphasis">vmsmv</em> that is similar to <em class="emphasis">dosmv</em>
but works on OpenVMS filenames instead of MS-DOS filenames.
Remember that OpenVMS filenames end with semicolons and version
numbers.
</p></li>


<li><p>
Modify your script so that if
there are several versions of the same file, it renames only the
latest version (with the highest version number).
</p></li>


<li><p>
Modify it further so that your script erases old versions of files.
</p></li>
</ol>

<p>
The first of these is a relatively straightforward modification
of <em class="emphasis">dosmv</em>. Number 2 is difficult; here's a strategy hint:
</p>

<ul>

<li><p>
Develop a regular expression that matches OpenVMS filenames
(you need this for Number 1 anyway).
</p></li>


<li><p>

Get a list of base names (sans version numbers) of files
in the given directory by piping <em class="emphasis">ls</em> through <em class="emphasis">grep</em>
(with the above regular expression),
<em class="emphasis">cut</em>, and <em class="emphasis">sort -u</em>. Use <em class="emphasis">cut</em> with
a semicolon as "field separator"; make sure that you quote the
semicolon so that the shell doesn't treat it as a statement separator.
<em class="emphasis">sort -u</em> removes duplicates
after sorting. Use command substitution to
save the<?troff .ne 10?> resulting list in a variable.
</p></li>


<li><p>
<a name="IXT-5-287703" />
Use a <tt class="literal">for</tt> loop on the list of base names.
For each name, get the highest version number
of the file (just the number, not the whole name).
Do this with another pipeline:
pipe <em class="emphasis">ls</em> through <em class="emphasis">cut</em>,
<em class="emphasis">sort -n</em>, and <em class="emphasis">tail -1</em>.
<em class="emphasis">sort -n</em> sorts in numerical (not lexicographical) order;
<em class="emphasis">tail -N</em> outputs
the last <em class="emphasis">N</em> lines of its input.
Again, use command substitution to capture the output of this
pipeline in a variable.
</p></li>


<li><p>
Append the highest version number to the base name; this is the
file to rename in Unix format.
</p></li>

</ul>

<p>
Once you have completed Number 2, you can do Number 3 by adding a single
line of code to your script; see if you can figure out how.
</p>

<p>
Finally, <em class="emphasis">ksh93</em> provides the arithmetic <tt class="literal">for</tt>
loop, which is much closer in syntax and style to the C <tt class="literal">for</tt> loop.
We present it in the next chapter, after discussing the shell's general arithmetic
capabilities.
<a name="IXTR3-247" />
<a name="IXTR3-248" />
</p>



<hr width="684" align="left" />
<div class="navbar"><table width="684" border="0"><tr><td align="left" valign="top" width="228"><a href="ch05_01.htm"><img src="../gifs/txtpreva.gif" alt="Previous" border="0" /></a></td><td align="center" valign="top" width="228"><a href="index.htm"><img src="../gifs/txthome.gif" alt="Home" border="0" /></a></td><td align="right" valign="top" width="228"><a href="ch05_03.htm"><img src="../gifs/txtnexta.gif" alt="Next" border="0" /></a></td></tr><tr><td align="left" valign="top" width="228">5. Flow Control</td><td align="center" valign="top" width="228"><a href="index/index.htm"><img src="../gifs/index.gif" alt="Book Index" border="0" /></a></td><td align="right" valign="top" width="228">5.3. case</td></tr></table></div>
<hr width="684" align="left" />

<img src="../gifs/navbar.gif" usemap="#library-map" border="0" alt="Library Navigation Links" />
<p><p><font size="-1"><a href="copyrght.htm">Copyright &copy; 2003</a> O'Reilly &amp; Associates. All rights reserved.</font></p>

<map name="library-map">
<area shape="rect" coords="1,0,88,96" href="../index.htm"><area shape="rect" coords="90,0,165,96" href="../upt/index.htm"><area shape="rect" coords="168,1,253,107" href="../mac/index.htm"><area shape="rect" coords="255,0,335,97" href="../korn/index.htm"><area shape="rect" coords="337,0,415,109" href="../unixnut/index.htm"><area shape="rect" coords="417,0,512,122" href="../sedawk/index.htm"><area shape="rect" coords="514,0,605,105" href="../lunix/index.htm"><area shape="rect" coords="611,2,694,121" href="../vi/index.htm">
</map>

</body></html>